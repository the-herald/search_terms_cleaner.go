// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: google/ads/googleads/v20/errors/media_upload_error.proto

package errors

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum describing possible media uploading errors.
type MediaUploadErrorEnum_MediaUploadError int32

const (
	// Enum unspecified.
	MediaUploadErrorEnum_UNSPECIFIED MediaUploadErrorEnum_MediaUploadError = 0
	// The received error code is not known in this version.
	MediaUploadErrorEnum_UNKNOWN MediaUploadErrorEnum_MediaUploadError = 1
	// The uploaded file is too big.
	MediaUploadErrorEnum_FILE_TOO_BIG MediaUploadErrorEnum_MediaUploadError = 2
	// Image data is unparseable.
	MediaUploadErrorEnum_UNPARSEABLE_IMAGE MediaUploadErrorEnum_MediaUploadError = 3
	// Animated images are not allowed.
	MediaUploadErrorEnum_ANIMATED_IMAGE_NOT_ALLOWED MediaUploadErrorEnum_MediaUploadError = 4
	// The image or media bundle format is not allowed.
	MediaUploadErrorEnum_FORMAT_NOT_ALLOWED MediaUploadErrorEnum_MediaUploadError = 5
	// Cannot reference URL external to the media bundle.
	MediaUploadErrorEnum_EXTERNAL_URL_NOT_ALLOWED MediaUploadErrorEnum_MediaUploadError = 6
	// HTML5 ad is trying to reference an asset not in .ZIP file.
	MediaUploadErrorEnum_INVALID_URL_REFERENCE MediaUploadErrorEnum_MediaUploadError = 7
	// The media bundle contains no primary entry.
	MediaUploadErrorEnum_MISSING_PRIMARY_MEDIA_BUNDLE_ENTRY MediaUploadErrorEnum_MediaUploadError = 8
	// Animation has disallowed visual effects.
	MediaUploadErrorEnum_ANIMATED_VISUAL_EFFECT MediaUploadErrorEnum_MediaUploadError = 9
	// Animation longer than the allowed 30 second limit.
	MediaUploadErrorEnum_ANIMATION_TOO_LONG MediaUploadErrorEnum_MediaUploadError = 10
	// The aspect ratio of the image does not match the expected aspect ratios
	// provided in the asset spec.
	MediaUploadErrorEnum_ASPECT_RATIO_NOT_ALLOWED MediaUploadErrorEnum_MediaUploadError = 11
	// Audio files are not allowed in bundle.
	MediaUploadErrorEnum_AUDIO_NOT_ALLOWED_IN_MEDIA_BUNDLE MediaUploadErrorEnum_MediaUploadError = 12
	// CMYK jpegs are not supported.
	MediaUploadErrorEnum_CMYK_JPEG_NOT_ALLOWED MediaUploadErrorEnum_MediaUploadError = 13
	// Flash movies are not allowed.
	MediaUploadErrorEnum_FLASH_NOT_ALLOWED MediaUploadErrorEnum_MediaUploadError = 14
	// The frame rate of the video is higher than the allowed 5fps.
	MediaUploadErrorEnum_FRAME_RATE_TOO_HIGH MediaUploadErrorEnum_MediaUploadError = 15
	// ZIP file from Google Web Designer is not published.
	MediaUploadErrorEnum_GOOGLE_WEB_DESIGNER_ZIP_FILE_NOT_PUBLISHED MediaUploadErrorEnum_MediaUploadError = 16
	// Image constraints are violated, but more details (like
	// DIMENSIONS_NOT_ALLOWED or ASPECT_RATIO_NOT_ALLOWED) can not be provided.
	// This happens when asset spec contains more than one constraint and
	// criteria of different constraints are violated.
	MediaUploadErrorEnum_IMAGE_CONSTRAINTS_VIOLATED MediaUploadErrorEnum_MediaUploadError = 17
	// Media bundle data is unrecognizable.
	MediaUploadErrorEnum_INVALID_MEDIA_BUNDLE MediaUploadErrorEnum_MediaUploadError = 18
	// There was a problem with one or more of the media bundle entries.
	MediaUploadErrorEnum_INVALID_MEDIA_BUNDLE_ENTRY MediaUploadErrorEnum_MediaUploadError = 19
	// The asset has an invalid mime type.
	MediaUploadErrorEnum_INVALID_MIME_TYPE MediaUploadErrorEnum_MediaUploadError = 20
	// The media bundle contains an invalid asset path.
	MediaUploadErrorEnum_INVALID_PATH MediaUploadErrorEnum_MediaUploadError = 21
	// Image has layout problem.
	MediaUploadErrorEnum_LAYOUT_PROBLEM MediaUploadErrorEnum_MediaUploadError = 22
	// An asset had a URL reference that is malformed per RFC 1738 convention.
	MediaUploadErrorEnum_MALFORMED_URL MediaUploadErrorEnum_MediaUploadError = 23
	// The uploaded media bundle format is not allowed.
	MediaUploadErrorEnum_MEDIA_BUNDLE_NOT_ALLOWED MediaUploadErrorEnum_MediaUploadError = 24
	// The media bundle is not compatible with the asset spec product type.
	// (For example, Gmail, dynamic remarketing, etc.)
	MediaUploadErrorEnum_MEDIA_BUNDLE_NOT_COMPATIBLE_TO_PRODUCT_TYPE MediaUploadErrorEnum_MediaUploadError = 25
	// A bundle being uploaded that is incompatible with multiple assets for
	// different reasons.
	MediaUploadErrorEnum_MEDIA_BUNDLE_REJECTED_BY_MULTIPLE_ASSET_SPECS MediaUploadErrorEnum_MediaUploadError = 26
	// The media bundle contains too many files.
	MediaUploadErrorEnum_TOO_MANY_FILES_IN_MEDIA_BUNDLE MediaUploadErrorEnum_MediaUploadError = 27
	// Google Web Designer not created for "Google Ads" environment.
	MediaUploadErrorEnum_UNSUPPORTED_GOOGLE_WEB_DESIGNER_ENVIRONMENT MediaUploadErrorEnum_MediaUploadError = 28
	// Unsupported HTML5 feature in HTML5 asset.
	MediaUploadErrorEnum_UNSUPPORTED_HTML5_FEATURE MediaUploadErrorEnum_MediaUploadError = 29
	// URL in HTML5 entry is not SSL compliant.
	MediaUploadErrorEnum_URL_IN_MEDIA_BUNDLE_NOT_SSL_COMPLIANT MediaUploadErrorEnum_MediaUploadError = 30
	// Video file name is longer than the 50 allowed characters.
	MediaUploadErrorEnum_VIDEO_FILE_NAME_TOO_LONG MediaUploadErrorEnum_MediaUploadError = 31
	// Multiple videos with same name in a bundle.
	MediaUploadErrorEnum_VIDEO_MULTIPLE_FILES_WITH_SAME_NAME MediaUploadErrorEnum_MediaUploadError = 32
	// Videos are not allowed in media bundle.
	MediaUploadErrorEnum_VIDEO_NOT_ALLOWED_IN_MEDIA_BUNDLE MediaUploadErrorEnum_MediaUploadError = 33
	// This type of media cannot be uploaded through the Google Ads API.
	MediaUploadErrorEnum_CANNOT_UPLOAD_MEDIA_TYPE_THROUGH_API MediaUploadErrorEnum_MediaUploadError = 34
	// The dimensions of the image are not allowed.
	MediaUploadErrorEnum_DIMENSIONS_NOT_ALLOWED MediaUploadErrorEnum_MediaUploadError = 35
)

// Enum value maps for MediaUploadErrorEnum_MediaUploadError.
var (
	MediaUploadErrorEnum_MediaUploadError_name = map[int32]string{
		0:  "UNSPECIFIED",
		1:  "UNKNOWN",
		2:  "FILE_TOO_BIG",
		3:  "UNPARSEABLE_IMAGE",
		4:  "ANIMATED_IMAGE_NOT_ALLOWED",
		5:  "FORMAT_NOT_ALLOWED",
		6:  "EXTERNAL_URL_NOT_ALLOWED",
		7:  "INVALID_URL_REFERENCE",
		8:  "MISSING_PRIMARY_MEDIA_BUNDLE_ENTRY",
		9:  "ANIMATED_VISUAL_EFFECT",
		10: "ANIMATION_TOO_LONG",
		11: "ASPECT_RATIO_NOT_ALLOWED",
		12: "AUDIO_NOT_ALLOWED_IN_MEDIA_BUNDLE",
		13: "CMYK_JPEG_NOT_ALLOWED",
		14: "FLASH_NOT_ALLOWED",
		15: "FRAME_RATE_TOO_HIGH",
		16: "GOOGLE_WEB_DESIGNER_ZIP_FILE_NOT_PUBLISHED",
		17: "IMAGE_CONSTRAINTS_VIOLATED",
		18: "INVALID_MEDIA_BUNDLE",
		19: "INVALID_MEDIA_BUNDLE_ENTRY",
		20: "INVALID_MIME_TYPE",
		21: "INVALID_PATH",
		22: "LAYOUT_PROBLEM",
		23: "MALFORMED_URL",
		24: "MEDIA_BUNDLE_NOT_ALLOWED",
		25: "MEDIA_BUNDLE_NOT_COMPATIBLE_TO_PRODUCT_TYPE",
		26: "MEDIA_BUNDLE_REJECTED_BY_MULTIPLE_ASSET_SPECS",
		27: "TOO_MANY_FILES_IN_MEDIA_BUNDLE",
		28: "UNSUPPORTED_GOOGLE_WEB_DESIGNER_ENVIRONMENT",
		29: "UNSUPPORTED_HTML5_FEATURE",
		30: "URL_IN_MEDIA_BUNDLE_NOT_SSL_COMPLIANT",
		31: "VIDEO_FILE_NAME_TOO_LONG",
		32: "VIDEO_MULTIPLE_FILES_WITH_SAME_NAME",
		33: "VIDEO_NOT_ALLOWED_IN_MEDIA_BUNDLE",
		34: "CANNOT_UPLOAD_MEDIA_TYPE_THROUGH_API",
		35: "DIMENSIONS_NOT_ALLOWED",
	}
	MediaUploadErrorEnum_MediaUploadError_value = map[string]int32{
		"UNSPECIFIED":                                   0,
		"UNKNOWN":                                       1,
		"FILE_TOO_BIG":                                  2,
		"UNPARSEABLE_IMAGE":                             3,
		"ANIMATED_IMAGE_NOT_ALLOWED":                    4,
		"FORMAT_NOT_ALLOWED":                            5,
		"EXTERNAL_URL_NOT_ALLOWED":                      6,
		"INVALID_URL_REFERENCE":                         7,
		"MISSING_PRIMARY_MEDIA_BUNDLE_ENTRY":            8,
		"ANIMATED_VISUAL_EFFECT":                        9,
		"ANIMATION_TOO_LONG":                            10,
		"ASPECT_RATIO_NOT_ALLOWED":                      11,
		"AUDIO_NOT_ALLOWED_IN_MEDIA_BUNDLE":             12,
		"CMYK_JPEG_NOT_ALLOWED":                         13,
		"FLASH_NOT_ALLOWED":                             14,
		"FRAME_RATE_TOO_HIGH":                           15,
		"GOOGLE_WEB_DESIGNER_ZIP_FILE_NOT_PUBLISHED":    16,
		"IMAGE_CONSTRAINTS_VIOLATED":                    17,
		"INVALID_MEDIA_BUNDLE":                          18,
		"INVALID_MEDIA_BUNDLE_ENTRY":                    19,
		"INVALID_MIME_TYPE":                             20,
		"INVALID_PATH":                                  21,
		"LAYOUT_PROBLEM":                                22,
		"MALFORMED_URL":                                 23,
		"MEDIA_BUNDLE_NOT_ALLOWED":                      24,
		"MEDIA_BUNDLE_NOT_COMPATIBLE_TO_PRODUCT_TYPE":   25,
		"MEDIA_BUNDLE_REJECTED_BY_MULTIPLE_ASSET_SPECS": 26,
		"TOO_MANY_FILES_IN_MEDIA_BUNDLE":                27,
		"UNSUPPORTED_GOOGLE_WEB_DESIGNER_ENVIRONMENT":   28,
		"UNSUPPORTED_HTML5_FEATURE":                     29,
		"URL_IN_MEDIA_BUNDLE_NOT_SSL_COMPLIANT":         30,
		"VIDEO_FILE_NAME_TOO_LONG":                      31,
		"VIDEO_MULTIPLE_FILES_WITH_SAME_NAME":           32,
		"VIDEO_NOT_ALLOWED_IN_MEDIA_BUNDLE":             33,
		"CANNOT_UPLOAD_MEDIA_TYPE_THROUGH_API":          34,
		"DIMENSIONS_NOT_ALLOWED":                        35,
	}
)

func (x MediaUploadErrorEnum_MediaUploadError) Enum() *MediaUploadErrorEnum_MediaUploadError {
	p := new(MediaUploadErrorEnum_MediaUploadError)
	*p = x
	return p
}

func (x MediaUploadErrorEnum_MediaUploadError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaUploadErrorEnum_MediaUploadError) Descriptor() protoreflect.EnumDescriptor {
	return file_google_ads_googleads_v20_errors_media_upload_error_proto_enumTypes[0].Descriptor()
}

func (MediaUploadErrorEnum_MediaUploadError) Type() protoreflect.EnumType {
	return &file_google_ads_googleads_v20_errors_media_upload_error_proto_enumTypes[0]
}

func (x MediaUploadErrorEnum_MediaUploadError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaUploadErrorEnum_MediaUploadError.Descriptor instead.
func (MediaUploadErrorEnum_MediaUploadError) EnumDescriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_errors_media_upload_error_proto_rawDescGZIP(), []int{0, 0}
}

// Container for enum describing possible media uploading errors.
type MediaUploadErrorEnum struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MediaUploadErrorEnum) Reset() {
	*x = MediaUploadErrorEnum{}
	mi := &file_google_ads_googleads_v20_errors_media_upload_error_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MediaUploadErrorEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaUploadErrorEnum) ProtoMessage() {}

func (x *MediaUploadErrorEnum) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_errors_media_upload_error_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaUploadErrorEnum.ProtoReflect.Descriptor instead.
func (*MediaUploadErrorEnum) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_errors_media_upload_error_proto_rawDescGZIP(), []int{0}
}

var File_google_ads_googleads_v20_errors_media_upload_error_proto protoreflect.FileDescriptor

const file_google_ads_googleads_v20_errors_media_upload_error_proto_rawDesc = "" +
	"\n" +
	"8google/ads/googleads/v20/errors/media_upload_error.proto\x12\x1fgoogle.ads.googleads.v20.errors\"\xfe\b\n" +
	"\x14MediaUploadErrorEnum\"\xe5\b\n" +
	"\x10MediaUploadError\x12\x0f\n" +
	"\vUNSPECIFIED\x10\x00\x12\v\n" +
	"\aUNKNOWN\x10\x01\x12\x10\n" +
	"\fFILE_TOO_BIG\x10\x02\x12\x15\n" +
	"\x11UNPARSEABLE_IMAGE\x10\x03\x12\x1e\n" +
	"\x1aANIMATED_IMAGE_NOT_ALLOWED\x10\x04\x12\x16\n" +
	"\x12FORMAT_NOT_ALLOWED\x10\x05\x12\x1c\n" +
	"\x18EXTERNAL_URL_NOT_ALLOWED\x10\x06\x12\x19\n" +
	"\x15INVALID_URL_REFERENCE\x10\a\x12&\n" +
	"\"MISSING_PRIMARY_MEDIA_BUNDLE_ENTRY\x10\b\x12\x1a\n" +
	"\x16ANIMATED_VISUAL_EFFECT\x10\t\x12\x16\n" +
	"\x12ANIMATION_TOO_LONG\x10\n" +
	"\x12\x1c\n" +
	"\x18ASPECT_RATIO_NOT_ALLOWED\x10\v\x12%\n" +
	"!AUDIO_NOT_ALLOWED_IN_MEDIA_BUNDLE\x10\f\x12\x19\n" +
	"\x15CMYK_JPEG_NOT_ALLOWED\x10\r\x12\x15\n" +
	"\x11FLASH_NOT_ALLOWED\x10\x0e\x12\x17\n" +
	"\x13FRAME_RATE_TOO_HIGH\x10\x0f\x12.\n" +
	"*GOOGLE_WEB_DESIGNER_ZIP_FILE_NOT_PUBLISHED\x10\x10\x12\x1e\n" +
	"\x1aIMAGE_CONSTRAINTS_VIOLATED\x10\x11\x12\x18\n" +
	"\x14INVALID_MEDIA_BUNDLE\x10\x12\x12\x1e\n" +
	"\x1aINVALID_MEDIA_BUNDLE_ENTRY\x10\x13\x12\x15\n" +
	"\x11INVALID_MIME_TYPE\x10\x14\x12\x10\n" +
	"\fINVALID_PATH\x10\x15\x12\x12\n" +
	"\x0eLAYOUT_PROBLEM\x10\x16\x12\x11\n" +
	"\rMALFORMED_URL\x10\x17\x12\x1c\n" +
	"\x18MEDIA_BUNDLE_NOT_ALLOWED\x10\x18\x12/\n" +
	"+MEDIA_BUNDLE_NOT_COMPATIBLE_TO_PRODUCT_TYPE\x10\x19\x121\n" +
	"-MEDIA_BUNDLE_REJECTED_BY_MULTIPLE_ASSET_SPECS\x10\x1a\x12\"\n" +
	"\x1eTOO_MANY_FILES_IN_MEDIA_BUNDLE\x10\x1b\x12/\n" +
	"+UNSUPPORTED_GOOGLE_WEB_DESIGNER_ENVIRONMENT\x10\x1c\x12\x1d\n" +
	"\x19UNSUPPORTED_HTML5_FEATURE\x10\x1d\x12)\n" +
	"%URL_IN_MEDIA_BUNDLE_NOT_SSL_COMPLIANT\x10\x1e\x12\x1c\n" +
	"\x18VIDEO_FILE_NAME_TOO_LONG\x10\x1f\x12'\n" +
	"#VIDEO_MULTIPLE_FILES_WITH_SAME_NAME\x10 \x12%\n" +
	"!VIDEO_NOT_ALLOWED_IN_MEDIA_BUNDLE\x10!\x12(\n" +
	"$CANNOT_UPLOAD_MEDIA_TYPE_THROUGH_API\x10\"\x12\x1a\n" +
	"\x16DIMENSIONS_NOT_ALLOWED\x10#B\xf5\x01\n" +
	"#com.google.ads.googleads.v20.errorsB\x15MediaUploadErrorProtoP\x01ZEgoogle.golang.org/genproto/googleapis/ads/googleads/v20/errors;errors\xa2\x02\x03GAA\xaa\x02\x1fGoogle.Ads.GoogleAds.V20.Errors\xca\x02\x1fGoogle\\Ads\\GoogleAds\\V20\\Errors\xea\x02#Google::Ads::GoogleAds::V20::Errorsb\x06proto3"

var (
	file_google_ads_googleads_v20_errors_media_upload_error_proto_rawDescOnce sync.Once
	file_google_ads_googleads_v20_errors_media_upload_error_proto_rawDescData []byte
)

func file_google_ads_googleads_v20_errors_media_upload_error_proto_rawDescGZIP() []byte {
	file_google_ads_googleads_v20_errors_media_upload_error_proto_rawDescOnce.Do(func() {
		file_google_ads_googleads_v20_errors_media_upload_error_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_google_ads_googleads_v20_errors_media_upload_error_proto_rawDesc), len(file_google_ads_googleads_v20_errors_media_upload_error_proto_rawDesc)))
	})
	return file_google_ads_googleads_v20_errors_media_upload_error_proto_rawDescData
}

var file_google_ads_googleads_v20_errors_media_upload_error_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_google_ads_googleads_v20_errors_media_upload_error_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_google_ads_googleads_v20_errors_media_upload_error_proto_goTypes = []any{
	(MediaUploadErrorEnum_MediaUploadError)(0), // 0: google.ads.googleads.v20.errors.MediaUploadErrorEnum.MediaUploadError
	(*MediaUploadErrorEnum)(nil),               // 1: google.ads.googleads.v20.errors.MediaUploadErrorEnum
}
var file_google_ads_googleads_v20_errors_media_upload_error_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_google_ads_googleads_v20_errors_media_upload_error_proto_init() }
func file_google_ads_googleads_v20_errors_media_upload_error_proto_init() {
	if File_google_ads_googleads_v20_errors_media_upload_error_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_google_ads_googleads_v20_errors_media_upload_error_proto_rawDesc), len(file_google_ads_googleads_v20_errors_media_upload_error_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_ads_googleads_v20_errors_media_upload_error_proto_goTypes,
		DependencyIndexes: file_google_ads_googleads_v20_errors_media_upload_error_proto_depIdxs,
		EnumInfos:         file_google_ads_googleads_v20_errors_media_upload_error_proto_enumTypes,
		MessageInfos:      file_google_ads_googleads_v20_errors_media_upload_error_proto_msgTypes,
	}.Build()
	File_google_ads_googleads_v20_errors_media_upload_error_proto = out.File
	file_google_ads_googleads_v20_errors_media_upload_error_proto_goTypes = nil
	file_google_ads_googleads_v20_errors_media_upload_error_proto_depIdxs = nil
}
