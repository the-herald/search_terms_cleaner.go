// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: google/ads/googleads/v20/errors/experiment_arm_error.proto

package errors

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum describing possible experiment arm errors.
type ExperimentArmErrorEnum_ExperimentArmError int32

const (
	// Enum unspecified.
	ExperimentArmErrorEnum_UNSPECIFIED ExperimentArmErrorEnum_ExperimentArmError = 0
	// The received error code is not known in this version.
	ExperimentArmErrorEnum_UNKNOWN ExperimentArmErrorEnum_ExperimentArmError = 1
	// Number of experiment arms is above limit.
	ExperimentArmErrorEnum_EXPERIMENT_ARM_COUNT_LIMIT_EXCEEDED ExperimentArmErrorEnum_ExperimentArmError = 2
	// Cannot add campaign with invalid status to the experiment arm.
	ExperimentArmErrorEnum_INVALID_CAMPAIGN_STATUS ExperimentArmErrorEnum_ExperimentArmError = 3
	// Cannot add duplicate experiment arm name in one experiment.
	ExperimentArmErrorEnum_DUPLICATE_EXPERIMENT_ARM_NAME ExperimentArmErrorEnum_ExperimentArmError = 4
	// Cannot set campaigns of treatment experiment arm.
	ExperimentArmErrorEnum_CANNOT_SET_TREATMENT_ARM_CAMPAIGN ExperimentArmErrorEnum_ExperimentArmError = 5
	// Cannot edit campaign ids in trial arms in non SETUP experiment.
	ExperimentArmErrorEnum_CANNOT_MODIFY_CAMPAIGN_IDS ExperimentArmErrorEnum_ExperimentArmError = 6
	// Cannot modify the campaigns in the control arm
	// if there is not a suffix set in the trial.
	ExperimentArmErrorEnum_CANNOT_MODIFY_CAMPAIGN_WITHOUT_SUFFIX_SET ExperimentArmErrorEnum_ExperimentArmError = 7
	// Traffic split related settings (like traffic share bounds) can't be
	// modified after the trial has started.
	ExperimentArmErrorEnum_CANNOT_MUTATE_TRAFFIC_SPLIT_AFTER_START ExperimentArmErrorEnum_ExperimentArmError = 8
	// Cannot use shared budget on experiment's control campaign.
	ExperimentArmErrorEnum_CANNOT_ADD_CAMPAIGN_WITH_SHARED_BUDGET ExperimentArmErrorEnum_ExperimentArmError = 9
	// Cannot use custom budget on experiment's control campaigns.
	ExperimentArmErrorEnum_CANNOT_ADD_CAMPAIGN_WITH_CUSTOM_BUDGET ExperimentArmErrorEnum_ExperimentArmError = 10
	// Cannot have enable_dynamic_assets turned on in experiment's campaigns.
	ExperimentArmErrorEnum_CANNOT_ADD_CAMPAIGNS_WITH_DYNAMIC_ASSETS_ENABLED ExperimentArmErrorEnum_ExperimentArmError = 11
	// Cannot use campaign's advertising channel sub type in experiment.
	ExperimentArmErrorEnum_UNSUPPORTED_CAMPAIGN_ADVERTISING_CHANNEL_SUB_TYPE ExperimentArmErrorEnum_ExperimentArmError = 12
	// Experiment date range must be within base campaign's date range.
	ExperimentArmErrorEnum_CANNOT_ADD_BASE_CAMPAIGN_WITH_DATE_RANGE ExperimentArmErrorEnum_ExperimentArmError = 13
	// Bidding strategy is not supported in experiments.
	ExperimentArmErrorEnum_BIDDING_STRATEGY_NOT_SUPPORTED_IN_EXPERIMENTS ExperimentArmErrorEnum_ExperimentArmError = 14
	// Traffic split is not supported for some channel types.
	ExperimentArmErrorEnum_TRAFFIC_SPLIT_NOT_SUPPORTED_FOR_CHANNEL_TYPE ExperimentArmErrorEnum_ExperimentArmError = 15
)

// Enum value maps for ExperimentArmErrorEnum_ExperimentArmError.
var (
	ExperimentArmErrorEnum_ExperimentArmError_name = map[int32]string{
		0:  "UNSPECIFIED",
		1:  "UNKNOWN",
		2:  "EXPERIMENT_ARM_COUNT_LIMIT_EXCEEDED",
		3:  "INVALID_CAMPAIGN_STATUS",
		4:  "DUPLICATE_EXPERIMENT_ARM_NAME",
		5:  "CANNOT_SET_TREATMENT_ARM_CAMPAIGN",
		6:  "CANNOT_MODIFY_CAMPAIGN_IDS",
		7:  "CANNOT_MODIFY_CAMPAIGN_WITHOUT_SUFFIX_SET",
		8:  "CANNOT_MUTATE_TRAFFIC_SPLIT_AFTER_START",
		9:  "CANNOT_ADD_CAMPAIGN_WITH_SHARED_BUDGET",
		10: "CANNOT_ADD_CAMPAIGN_WITH_CUSTOM_BUDGET",
		11: "CANNOT_ADD_CAMPAIGNS_WITH_DYNAMIC_ASSETS_ENABLED",
		12: "UNSUPPORTED_CAMPAIGN_ADVERTISING_CHANNEL_SUB_TYPE",
		13: "CANNOT_ADD_BASE_CAMPAIGN_WITH_DATE_RANGE",
		14: "BIDDING_STRATEGY_NOT_SUPPORTED_IN_EXPERIMENTS",
		15: "TRAFFIC_SPLIT_NOT_SUPPORTED_FOR_CHANNEL_TYPE",
	}
	ExperimentArmErrorEnum_ExperimentArmError_value = map[string]int32{
		"UNSPECIFIED":                                       0,
		"UNKNOWN":                                           1,
		"EXPERIMENT_ARM_COUNT_LIMIT_EXCEEDED":               2,
		"INVALID_CAMPAIGN_STATUS":                           3,
		"DUPLICATE_EXPERIMENT_ARM_NAME":                     4,
		"CANNOT_SET_TREATMENT_ARM_CAMPAIGN":                 5,
		"CANNOT_MODIFY_CAMPAIGN_IDS":                        6,
		"CANNOT_MODIFY_CAMPAIGN_WITHOUT_SUFFIX_SET":         7,
		"CANNOT_MUTATE_TRAFFIC_SPLIT_AFTER_START":           8,
		"CANNOT_ADD_CAMPAIGN_WITH_SHARED_BUDGET":            9,
		"CANNOT_ADD_CAMPAIGN_WITH_CUSTOM_BUDGET":            10,
		"CANNOT_ADD_CAMPAIGNS_WITH_DYNAMIC_ASSETS_ENABLED":  11,
		"UNSUPPORTED_CAMPAIGN_ADVERTISING_CHANNEL_SUB_TYPE": 12,
		"CANNOT_ADD_BASE_CAMPAIGN_WITH_DATE_RANGE":          13,
		"BIDDING_STRATEGY_NOT_SUPPORTED_IN_EXPERIMENTS":     14,
		"TRAFFIC_SPLIT_NOT_SUPPORTED_FOR_CHANNEL_TYPE":      15,
	}
)

func (x ExperimentArmErrorEnum_ExperimentArmError) Enum() *ExperimentArmErrorEnum_ExperimentArmError {
	p := new(ExperimentArmErrorEnum_ExperimentArmError)
	*p = x
	return p
}

func (x ExperimentArmErrorEnum_ExperimentArmError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExperimentArmErrorEnum_ExperimentArmError) Descriptor() protoreflect.EnumDescriptor {
	return file_google_ads_googleads_v20_errors_experiment_arm_error_proto_enumTypes[0].Descriptor()
}

func (ExperimentArmErrorEnum_ExperimentArmError) Type() protoreflect.EnumType {
	return &file_google_ads_googleads_v20_errors_experiment_arm_error_proto_enumTypes[0]
}

func (x ExperimentArmErrorEnum_ExperimentArmError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExperimentArmErrorEnum_ExperimentArmError.Descriptor instead.
func (ExperimentArmErrorEnum_ExperimentArmError) EnumDescriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_errors_experiment_arm_error_proto_rawDescGZIP(), []int{0, 0}
}

// Container for enum describing possible experiment arm error.
type ExperimentArmErrorEnum struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExperimentArmErrorEnum) Reset() {
	*x = ExperimentArmErrorEnum{}
	mi := &file_google_ads_googleads_v20_errors_experiment_arm_error_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExperimentArmErrorEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentArmErrorEnum) ProtoMessage() {}

func (x *ExperimentArmErrorEnum) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_errors_experiment_arm_error_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentArmErrorEnum.ProtoReflect.Descriptor instead.
func (*ExperimentArmErrorEnum) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_errors_experiment_arm_error_proto_rawDescGZIP(), []int{0}
}

var File_google_ads_googleads_v20_errors_experiment_arm_error_proto protoreflect.FileDescriptor

const file_google_ads_googleads_v20_errors_experiment_arm_error_proto_rawDesc = "" +
	"\n" +
	":google/ads/googleads/v20/errors/experiment_arm_error.proto\x12\x1fgoogle.ads.googleads.v20.errors\"\xb1\x05\n" +
	"\x16ExperimentArmErrorEnum\"\x96\x05\n" +
	"\x12ExperimentArmError\x12\x0f\n" +
	"\vUNSPECIFIED\x10\x00\x12\v\n" +
	"\aUNKNOWN\x10\x01\x12'\n" +
	"#EXPERIMENT_ARM_COUNT_LIMIT_EXCEEDED\x10\x02\x12\x1b\n" +
	"\x17INVALID_CAMPAIGN_STATUS\x10\x03\x12!\n" +
	"\x1dDUPLICATE_EXPERIMENT_ARM_NAME\x10\x04\x12%\n" +
	"!CANNOT_SET_TREATMENT_ARM_CAMPAIGN\x10\x05\x12\x1e\n" +
	"\x1aCANNOT_MODIFY_CAMPAIGN_IDS\x10\x06\x12-\n" +
	")CANNOT_MODIFY_CAMPAIGN_WITHOUT_SUFFIX_SET\x10\a\x12+\n" +
	"'CANNOT_MUTATE_TRAFFIC_SPLIT_AFTER_START\x10\b\x12*\n" +
	"&CANNOT_ADD_CAMPAIGN_WITH_SHARED_BUDGET\x10\t\x12*\n" +
	"&CANNOT_ADD_CAMPAIGN_WITH_CUSTOM_BUDGET\x10\n" +
	"\x124\n" +
	"0CANNOT_ADD_CAMPAIGNS_WITH_DYNAMIC_ASSETS_ENABLED\x10\v\x125\n" +
	"1UNSUPPORTED_CAMPAIGN_ADVERTISING_CHANNEL_SUB_TYPE\x10\f\x12,\n" +
	"(CANNOT_ADD_BASE_CAMPAIGN_WITH_DATE_RANGE\x10\r\x121\n" +
	"-BIDDING_STRATEGY_NOT_SUPPORTED_IN_EXPERIMENTS\x10\x0e\x120\n" +
	",TRAFFIC_SPLIT_NOT_SUPPORTED_FOR_CHANNEL_TYPE\x10\x0fB\xf7\x01\n" +
	"#com.google.ads.googleads.v20.errorsB\x17ExperimentArmErrorProtoP\x01ZEgoogle.golang.org/genproto/googleapis/ads/googleads/v20/errors;errors\xa2\x02\x03GAA\xaa\x02\x1fGoogle.Ads.GoogleAds.V20.Errors\xca\x02\x1fGoogle\\Ads\\GoogleAds\\V20\\Errors\xea\x02#Google::Ads::GoogleAds::V20::Errorsb\x06proto3"

var (
	file_google_ads_googleads_v20_errors_experiment_arm_error_proto_rawDescOnce sync.Once
	file_google_ads_googleads_v20_errors_experiment_arm_error_proto_rawDescData []byte
)

func file_google_ads_googleads_v20_errors_experiment_arm_error_proto_rawDescGZIP() []byte {
	file_google_ads_googleads_v20_errors_experiment_arm_error_proto_rawDescOnce.Do(func() {
		file_google_ads_googleads_v20_errors_experiment_arm_error_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_google_ads_googleads_v20_errors_experiment_arm_error_proto_rawDesc), len(file_google_ads_googleads_v20_errors_experiment_arm_error_proto_rawDesc)))
	})
	return file_google_ads_googleads_v20_errors_experiment_arm_error_proto_rawDescData
}

var file_google_ads_googleads_v20_errors_experiment_arm_error_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_google_ads_googleads_v20_errors_experiment_arm_error_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_google_ads_googleads_v20_errors_experiment_arm_error_proto_goTypes = []any{
	(ExperimentArmErrorEnum_ExperimentArmError)(0), // 0: google.ads.googleads.v20.errors.ExperimentArmErrorEnum.ExperimentArmError
	(*ExperimentArmErrorEnum)(nil),                 // 1: google.ads.googleads.v20.errors.ExperimentArmErrorEnum
}
var file_google_ads_googleads_v20_errors_experiment_arm_error_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_google_ads_googleads_v20_errors_experiment_arm_error_proto_init() }
func file_google_ads_googleads_v20_errors_experiment_arm_error_proto_init() {
	if File_google_ads_googleads_v20_errors_experiment_arm_error_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_google_ads_googleads_v20_errors_experiment_arm_error_proto_rawDesc), len(file_google_ads_googleads_v20_errors_experiment_arm_error_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_ads_googleads_v20_errors_experiment_arm_error_proto_goTypes,
		DependencyIndexes: file_google_ads_googleads_v20_errors_experiment_arm_error_proto_depIdxs,
		EnumInfos:         file_google_ads_googleads_v20_errors_experiment_arm_error_proto_enumTypes,
		MessageInfos:      file_google_ads_googleads_v20_errors_experiment_arm_error_proto_msgTypes,
	}.Build()
	File_google_ads_googleads_v20_errors_experiment_arm_error_proto = out.File
	file_google_ads_googleads_v20_errors_experiment_arm_error_proto_goTypes = nil
	file_google_ads_googleads_v20_errors_experiment_arm_error_proto_depIdxs = nil
}
