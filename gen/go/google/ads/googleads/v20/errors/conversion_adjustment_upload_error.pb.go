// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: google/ads/googleads/v20/errors/conversion_adjustment_upload_error.proto

package errors

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum describing possible conversion adjustment upload errors.
type ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError int32

const (
	// Not specified.
	ConversionAdjustmentUploadErrorEnum_UNSPECIFIED ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError = 0
	// Used for return value only. Represents value unknown in this version.
	ConversionAdjustmentUploadErrorEnum_UNKNOWN ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError = 1
	// Can't import events to a conversion action that was just created. Try
	// importing again in 6 hours.
	ConversionAdjustmentUploadErrorEnum_TOO_RECENT_CONVERSION_ACTION ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError = 2
	// The conversion was already retracted. This adjustment was not processed.
	ConversionAdjustmentUploadErrorEnum_CONVERSION_ALREADY_RETRACTED ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError = 4
	// The conversion for this conversion action and conversion identifier can't
	// be found. Make sure your conversion identifiers are associated with the
	// correct conversion action and try again.
	ConversionAdjustmentUploadErrorEnum_CONVERSION_NOT_FOUND ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError = 5
	// Adjustment can't be made to a conversion that occurred more than 54 days
	// ago.
	ConversionAdjustmentUploadErrorEnum_CONVERSION_EXPIRED ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError = 6
	// Adjustment has an `adjustment_date_time` that occurred before the
	// associated conversion. Make sure your `adjustment_date_time` is correct
	// and try again.
	ConversionAdjustmentUploadErrorEnum_ADJUSTMENT_PRECEDES_CONVERSION ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError = 7
	// More recent adjustment `adjustment_date_time` has already been reported
	// for the associated conversion.  Make sure your adjustment
	// `adjustment_date_time` is correct and try again.
	ConversionAdjustmentUploadErrorEnum_MORE_RECENT_RESTATEMENT_FOUND ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError = 8
	// Adjustment can't be recorded because the conversion occurred too
	// recently. Try adjusting a conversion that occurred at least 24 hours ago.
	ConversionAdjustmentUploadErrorEnum_TOO_RECENT_CONVERSION ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError = 9
	// Can't make an adjustment to a conversion that is set up to use the
	// default value. Check your conversion action value setting and try again.
	ConversionAdjustmentUploadErrorEnum_CANNOT_RESTATE_CONVERSION_ACTION_THAT_ALWAYS_USES_DEFAULT_CONVERSION_VALUE ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError = 10
	// Try uploading fewer than 2001 adjustments in a single API request.
	ConversionAdjustmentUploadErrorEnum_TOO_MANY_ADJUSTMENTS_IN_REQUEST ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError = 11
	// The conversion has already been adjusted the maximum number of times.
	// Make sure you're only making necessary adjustment to existing conversion.
	ConversionAdjustmentUploadErrorEnum_TOO_MANY_ADJUSTMENTS ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError = 12
	// The conversion has prior a restatement with the same
	// `adjustment_date_time`. Make sure your adjustment has the correct and
	// unique `adjustment_date_time` and try again.
	ConversionAdjustmentUploadErrorEnum_RESTATEMENT_ALREADY_EXISTS ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError = 13
	// Imported adjustment has a duplicate conversion adjustment with same
	// `adjustment_date_time`. Make sure your adjustment has the correct
	// `adjustment_date_time` and try again.
	ConversionAdjustmentUploadErrorEnum_DUPLICATE_ADJUSTMENT_IN_REQUEST ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError = 14
	// Make sure you agree to the customer data processing terms in conversion
	// settings and try again.
	ConversionAdjustmentUploadErrorEnum_CUSTOMER_NOT_ACCEPTED_CUSTOMER_DATA_TERMS ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError = 15
	// Can't use enhanced conversions with the specified conversion action.
	ConversionAdjustmentUploadErrorEnum_CONVERSION_ACTION_NOT_ELIGIBLE_FOR_ENHANCEMENT ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError = 16
	// Make sure you hash user provided data using SHA-256 and ensure you are
	// normalizing according to the guidelines.
	ConversionAdjustmentUploadErrorEnum_INVALID_USER_IDENTIFIER ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError = 17
	// Use user provided data such as emails or phone numbers hashed using
	// SHA-256 and try again.
	ConversionAdjustmentUploadErrorEnum_UNSUPPORTED_USER_IDENTIFIER ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError = 18
	// Cannot set both gclid_date_time_pair and order_id. Use only 1 type and
	// try again.
	ConversionAdjustmentUploadErrorEnum_GCLID_DATE_TIME_PAIR_AND_ORDER_ID_BOTH_SET ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError = 20
	// Conversion already has enhancements with the same Order ID and conversion
	// action. Make sure your data is correctly configured and try again.
	ConversionAdjustmentUploadErrorEnum_CONVERSION_ALREADY_ENHANCED ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError = 21
	// Multiple enhancements have the same conversion action and Order ID.  Make
	// sure your data is correctly configured and try again.
	ConversionAdjustmentUploadErrorEnum_DUPLICATE_ENHANCEMENT_IN_REQUEST ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError = 22
	// Enhanced conversions can't be used for this account because of Google
	// customer data policies. Contact your Google representative.
	ConversionAdjustmentUploadErrorEnum_CUSTOMER_DATA_POLICY_PROHIBITS_ENHANCEMENT ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError = 23
	// Adjustment for website conversion requires Order ID (ie, transaction ID).
	// Make sure your website tags capture Order IDs and you send the same Order
	// IDs with your adjustment.
	ConversionAdjustmentUploadErrorEnum_MISSING_ORDER_ID_FOR_WEBPAGE ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError = 24
	// Can't use adjustment with Order IDs containing personally-identifiable
	// information (PII).
	ConversionAdjustmentUploadErrorEnum_ORDER_ID_CONTAINS_PII ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError = 25
	// The provided job id in the request is not within the allowed range. A job
	// ID must be a positive integer in the range [1, 2^31).
	ConversionAdjustmentUploadErrorEnum_INVALID_JOB_ID ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError = 26
	// The conversion action specified in the adjustment request cannot be
	// found. Make sure it's available in this account.
	ConversionAdjustmentUploadErrorEnum_NO_CONVERSION_ACTION_FOUND ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError = 27
	// The type of the conversion action specified in the adjustment request
	// isn't supported for uploading adjustments. A conversion adjustment of
	// type `RETRACTION` or `RESTATEMENT` is only permitted for conversion
	// actions of type `SALESFORCE`, `UPLOAD_CLICK` or `WEBPAGE`. A conversion
	// adjustment of type `ENHANCEMENT` is only permitted for conversion
	// actions of type `WEBPAGE`.
	ConversionAdjustmentUploadErrorEnum_INVALID_CONVERSION_ACTION_TYPE ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError = 28
)

// Enum value maps for ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.
var (
	ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError_name = map[int32]string{
		0:  "UNSPECIFIED",
		1:  "UNKNOWN",
		2:  "TOO_RECENT_CONVERSION_ACTION",
		4:  "CONVERSION_ALREADY_RETRACTED",
		5:  "CONVERSION_NOT_FOUND",
		6:  "CONVERSION_EXPIRED",
		7:  "ADJUSTMENT_PRECEDES_CONVERSION",
		8:  "MORE_RECENT_RESTATEMENT_FOUND",
		9:  "TOO_RECENT_CONVERSION",
		10: "CANNOT_RESTATE_CONVERSION_ACTION_THAT_ALWAYS_USES_DEFAULT_CONVERSION_VALUE",
		11: "TOO_MANY_ADJUSTMENTS_IN_REQUEST",
		12: "TOO_MANY_ADJUSTMENTS",
		13: "RESTATEMENT_ALREADY_EXISTS",
		14: "DUPLICATE_ADJUSTMENT_IN_REQUEST",
		15: "CUSTOMER_NOT_ACCEPTED_CUSTOMER_DATA_TERMS",
		16: "CONVERSION_ACTION_NOT_ELIGIBLE_FOR_ENHANCEMENT",
		17: "INVALID_USER_IDENTIFIER",
		18: "UNSUPPORTED_USER_IDENTIFIER",
		20: "GCLID_DATE_TIME_PAIR_AND_ORDER_ID_BOTH_SET",
		21: "CONVERSION_ALREADY_ENHANCED",
		22: "DUPLICATE_ENHANCEMENT_IN_REQUEST",
		23: "CUSTOMER_DATA_POLICY_PROHIBITS_ENHANCEMENT",
		24: "MISSING_ORDER_ID_FOR_WEBPAGE",
		25: "ORDER_ID_CONTAINS_PII",
		26: "INVALID_JOB_ID",
		27: "NO_CONVERSION_ACTION_FOUND",
		28: "INVALID_CONVERSION_ACTION_TYPE",
	}
	ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError_value = map[string]int32{
		"UNSPECIFIED":                    0,
		"UNKNOWN":                        1,
		"TOO_RECENT_CONVERSION_ACTION":   2,
		"CONVERSION_ALREADY_RETRACTED":   4,
		"CONVERSION_NOT_FOUND":           5,
		"CONVERSION_EXPIRED":             6,
		"ADJUSTMENT_PRECEDES_CONVERSION": 7,
		"MORE_RECENT_RESTATEMENT_FOUND":  8,
		"TOO_RECENT_CONVERSION":          9,
		"CANNOT_RESTATE_CONVERSION_ACTION_THAT_ALWAYS_USES_DEFAULT_CONVERSION_VALUE": 10,
		"TOO_MANY_ADJUSTMENTS_IN_REQUEST":                                            11,
		"TOO_MANY_ADJUSTMENTS":                                                       12,
		"RESTATEMENT_ALREADY_EXISTS":                                                 13,
		"DUPLICATE_ADJUSTMENT_IN_REQUEST":                                            14,
		"CUSTOMER_NOT_ACCEPTED_CUSTOMER_DATA_TERMS":                                  15,
		"CONVERSION_ACTION_NOT_ELIGIBLE_FOR_ENHANCEMENT":                             16,
		"INVALID_USER_IDENTIFIER":                                                    17,
		"UNSUPPORTED_USER_IDENTIFIER":                                                18,
		"GCLID_DATE_TIME_PAIR_AND_ORDER_ID_BOTH_SET":                                 20,
		"CONVERSION_ALREADY_ENHANCED":                                                21,
		"DUPLICATE_ENHANCEMENT_IN_REQUEST":                                           22,
		"CUSTOMER_DATA_POLICY_PROHIBITS_ENHANCEMENT":                                 23,
		"MISSING_ORDER_ID_FOR_WEBPAGE":                                               24,
		"ORDER_ID_CONTAINS_PII":                                                      25,
		"INVALID_JOB_ID":                                                             26,
		"NO_CONVERSION_ACTION_FOUND":                                                 27,
		"INVALID_CONVERSION_ACTION_TYPE":                                             28,
	}
)

func (x ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError) Enum() *ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError {
	p := new(ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError)
	*p = x
	return p
}

func (x ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError) Descriptor() protoreflect.EnumDescriptor {
	return file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_enumTypes[0].Descriptor()
}

func (ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError) Type() protoreflect.EnumType {
	return &file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_enumTypes[0]
}

func (x ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError.Descriptor instead.
func (ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError) EnumDescriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_rawDescGZIP(), []int{0, 0}
}

// Container for enum describing possible conversion adjustment upload errors.
type ConversionAdjustmentUploadErrorEnum struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConversionAdjustmentUploadErrorEnum) Reset() {
	*x = ConversionAdjustmentUploadErrorEnum{}
	mi := &file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConversionAdjustmentUploadErrorEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversionAdjustmentUploadErrorEnum) ProtoMessage() {}

func (x *ConversionAdjustmentUploadErrorEnum) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversionAdjustmentUploadErrorEnum.ProtoReflect.Descriptor instead.
func (*ConversionAdjustmentUploadErrorEnum) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_rawDescGZIP(), []int{0}
}

var File_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto protoreflect.FileDescriptor

const file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_rawDesc = "" +
	"\n" +
	"Hgoogle/ads/googleads/v20/errors/conversion_adjustment_upload_error.proto\x12\x1fgoogle.ads.googleads.v20.errors\"\xf0\a\n" +
	"#ConversionAdjustmentUploadErrorEnum\"\xc8\a\n" +
	"\x1fConversionAdjustmentUploadError\x12\x0f\n" +
	"\vUNSPECIFIED\x10\x00\x12\v\n" +
	"\aUNKNOWN\x10\x01\x12 \n" +
	"\x1cTOO_RECENT_CONVERSION_ACTION\x10\x02\x12 \n" +
	"\x1cCONVERSION_ALREADY_RETRACTED\x10\x04\x12\x18\n" +
	"\x14CONVERSION_NOT_FOUND\x10\x05\x12\x16\n" +
	"\x12CONVERSION_EXPIRED\x10\x06\x12\"\n" +
	"\x1eADJUSTMENT_PRECEDES_CONVERSION\x10\a\x12!\n" +
	"\x1dMORE_RECENT_RESTATEMENT_FOUND\x10\b\x12\x19\n" +
	"\x15TOO_RECENT_CONVERSION\x10\t\x12N\n" +
	"JCANNOT_RESTATE_CONVERSION_ACTION_THAT_ALWAYS_USES_DEFAULT_CONVERSION_VALUE\x10\n" +
	"\x12#\n" +
	"\x1fTOO_MANY_ADJUSTMENTS_IN_REQUEST\x10\v\x12\x18\n" +
	"\x14TOO_MANY_ADJUSTMENTS\x10\f\x12\x1e\n" +
	"\x1aRESTATEMENT_ALREADY_EXISTS\x10\r\x12#\n" +
	"\x1fDUPLICATE_ADJUSTMENT_IN_REQUEST\x10\x0e\x12-\n" +
	")CUSTOMER_NOT_ACCEPTED_CUSTOMER_DATA_TERMS\x10\x0f\x122\n" +
	".CONVERSION_ACTION_NOT_ELIGIBLE_FOR_ENHANCEMENT\x10\x10\x12\x1b\n" +
	"\x17INVALID_USER_IDENTIFIER\x10\x11\x12\x1f\n" +
	"\x1bUNSUPPORTED_USER_IDENTIFIER\x10\x12\x12.\n" +
	"*GCLID_DATE_TIME_PAIR_AND_ORDER_ID_BOTH_SET\x10\x14\x12\x1f\n" +
	"\x1bCONVERSION_ALREADY_ENHANCED\x10\x15\x12$\n" +
	" DUPLICATE_ENHANCEMENT_IN_REQUEST\x10\x16\x12.\n" +
	"*CUSTOMER_DATA_POLICY_PROHIBITS_ENHANCEMENT\x10\x17\x12 \n" +
	"\x1cMISSING_ORDER_ID_FOR_WEBPAGE\x10\x18\x12\x19\n" +
	"\x15ORDER_ID_CONTAINS_PII\x10\x19\x12\x12\n" +
	"\x0eINVALID_JOB_ID\x10\x1a\x12\x1e\n" +
	"\x1aNO_CONVERSION_ACTION_FOUND\x10\x1b\x12\"\n" +
	"\x1eINVALID_CONVERSION_ACTION_TYPE\x10\x1cB\x84\x02\n" +
	"#com.google.ads.googleads.v20.errorsB$ConversionAdjustmentUploadErrorProtoP\x01ZEgoogle.golang.org/genproto/googleapis/ads/googleads/v20/errors;errors\xa2\x02\x03GAA\xaa\x02\x1fGoogle.Ads.GoogleAds.V20.Errors\xca\x02\x1fGoogle\\Ads\\GoogleAds\\V20\\Errors\xea\x02#Google::Ads::GoogleAds::V20::Errorsb\x06proto3"

var (
	file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_rawDescOnce sync.Once
	file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_rawDescData []byte
)

func file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_rawDescGZIP() []byte {
	file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_rawDescOnce.Do(func() {
		file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_rawDesc), len(file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_rawDesc)))
	})
	return file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_rawDescData
}

var file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_goTypes = []any{
	(ConversionAdjustmentUploadErrorEnum_ConversionAdjustmentUploadError)(0), // 0: google.ads.googleads.v20.errors.ConversionAdjustmentUploadErrorEnum.ConversionAdjustmentUploadError
	(*ConversionAdjustmentUploadErrorEnum)(nil),                              // 1: google.ads.googleads.v20.errors.ConversionAdjustmentUploadErrorEnum
}
var file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_init() }
func file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_init() {
	if File_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_rawDesc), len(file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_goTypes,
		DependencyIndexes: file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_depIdxs,
		EnumInfos:         file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_enumTypes,
		MessageInfos:      file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_msgTypes,
	}.Build()
	File_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto = out.File
	file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_goTypes = nil
	file_google_ads_googleads_v20_errors_conversion_adjustment_upload_error_proto_depIdxs = nil
}
