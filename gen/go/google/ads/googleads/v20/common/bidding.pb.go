// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: google/ads/googleads/v20/common/bidding.proto

package common

import (
	enums "google.golang.org/genproto/googleapis/ads/googleads/v20/enums"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Commission is an automatic bidding strategy in which the advertiser pays a
// certain portion of the conversion value.
type Commission struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Commission rate defines the portion of the conversion value that the
	// advertiser will be billed. A commission rate of x should be passed into
	// this field as (x * 1,000,000). For example, 106,000 represents a commission
	// rate of 0.106 (10.6%).
	CommissionRateMicros *int64 `protobuf:"varint,2,opt,name=commission_rate_micros,json=commissionRateMicros,proto3,oneof" json:"commission_rate_micros,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Commission) Reset() {
	*x = Commission{}
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Commission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commission) ProtoMessage() {}

func (x *Commission) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commission.ProtoReflect.Descriptor instead.
func (*Commission) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_bidding_proto_rawDescGZIP(), []int{0}
}

func (x *Commission) GetCommissionRateMicros() int64 {
	if x != nil && x.CommissionRateMicros != nil {
		return *x.CommissionRateMicros
	}
	return 0
}

// An automated bidding strategy that raises bids for clicks
// that seem more likely to lead to a conversion and lowers
// them for clicks where they seem less likely.
//
// This bidding strategy is deprecated and cannot be created anymore. Use
// ManualCpc with enhanced_cpc_enabled set to true for equivalent functionality.
type EnhancedCpc struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnhancedCpc) Reset() {
	*x = EnhancedCpc{}
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnhancedCpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnhancedCpc) ProtoMessage() {}

func (x *EnhancedCpc) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnhancedCpc.ProtoReflect.Descriptor instead.
func (*EnhancedCpc) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_bidding_proto_rawDescGZIP(), []int{1}
}

// Manual bidding strategy that allows advertiser to set the bid per
// advertiser-specified action.
type ManualCpa struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ManualCpa) Reset() {
	*x = ManualCpa{}
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManualCpa) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualCpa) ProtoMessage() {}

func (x *ManualCpa) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualCpa.ProtoReflect.Descriptor instead.
func (*ManualCpa) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_bidding_proto_rawDescGZIP(), []int{2}
}

// Manual click-based bidding where user pays per click.
type ManualCpc struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether bids are to be enhanced based on conversion optimizer data.
	EnhancedCpcEnabled *bool `protobuf:"varint,2,opt,name=enhanced_cpc_enabled,json=enhancedCpcEnabled,proto3,oneof" json:"enhanced_cpc_enabled,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ManualCpc) Reset() {
	*x = ManualCpc{}
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManualCpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualCpc) ProtoMessage() {}

func (x *ManualCpc) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualCpc.ProtoReflect.Descriptor instead.
func (*ManualCpc) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_bidding_proto_rawDescGZIP(), []int{3}
}

func (x *ManualCpc) GetEnhancedCpcEnabled() bool {
	if x != nil && x.EnhancedCpcEnabled != nil {
		return *x.EnhancedCpcEnabled
	}
	return false
}

// Manual impression-based bidding where user pays per thousand impressions.
type ManualCpm struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ManualCpm) Reset() {
	*x = ManualCpm{}
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManualCpm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualCpm) ProtoMessage() {}

func (x *ManualCpm) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualCpm.ProtoReflect.Descriptor instead.
func (*ManualCpm) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_bidding_proto_rawDescGZIP(), []int{4}
}

// View based bidding where user pays per video view.
type ManualCpv struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ManualCpv) Reset() {
	*x = ManualCpv{}
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ManualCpv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualCpv) ProtoMessage() {}

func (x *ManualCpv) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualCpv.ProtoReflect.Descriptor instead.
func (*ManualCpv) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_bidding_proto_rawDescGZIP(), []int{5}
}

// An automated bidding strategy to help get the most conversions for your
// campaigns while spending your budget.
type MaximizeConversions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Maximum bid limit that can be set by the bid strategy.
	// The limit applies to all keywords managed by the strategy.
	// Mutable for portfolio bidding strategies only.
	CpcBidCeilingMicros int64 `protobuf:"varint,2,opt,name=cpc_bid_ceiling_micros,json=cpcBidCeilingMicros,proto3" json:"cpc_bid_ceiling_micros,omitempty"`
	// Minimum bid limit that can be set by the bid strategy.
	// The limit applies to all keywords managed by the strategy.
	// Mutable for portfolio bidding strategies only.
	CpcBidFloorMicros int64 `protobuf:"varint,3,opt,name=cpc_bid_floor_micros,json=cpcBidFloorMicros,proto3" json:"cpc_bid_floor_micros,omitempty"`
	// The target cost-per-action (CPA) option. This is the average amount that
	// you would like to spend per conversion action specified in micro units of
	// the bidding strategy's currency. If set, the bid strategy will get as many
	// conversions as possible at or below the target cost-per-action. If the
	// target CPA is not set, the bid strategy will aim to achieve the lowest
	// possible CPA given the budget.
	TargetCpaMicros int64 `protobuf:"varint,4,opt,name=target_cpa_micros,json=targetCpaMicros,proto3" json:"target_cpa_micros,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MaximizeConversions) Reset() {
	*x = MaximizeConversions{}
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaximizeConversions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaximizeConversions) ProtoMessage() {}

func (x *MaximizeConversions) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaximizeConversions.ProtoReflect.Descriptor instead.
func (*MaximizeConversions) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_bidding_proto_rawDescGZIP(), []int{6}
}

func (x *MaximizeConversions) GetCpcBidCeilingMicros() int64 {
	if x != nil {
		return x.CpcBidCeilingMicros
	}
	return 0
}

func (x *MaximizeConversions) GetCpcBidFloorMicros() int64 {
	if x != nil {
		return x.CpcBidFloorMicros
	}
	return 0
}

func (x *MaximizeConversions) GetTargetCpaMicros() int64 {
	if x != nil {
		return x.TargetCpaMicros
	}
	return 0
}

// An automated bidding strategy to help get the most conversion value for your
// campaigns while spending your budget.
type MaximizeConversionValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The target return on ad spend (ROAS) option. If set, the bid strategy will
	// maximize revenue while averaging the target return on ad spend. If the
	// target ROAS is high, the bid strategy may not be able to spend the full
	// budget. If the target ROAS is not set, the bid strategy will aim to
	// achieve the highest possible ROAS for the budget.
	TargetRoas float64 `protobuf:"fixed64,2,opt,name=target_roas,json=targetRoas,proto3" json:"target_roas,omitempty"`
	// Maximum bid limit that can be set by the bid strategy.
	// The limit applies to all keywords managed by the strategy.
	// Mutable for portfolio bidding strategies only.
	CpcBidCeilingMicros int64 `protobuf:"varint,3,opt,name=cpc_bid_ceiling_micros,json=cpcBidCeilingMicros,proto3" json:"cpc_bid_ceiling_micros,omitempty"`
	// Minimum bid limit that can be set by the bid strategy.
	// The limit applies to all keywords managed by the strategy.
	// Mutable for portfolio bidding strategies only.
	CpcBidFloorMicros int64 `protobuf:"varint,4,opt,name=cpc_bid_floor_micros,json=cpcBidFloorMicros,proto3" json:"cpc_bid_floor_micros,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MaximizeConversionValue) Reset() {
	*x = MaximizeConversionValue{}
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaximizeConversionValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaximizeConversionValue) ProtoMessage() {}

func (x *MaximizeConversionValue) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaximizeConversionValue.ProtoReflect.Descriptor instead.
func (*MaximizeConversionValue) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_bidding_proto_rawDescGZIP(), []int{7}
}

func (x *MaximizeConversionValue) GetTargetRoas() float64 {
	if x != nil {
		return x.TargetRoas
	}
	return 0
}

func (x *MaximizeConversionValue) GetCpcBidCeilingMicros() int64 {
	if x != nil {
		return x.CpcBidCeilingMicros
	}
	return 0
}

func (x *MaximizeConversionValue) GetCpcBidFloorMicros() int64 {
	if x != nil {
		return x.CpcBidFloorMicros
	}
	return 0
}

// An automated bid strategy that sets bids to help get as many conversions as
// possible at the target cost-per-acquisition (CPA) you set.
type TargetCpa struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Average CPA target.
	// This target should be greater than or equal to minimum billable unit based
	// on the currency for the account.
	TargetCpaMicros *int64 `protobuf:"varint,4,opt,name=target_cpa_micros,json=targetCpaMicros,proto3,oneof" json:"target_cpa_micros,omitempty"`
	// Maximum bid limit that can be set by the bid strategy.
	// The limit applies to all keywords managed by the strategy.
	// This should only be set for portfolio bid strategies.
	CpcBidCeilingMicros *int64 `protobuf:"varint,5,opt,name=cpc_bid_ceiling_micros,json=cpcBidCeilingMicros,proto3,oneof" json:"cpc_bid_ceiling_micros,omitempty"`
	// Minimum bid limit that can be set by the bid strategy.
	// The limit applies to all keywords managed by the strategy.
	// This should only be set for portfolio bid strategies.
	CpcBidFloorMicros *int64 `protobuf:"varint,6,opt,name=cpc_bid_floor_micros,json=cpcBidFloorMicros,proto3,oneof" json:"cpc_bid_floor_micros,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TargetCpa) Reset() {
	*x = TargetCpa{}
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TargetCpa) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetCpa) ProtoMessage() {}

func (x *TargetCpa) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetCpa.ProtoReflect.Descriptor instead.
func (*TargetCpa) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_bidding_proto_rawDescGZIP(), []int{8}
}

func (x *TargetCpa) GetTargetCpaMicros() int64 {
	if x != nil && x.TargetCpaMicros != nil {
		return *x.TargetCpaMicros
	}
	return 0
}

func (x *TargetCpa) GetCpcBidCeilingMicros() int64 {
	if x != nil && x.CpcBidCeilingMicros != nil {
		return *x.CpcBidCeilingMicros
	}
	return 0
}

func (x *TargetCpa) GetCpcBidFloorMicros() int64 {
	if x != nil && x.CpcBidFloorMicros != nil {
		return *x.CpcBidFloorMicros
	}
	return 0
}

// Target CPM (cost per thousand impressions) is an automated bidding strategy
// that sets bids to optimize performance given the target CPM you set.
type TargetCpm struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Additional information related to bidding goal.
	//
	// Types that are valid to be assigned to Goal:
	//
	//	*TargetCpm_TargetFrequencyGoal
	Goal          isTargetCpm_Goal `protobuf_oneof:"goal"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TargetCpm) Reset() {
	*x = TargetCpm{}
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TargetCpm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetCpm) ProtoMessage() {}

func (x *TargetCpm) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetCpm.ProtoReflect.Descriptor instead.
func (*TargetCpm) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_bidding_proto_rawDescGZIP(), []int{9}
}

func (x *TargetCpm) GetGoal() isTargetCpm_Goal {
	if x != nil {
		return x.Goal
	}
	return nil
}

func (x *TargetCpm) GetTargetFrequencyGoal() *TargetCpmTargetFrequencyGoal {
	if x != nil {
		if x, ok := x.Goal.(*TargetCpm_TargetFrequencyGoal); ok {
			return x.TargetFrequencyGoal
		}
	}
	return nil
}

type isTargetCpm_Goal interface {
	isTargetCpm_Goal()
}

type TargetCpm_TargetFrequencyGoal struct {
	// Target Frequency bidding goal details.
	TargetFrequencyGoal *TargetCpmTargetFrequencyGoal `protobuf:"bytes,1,opt,name=target_frequency_goal,json=targetFrequencyGoal,proto3,oneof"`
}

func (*TargetCpm_TargetFrequencyGoal) isTargetCpm_Goal() {}

// Target Frequency bidding goal details.
type TargetCpmTargetFrequencyGoal struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Target Frequency count representing how many times you want to reach
	// a single user.
	TargetCount int64 `protobuf:"varint,1,opt,name=target_count,json=targetCount,proto3" json:"target_count,omitempty"`
	// Time window expressing the period over which you want to reach
	// the specified target_count.
	TimeUnit      enums.TargetFrequencyTimeUnitEnum_TargetFrequencyTimeUnit `protobuf:"varint,2,opt,name=time_unit,json=timeUnit,proto3,enum=google.ads.googleads.v20.enums.TargetFrequencyTimeUnitEnum_TargetFrequencyTimeUnit" json:"time_unit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TargetCpmTargetFrequencyGoal) Reset() {
	*x = TargetCpmTargetFrequencyGoal{}
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TargetCpmTargetFrequencyGoal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetCpmTargetFrequencyGoal) ProtoMessage() {}

func (x *TargetCpmTargetFrequencyGoal) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetCpmTargetFrequencyGoal.ProtoReflect.Descriptor instead.
func (*TargetCpmTargetFrequencyGoal) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_bidding_proto_rawDescGZIP(), []int{10}
}

func (x *TargetCpmTargetFrequencyGoal) GetTargetCount() int64 {
	if x != nil {
		return x.TargetCount
	}
	return 0
}

func (x *TargetCpmTargetFrequencyGoal) GetTimeUnit() enums.TargetFrequencyTimeUnitEnum_TargetFrequencyTimeUnit {
	if x != nil {
		return x.TimeUnit
	}
	return enums.TargetFrequencyTimeUnitEnum_TargetFrequencyTimeUnit(0)
}

// An automated bidding strategy that sets bids so that a certain percentage of
// search ads are shown at the top of the first page (or other targeted
// location).
type TargetImpressionShare struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The targeted location on the search results page.
	Location enums.TargetImpressionShareLocationEnum_TargetImpressionShareLocation `protobuf:"varint,1,opt,name=location,proto3,enum=google.ads.googleads.v20.enums.TargetImpressionShareLocationEnum_TargetImpressionShareLocation" json:"location,omitempty"`
	// The chosen fraction of ads to be shown in the targeted location in micros.
	// For example, 1% equals 10,000.
	LocationFractionMicros *int64 `protobuf:"varint,4,opt,name=location_fraction_micros,json=locationFractionMicros,proto3,oneof" json:"location_fraction_micros,omitempty"`
	// The highest CPC bid the automated bidding system is permitted to specify.
	// This is a required field entered by the advertiser that sets the ceiling
	// and specified in local micros.
	CpcBidCeilingMicros *int64 `protobuf:"varint,5,opt,name=cpc_bid_ceiling_micros,json=cpcBidCeilingMicros,proto3,oneof" json:"cpc_bid_ceiling_micros,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TargetImpressionShare) Reset() {
	*x = TargetImpressionShare{}
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TargetImpressionShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetImpressionShare) ProtoMessage() {}

func (x *TargetImpressionShare) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetImpressionShare.ProtoReflect.Descriptor instead.
func (*TargetImpressionShare) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_bidding_proto_rawDescGZIP(), []int{11}
}

func (x *TargetImpressionShare) GetLocation() enums.TargetImpressionShareLocationEnum_TargetImpressionShareLocation {
	if x != nil {
		return x.Location
	}
	return enums.TargetImpressionShareLocationEnum_TargetImpressionShareLocation(0)
}

func (x *TargetImpressionShare) GetLocationFractionMicros() int64 {
	if x != nil && x.LocationFractionMicros != nil {
		return *x.LocationFractionMicros
	}
	return 0
}

func (x *TargetImpressionShare) GetCpcBidCeilingMicros() int64 {
	if x != nil && x.CpcBidCeilingMicros != nil {
		return *x.CpcBidCeilingMicros
	}
	return 0
}

// An automated bidding strategy that helps you maximize revenue while
// averaging a specific target return on ad spend (ROAS).
type TargetRoas struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. The chosen revenue (based on conversion data) per unit of spend.
	// Value must be between 0.01 and 1000.0, inclusive.
	TargetRoas *float64 `protobuf:"fixed64,4,opt,name=target_roas,json=targetRoas,proto3,oneof" json:"target_roas,omitempty"`
	// Maximum bid limit that can be set by the bid strategy.
	// The limit applies to all keywords managed by the strategy.
	// This should only be set for portfolio bid strategies.
	CpcBidCeilingMicros *int64 `protobuf:"varint,5,opt,name=cpc_bid_ceiling_micros,json=cpcBidCeilingMicros,proto3,oneof" json:"cpc_bid_ceiling_micros,omitempty"`
	// Minimum bid limit that can be set by the bid strategy.
	// The limit applies to all keywords managed by the strategy.
	// This should only be set for portfolio bid strategies.
	CpcBidFloorMicros *int64 `protobuf:"varint,6,opt,name=cpc_bid_floor_micros,json=cpcBidFloorMicros,proto3,oneof" json:"cpc_bid_floor_micros,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TargetRoas) Reset() {
	*x = TargetRoas{}
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TargetRoas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetRoas) ProtoMessage() {}

func (x *TargetRoas) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetRoas.ProtoReflect.Descriptor instead.
func (*TargetRoas) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_bidding_proto_rawDescGZIP(), []int{12}
}

func (x *TargetRoas) GetTargetRoas() float64 {
	if x != nil && x.TargetRoas != nil {
		return *x.TargetRoas
	}
	return 0
}

func (x *TargetRoas) GetCpcBidCeilingMicros() int64 {
	if x != nil && x.CpcBidCeilingMicros != nil {
		return *x.CpcBidCeilingMicros
	}
	return 0
}

func (x *TargetRoas) GetCpcBidFloorMicros() int64 {
	if x != nil && x.CpcBidFloorMicros != nil {
		return *x.CpcBidFloorMicros
	}
	return 0
}

// An automated bid strategy that sets your bids to help get as many clicks
// as possible within your budget.
type TargetSpend struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: The spend target under which to maximize clicks.
	// A TargetSpend bidder will attempt to spend the smaller of this value
	// or the natural throttling spend amount.
	// If not specified, the budget is used as the spend target.
	// This field is deprecated and should no longer be used. See
	// https://ads-developers.googleblog.com/2020/05/reminder-about-sunset-creation-of.html
	// for details.
	//
	// Deprecated: Marked as deprecated in google/ads/googleads/v20/common/bidding.proto.
	TargetSpendMicros *int64 `protobuf:"varint,3,opt,name=target_spend_micros,json=targetSpendMicros,proto3,oneof" json:"target_spend_micros,omitempty"`
	// Maximum bid limit that can be set by the bid strategy.
	// The limit applies to all keywords managed by the strategy.
	CpcBidCeilingMicros *int64 `protobuf:"varint,4,opt,name=cpc_bid_ceiling_micros,json=cpcBidCeilingMicros,proto3,oneof" json:"cpc_bid_ceiling_micros,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TargetSpend) Reset() {
	*x = TargetSpend{}
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TargetSpend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetSpend) ProtoMessage() {}

func (x *TargetSpend) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetSpend.ProtoReflect.Descriptor instead.
func (*TargetSpend) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_bidding_proto_rawDescGZIP(), []int{13}
}

// Deprecated: Marked as deprecated in google/ads/googleads/v20/common/bidding.proto.
func (x *TargetSpend) GetTargetSpendMicros() int64 {
	if x != nil && x.TargetSpendMicros != nil {
		return *x.TargetSpendMicros
	}
	return 0
}

func (x *TargetSpend) GetCpcBidCeilingMicros() int64 {
	if x != nil && x.CpcBidCeilingMicros != nil {
		return *x.CpcBidCeilingMicros
	}
	return 0
}

// A bidding strategy where bids are a fraction of the advertised price for
// some good or service.
type PercentCpc struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Maximum bid limit that can be set by the bid strategy. This is
	// an optional field entered by the advertiser and specified in local micros.
	// Note: A zero value is interpreted in the same way as having bid_ceiling
	// undefined.
	CpcBidCeilingMicros *int64 `protobuf:"varint,3,opt,name=cpc_bid_ceiling_micros,json=cpcBidCeilingMicros,proto3,oneof" json:"cpc_bid_ceiling_micros,omitempty"`
	// Adjusts the bid for each auction upward or downward, depending on the
	// likelihood of a conversion. Individual bids may exceed
	// cpc_bid_ceiling_micros, but the average bid amount for a campaign should
	// not.
	EnhancedCpcEnabled *bool `protobuf:"varint,4,opt,name=enhanced_cpc_enabled,json=enhancedCpcEnabled,proto3,oneof" json:"enhanced_cpc_enabled,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PercentCpc) Reset() {
	*x = PercentCpc{}
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PercentCpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PercentCpc) ProtoMessage() {}

func (x *PercentCpc) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PercentCpc.ProtoReflect.Descriptor instead.
func (*PercentCpc) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_bidding_proto_rawDescGZIP(), []int{14}
}

func (x *PercentCpc) GetCpcBidCeilingMicros() int64 {
	if x != nil && x.CpcBidCeilingMicros != nil {
		return *x.CpcBidCeilingMicros
	}
	return 0
}

func (x *PercentCpc) GetEnhancedCpcEnabled() bool {
	if x != nil && x.EnhancedCpcEnabled != nil {
		return *x.EnhancedCpcEnabled
	}
	return false
}

// Fixed CPM (cost per thousand impression) bidding strategy. A manual bidding
// strategy with a fixed CPM.
type FixedCpm struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fixed CPM bidding goal. Determines the exact bidding optimization
	// parameters.
	Goal enums.FixedCpmGoalEnum_FixedCpmGoal `protobuf:"varint,1,opt,name=goal,proto3,enum=google.ads.googleads.v20.enums.FixedCpmGoalEnum_FixedCpmGoal" json:"goal,omitempty"`
	// Additional information related to bidding goal.
	//
	// Types that are valid to be assigned to GoalInfo:
	//
	//	*FixedCpm_TargetFrequencyInfo
	GoalInfo      isFixedCpm_GoalInfo `protobuf_oneof:"goal_info"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FixedCpm) Reset() {
	*x = FixedCpm{}
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FixedCpm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedCpm) ProtoMessage() {}

func (x *FixedCpm) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedCpm.ProtoReflect.Descriptor instead.
func (*FixedCpm) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_bidding_proto_rawDescGZIP(), []int{15}
}

func (x *FixedCpm) GetGoal() enums.FixedCpmGoalEnum_FixedCpmGoal {
	if x != nil {
		return x.Goal
	}
	return enums.FixedCpmGoalEnum_FixedCpmGoal(0)
}

func (x *FixedCpm) GetGoalInfo() isFixedCpm_GoalInfo {
	if x != nil {
		return x.GoalInfo
	}
	return nil
}

func (x *FixedCpm) GetTargetFrequencyInfo() *FixedCpmTargetFrequencyGoalInfo {
	if x != nil {
		if x, ok := x.GoalInfo.(*FixedCpm_TargetFrequencyInfo); ok {
			return x.TargetFrequencyInfo
		}
	}
	return nil
}

type isFixedCpm_GoalInfo interface {
	isFixedCpm_GoalInfo()
}

type FixedCpm_TargetFrequencyInfo struct {
	// Target frequency bidding goal details.
	TargetFrequencyInfo *FixedCpmTargetFrequencyGoalInfo `protobuf:"bytes,2,opt,name=target_frequency_info,json=targetFrequencyInfo,proto3,oneof"`
}

func (*FixedCpm_TargetFrequencyInfo) isFixedCpm_GoalInfo() {}

// Target frequency bidding goal details for Fixed CPM bidding strategy. Only
// relevant if the goal of the bidding strategy is `TARGET_FREQUENCY`.
type FixedCpmTargetFrequencyGoalInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Target frequency count represents the number of times an advertiser wants
	// to show the ad to target a single user.
	TargetCount int64 `protobuf:"varint,1,opt,name=target_count,json=targetCount,proto3" json:"target_count,omitempty"`
	// Time window expressing the period over which you want to reach
	// the specified target_count.
	TimeUnit      enums.FixedCpmTargetFrequencyTimeUnitEnum_FixedCpmTargetFrequencyTimeUnit `protobuf:"varint,2,opt,name=time_unit,json=timeUnit,proto3,enum=google.ads.googleads.v20.enums.FixedCpmTargetFrequencyTimeUnitEnum_FixedCpmTargetFrequencyTimeUnit" json:"time_unit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FixedCpmTargetFrequencyGoalInfo) Reset() {
	*x = FixedCpmTargetFrequencyGoalInfo{}
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FixedCpmTargetFrequencyGoalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedCpmTargetFrequencyGoalInfo) ProtoMessage() {}

func (x *FixedCpmTargetFrequencyGoalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixedCpmTargetFrequencyGoalInfo.ProtoReflect.Descriptor instead.
func (*FixedCpmTargetFrequencyGoalInfo) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_bidding_proto_rawDescGZIP(), []int{16}
}

func (x *FixedCpmTargetFrequencyGoalInfo) GetTargetCount() int64 {
	if x != nil {
		return x.TargetCount
	}
	return 0
}

func (x *FixedCpmTargetFrequencyGoalInfo) GetTimeUnit() enums.FixedCpmTargetFrequencyTimeUnitEnum_FixedCpmTargetFrequencyTimeUnit {
	if x != nil {
		return x.TimeUnit
	}
	return enums.FixedCpmTargetFrequencyTimeUnitEnum_FixedCpmTargetFrequencyTimeUnit(0)
}

// Target CPV (cost per view) bidding strategy. An automated bidding strategy
// that sets bids to optimize performance given the target CPV you set.
type TargetCpv struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TargetCpv) Reset() {
	*x = TargetCpv{}
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TargetCpv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetCpv) ProtoMessage() {}

func (x *TargetCpv) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_bidding_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetCpv.ProtoReflect.Descriptor instead.
func (*TargetCpv) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_bidding_proto_rawDescGZIP(), []int{17}
}

var File_google_ads_googleads_v20_common_bidding_proto protoreflect.FileDescriptor

const file_google_ads_googleads_v20_common_bidding_proto_rawDesc = "" +
	"\n" +
	"-google/ads/googleads/v20/common/bidding.proto\x12\x1fgoogle.ads.googleads.v20.common\x1a3google/ads/googleads/v20/enums/fixed_cpm_goal.proto\x1aIgoogle/ads/googleads/v20/enums/fixed_cpm_target_frequency_time_unit.proto\x1a?google/ads/googleads/v20/enums/target_frequency_time_unit.proto\x1aEgoogle/ads/googleads/v20/enums/target_impression_share_location.proto\"b\n" +
	"\n" +
	"Commission\x129\n" +
	"\x16commission_rate_micros\x18\x02 \x01(\x03H\x00R\x14commissionRateMicros\x88\x01\x01B\x19\n" +
	"\x17_commission_rate_micros\"\r\n" +
	"\vEnhancedCpc\"\v\n" +
	"\tManualCpa\"[\n" +
	"\tManualCpc\x125\n" +
	"\x14enhanced_cpc_enabled\x18\x02 \x01(\bH\x00R\x12enhancedCpcEnabled\x88\x01\x01B\x17\n" +
	"\x15_enhanced_cpc_enabled\"\v\n" +
	"\tManualCpm\"\v\n" +
	"\tManualCpv\"\xa7\x01\n" +
	"\x13MaximizeConversions\x123\n" +
	"\x16cpc_bid_ceiling_micros\x18\x02 \x01(\x03R\x13cpcBidCeilingMicros\x12/\n" +
	"\x14cpc_bid_floor_micros\x18\x03 \x01(\x03R\x11cpcBidFloorMicros\x12*\n" +
	"\x11target_cpa_micros\x18\x04 \x01(\x03R\x0ftargetCpaMicros\"\xa0\x01\n" +
	"\x17MaximizeConversionValue\x12\x1f\n" +
	"\vtarget_roas\x18\x02 \x01(\x01R\n" +
	"targetRoas\x123\n" +
	"\x16cpc_bid_ceiling_micros\x18\x03 \x01(\x03R\x13cpcBidCeilingMicros\x12/\n" +
	"\x14cpc_bid_floor_micros\x18\x04 \x01(\x03R\x11cpcBidFloorMicros\"\xf6\x01\n" +
	"\tTargetCpa\x12/\n" +
	"\x11target_cpa_micros\x18\x04 \x01(\x03H\x00R\x0ftargetCpaMicros\x88\x01\x01\x128\n" +
	"\x16cpc_bid_ceiling_micros\x18\x05 \x01(\x03H\x01R\x13cpcBidCeilingMicros\x88\x01\x01\x124\n" +
	"\x14cpc_bid_floor_micros\x18\x06 \x01(\x03H\x02R\x11cpcBidFloorMicros\x88\x01\x01B\x14\n" +
	"\x12_target_cpa_microsB\x19\n" +
	"\x17_cpc_bid_ceiling_microsB\x17\n" +
	"\x15_cpc_bid_floor_micros\"\x88\x01\n" +
	"\tTargetCpm\x12s\n" +
	"\x15target_frequency_goal\x18\x01 \x01(\v2=.google.ads.googleads.v20.common.TargetCpmTargetFrequencyGoalH\x00R\x13targetFrequencyGoalB\x06\n" +
	"\x04goal\"\xb3\x01\n" +
	"\x1cTargetCpmTargetFrequencyGoal\x12!\n" +
	"\ftarget_count\x18\x01 \x01(\x03R\vtargetCount\x12p\n" +
	"\ttime_unit\x18\x02 \x01(\x0e2S.google.ads.googleads.v20.enums.TargetFrequencyTimeUnitEnum.TargetFrequencyTimeUnitR\btimeUnit\"\xc5\x02\n" +
	"\x15TargetImpressionShare\x12{\n" +
	"\blocation\x18\x01 \x01(\x0e2_.google.ads.googleads.v20.enums.TargetImpressionShareLocationEnum.TargetImpressionShareLocationR\blocation\x12=\n" +
	"\x18location_fraction_micros\x18\x04 \x01(\x03H\x00R\x16locationFractionMicros\x88\x01\x01\x128\n" +
	"\x16cpc_bid_ceiling_micros\x18\x05 \x01(\x03H\x01R\x13cpcBidCeilingMicros\x88\x01\x01B\x1b\n" +
	"\x19_location_fraction_microsB\x19\n" +
	"\x17_cpc_bid_ceiling_micros\"\xe6\x01\n" +
	"\n" +
	"TargetRoas\x12$\n" +
	"\vtarget_roas\x18\x04 \x01(\x01H\x00R\n" +
	"targetRoas\x88\x01\x01\x128\n" +
	"\x16cpc_bid_ceiling_micros\x18\x05 \x01(\x03H\x01R\x13cpcBidCeilingMicros\x88\x01\x01\x124\n" +
	"\x14cpc_bid_floor_micros\x18\x06 \x01(\x03H\x02R\x11cpcBidFloorMicros\x88\x01\x01B\x0e\n" +
	"\f_target_roasB\x19\n" +
	"\x17_cpc_bid_ceiling_microsB\x17\n" +
	"\x15_cpc_bid_floor_micros\"\xb3\x01\n" +
	"\vTargetSpend\x127\n" +
	"\x13target_spend_micros\x18\x03 \x01(\x03B\x02\x18\x01H\x00R\x11targetSpendMicros\x88\x01\x01\x128\n" +
	"\x16cpc_bid_ceiling_micros\x18\x04 \x01(\x03H\x01R\x13cpcBidCeilingMicros\x88\x01\x01B\x16\n" +
	"\x14_target_spend_microsB\x19\n" +
	"\x17_cpc_bid_ceiling_micros\"\xb1\x01\n" +
	"\n" +
	"PercentCpc\x128\n" +
	"\x16cpc_bid_ceiling_micros\x18\x03 \x01(\x03H\x00R\x13cpcBidCeilingMicros\x88\x01\x01\x125\n" +
	"\x14enhanced_cpc_enabled\x18\x04 \x01(\bH\x01R\x12enhancedCpcEnabled\x88\x01\x01B\x19\n" +
	"\x17_cpc_bid_ceiling_microsB\x17\n" +
	"\x15_enhanced_cpc_enabled\"\xe2\x01\n" +
	"\bFixedCpm\x12Q\n" +
	"\x04goal\x18\x01 \x01(\x0e2=.google.ads.googleads.v20.enums.FixedCpmGoalEnum.FixedCpmGoalR\x04goal\x12v\n" +
	"\x15target_frequency_info\x18\x02 \x01(\v2@.google.ads.googleads.v20.common.FixedCpmTargetFrequencyGoalInfoH\x00R\x13targetFrequencyInfoB\v\n" +
	"\tgoal_info\"\xc7\x01\n" +
	"\x1fFixedCpmTargetFrequencyGoalInfo\x12!\n" +
	"\ftarget_count\x18\x01 \x01(\x03R\vtargetCount\x12\x80\x01\n" +
	"\ttime_unit\x18\x02 \x01(\x0e2c.google.ads.googleads.v20.enums.FixedCpmTargetFrequencyTimeUnitEnum.FixedCpmTargetFrequencyTimeUnitR\btimeUnit\"\v\n" +
	"\tTargetCpvB\xec\x01\n" +
	"#com.google.ads.googleads.v20.commonB\fBiddingProtoP\x01ZEgoogle.golang.org/genproto/googleapis/ads/googleads/v20/common;common\xa2\x02\x03GAA\xaa\x02\x1fGoogle.Ads.GoogleAds.V20.Common\xca\x02\x1fGoogle\\Ads\\GoogleAds\\V20\\Common\xea\x02#Google::Ads::GoogleAds::V20::Commonb\x06proto3"

var (
	file_google_ads_googleads_v20_common_bidding_proto_rawDescOnce sync.Once
	file_google_ads_googleads_v20_common_bidding_proto_rawDescData []byte
)

func file_google_ads_googleads_v20_common_bidding_proto_rawDescGZIP() []byte {
	file_google_ads_googleads_v20_common_bidding_proto_rawDescOnce.Do(func() {
		file_google_ads_googleads_v20_common_bidding_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_google_ads_googleads_v20_common_bidding_proto_rawDesc), len(file_google_ads_googleads_v20_common_bidding_proto_rawDesc)))
	})
	return file_google_ads_googleads_v20_common_bidding_proto_rawDescData
}

var file_google_ads_googleads_v20_common_bidding_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_google_ads_googleads_v20_common_bidding_proto_goTypes = []any{
	(*Commission)(nil),                      // 0: google.ads.googleads.v20.common.Commission
	(*EnhancedCpc)(nil),                     // 1: google.ads.googleads.v20.common.EnhancedCpc
	(*ManualCpa)(nil),                       // 2: google.ads.googleads.v20.common.ManualCpa
	(*ManualCpc)(nil),                       // 3: google.ads.googleads.v20.common.ManualCpc
	(*ManualCpm)(nil),                       // 4: google.ads.googleads.v20.common.ManualCpm
	(*ManualCpv)(nil),                       // 5: google.ads.googleads.v20.common.ManualCpv
	(*MaximizeConversions)(nil),             // 6: google.ads.googleads.v20.common.MaximizeConversions
	(*MaximizeConversionValue)(nil),         // 7: google.ads.googleads.v20.common.MaximizeConversionValue
	(*TargetCpa)(nil),                       // 8: google.ads.googleads.v20.common.TargetCpa
	(*TargetCpm)(nil),                       // 9: google.ads.googleads.v20.common.TargetCpm
	(*TargetCpmTargetFrequencyGoal)(nil),    // 10: google.ads.googleads.v20.common.TargetCpmTargetFrequencyGoal
	(*TargetImpressionShare)(nil),           // 11: google.ads.googleads.v20.common.TargetImpressionShare
	(*TargetRoas)(nil),                      // 12: google.ads.googleads.v20.common.TargetRoas
	(*TargetSpend)(nil),                     // 13: google.ads.googleads.v20.common.TargetSpend
	(*PercentCpc)(nil),                      // 14: google.ads.googleads.v20.common.PercentCpc
	(*FixedCpm)(nil),                        // 15: google.ads.googleads.v20.common.FixedCpm
	(*FixedCpmTargetFrequencyGoalInfo)(nil), // 16: google.ads.googleads.v20.common.FixedCpmTargetFrequencyGoalInfo
	(*TargetCpv)(nil),                       // 17: google.ads.googleads.v20.common.TargetCpv
	(enums.TargetFrequencyTimeUnitEnum_TargetFrequencyTimeUnit)(0),                 // 18: google.ads.googleads.v20.enums.TargetFrequencyTimeUnitEnum.TargetFrequencyTimeUnit
	(enums.TargetImpressionShareLocationEnum_TargetImpressionShareLocation)(0),     // 19: google.ads.googleads.v20.enums.TargetImpressionShareLocationEnum.TargetImpressionShareLocation
	(enums.FixedCpmGoalEnum_FixedCpmGoal)(0),                                       // 20: google.ads.googleads.v20.enums.FixedCpmGoalEnum.FixedCpmGoal
	(enums.FixedCpmTargetFrequencyTimeUnitEnum_FixedCpmTargetFrequencyTimeUnit)(0), // 21: google.ads.googleads.v20.enums.FixedCpmTargetFrequencyTimeUnitEnum.FixedCpmTargetFrequencyTimeUnit
}
var file_google_ads_googleads_v20_common_bidding_proto_depIdxs = []int32{
	10, // 0: google.ads.googleads.v20.common.TargetCpm.target_frequency_goal:type_name -> google.ads.googleads.v20.common.TargetCpmTargetFrequencyGoal
	18, // 1: google.ads.googleads.v20.common.TargetCpmTargetFrequencyGoal.time_unit:type_name -> google.ads.googleads.v20.enums.TargetFrequencyTimeUnitEnum.TargetFrequencyTimeUnit
	19, // 2: google.ads.googleads.v20.common.TargetImpressionShare.location:type_name -> google.ads.googleads.v20.enums.TargetImpressionShareLocationEnum.TargetImpressionShareLocation
	20, // 3: google.ads.googleads.v20.common.FixedCpm.goal:type_name -> google.ads.googleads.v20.enums.FixedCpmGoalEnum.FixedCpmGoal
	16, // 4: google.ads.googleads.v20.common.FixedCpm.target_frequency_info:type_name -> google.ads.googleads.v20.common.FixedCpmTargetFrequencyGoalInfo
	21, // 5: google.ads.googleads.v20.common.FixedCpmTargetFrequencyGoalInfo.time_unit:type_name -> google.ads.googleads.v20.enums.FixedCpmTargetFrequencyTimeUnitEnum.FixedCpmTargetFrequencyTimeUnit
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_google_ads_googleads_v20_common_bidding_proto_init() }
func file_google_ads_googleads_v20_common_bidding_proto_init() {
	if File_google_ads_googleads_v20_common_bidding_proto != nil {
		return
	}
	file_google_ads_googleads_v20_common_bidding_proto_msgTypes[0].OneofWrappers = []any{}
	file_google_ads_googleads_v20_common_bidding_proto_msgTypes[3].OneofWrappers = []any{}
	file_google_ads_googleads_v20_common_bidding_proto_msgTypes[8].OneofWrappers = []any{}
	file_google_ads_googleads_v20_common_bidding_proto_msgTypes[9].OneofWrappers = []any{
		(*TargetCpm_TargetFrequencyGoal)(nil),
	}
	file_google_ads_googleads_v20_common_bidding_proto_msgTypes[11].OneofWrappers = []any{}
	file_google_ads_googleads_v20_common_bidding_proto_msgTypes[12].OneofWrappers = []any{}
	file_google_ads_googleads_v20_common_bidding_proto_msgTypes[13].OneofWrappers = []any{}
	file_google_ads_googleads_v20_common_bidding_proto_msgTypes[14].OneofWrappers = []any{}
	file_google_ads_googleads_v20_common_bidding_proto_msgTypes[15].OneofWrappers = []any{
		(*FixedCpm_TargetFrequencyInfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_google_ads_googleads_v20_common_bidding_proto_rawDesc), len(file_google_ads_googleads_v20_common_bidding_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_ads_googleads_v20_common_bidding_proto_goTypes,
		DependencyIndexes: file_google_ads_googleads_v20_common_bidding_proto_depIdxs,
		MessageInfos:      file_google_ads_googleads_v20_common_bidding_proto_msgTypes,
	}.Build()
	File_google_ads_googleads_v20_common_bidding_proto = out.File
	file_google_ads_googleads_v20_common_bidding_proto_goTypes = nil
	file_google_ads_googleads_v20_common_bidding_proto_depIdxs = nil
}
