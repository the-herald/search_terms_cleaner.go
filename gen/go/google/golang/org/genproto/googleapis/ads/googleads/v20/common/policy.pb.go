// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: google/ads/googleads/v20/common/policy.proto

package common

import (
	enums "google.golang.org/genproto/googleapis/ads/googleads/v20/enums"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Key of the violation. The key is used for referring to a violation
// when filing an exemption request.
type PolicyViolationKey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique ID of the violated policy.
	PolicyName *string `protobuf:"bytes,3,opt,name=policy_name,json=policyName,proto3,oneof" json:"policy_name,omitempty"`
	// The text that violates the policy if specified.
	// Otherwise, refers to the policy in general
	// (for example, when requesting to be exempt from the whole policy).
	// If not specified for criterion exemptions, the whole policy is implied.
	// Must be specified for ad exemptions.
	ViolatingText *string `protobuf:"bytes,4,opt,name=violating_text,json=violatingText,proto3,oneof" json:"violating_text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolicyViolationKey) Reset() {
	*x = PolicyViolationKey{}
	mi := &file_google_ads_googleads_v20_common_policy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyViolationKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyViolationKey) ProtoMessage() {}

func (x *PolicyViolationKey) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_policy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyViolationKey.ProtoReflect.Descriptor instead.
func (*PolicyViolationKey) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_policy_proto_rawDescGZIP(), []int{0}
}

func (x *PolicyViolationKey) GetPolicyName() string {
	if x != nil && x.PolicyName != nil {
		return *x.PolicyName
	}
	return ""
}

func (x *PolicyViolationKey) GetViolatingText() string {
	if x != nil && x.ViolatingText != nil {
		return *x.ViolatingText
	}
	return ""
}

// Parameter for controlling how policy exemption is done.
type PolicyValidationParameter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of policy topics that should not cause a PolicyFindingError to
	// be reported. This field is currently only compatible with Enhanced Text Ad.
	// It corresponds to the PolicyTopicEntry.topic field.
	//
	// Resources violating these policies will be saved, but will not be eligible
	// to serve. They may begin serving at a later time due to a change in
	// policies, re-review of the resource, or a change in advertiser
	// certificates.
	IgnorablePolicyTopics []string `protobuf:"bytes,3,rep,name=ignorable_policy_topics,json=ignorablePolicyTopics,proto3" json:"ignorable_policy_topics,omitempty"`
	// The list of policy violation keys that should not cause a
	// PolicyViolationError to be reported. Not all policy violations are
	// exemptable, refer to the is_exemptible field in the returned
	// PolicyViolationError.
	//
	// Resources violating these polices will be saved, but will not be eligible
	// to serve. They may begin serving at a later time due to a change in
	// policies, re-review of the resource, or a change in advertiser
	// certificates.
	ExemptPolicyViolationKeys []*PolicyViolationKey `protobuf:"bytes,2,rep,name=exempt_policy_violation_keys,json=exemptPolicyViolationKeys,proto3" json:"exempt_policy_violation_keys,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *PolicyValidationParameter) Reset() {
	*x = PolicyValidationParameter{}
	mi := &file_google_ads_googleads_v20_common_policy_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyValidationParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyValidationParameter) ProtoMessage() {}

func (x *PolicyValidationParameter) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_policy_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyValidationParameter.ProtoReflect.Descriptor instead.
func (*PolicyValidationParameter) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_policy_proto_rawDescGZIP(), []int{1}
}

func (x *PolicyValidationParameter) GetIgnorablePolicyTopics() []string {
	if x != nil {
		return x.IgnorablePolicyTopics
	}
	return nil
}

func (x *PolicyValidationParameter) GetExemptPolicyViolationKeys() []*PolicyViolationKey {
	if x != nil {
		return x.ExemptPolicyViolationKeys
	}
	return nil
}

// Policy finding attached to a resource (for example, alcohol policy associated
// with a site that sells alcohol).
//
// Each PolicyTopicEntry has a topic that indicates the specific ads policy
// the entry is about and a type to indicate the effect that the entry will have
// on serving. It may optionally have one or more evidences that indicate the
// reason for the finding. It may also optionally have one or more constraints
// that provide details about how serving may be restricted.
type PolicyTopicEntry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Policy topic this finding refers to. For example, "ALCOHOL",
	// "TRADEMARKS_IN_AD_TEXT", or "DESTINATION_NOT_WORKING". The set of possible
	// policy topics is not fixed for a particular API version and may change
	// at any time.
	Topic *string `protobuf:"bytes,5,opt,name=topic,proto3,oneof" json:"topic,omitempty"`
	// Describes the negative or positive effect this policy will have on serving.
	Type enums.PolicyTopicEntryTypeEnum_PolicyTopicEntryType `protobuf:"varint,2,opt,name=type,proto3,enum=google.ads.googleads.v20.enums.PolicyTopicEntryTypeEnum_PolicyTopicEntryType" json:"type,omitempty"`
	// Additional information that explains policy finding
	// (for example, the brand name for a trademark finding).
	Evidences []*PolicyTopicEvidence `protobuf:"bytes,3,rep,name=evidences,proto3" json:"evidences,omitempty"`
	// Indicates how serving of this resource may be affected (for example, not
	// serving in a country).
	Constraints   []*PolicyTopicConstraint `protobuf:"bytes,4,rep,name=constraints,proto3" json:"constraints,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolicyTopicEntry) Reset() {
	*x = PolicyTopicEntry{}
	mi := &file_google_ads_googleads_v20_common_policy_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyTopicEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyTopicEntry) ProtoMessage() {}

func (x *PolicyTopicEntry) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_policy_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyTopicEntry.ProtoReflect.Descriptor instead.
func (*PolicyTopicEntry) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_policy_proto_rawDescGZIP(), []int{2}
}

func (x *PolicyTopicEntry) GetTopic() string {
	if x != nil && x.Topic != nil {
		return *x.Topic
	}
	return ""
}

func (x *PolicyTopicEntry) GetType() enums.PolicyTopicEntryTypeEnum_PolicyTopicEntryType {
	if x != nil {
		return x.Type
	}
	return enums.PolicyTopicEntryTypeEnum_PolicyTopicEntryType(0)
}

func (x *PolicyTopicEntry) GetEvidences() []*PolicyTopicEvidence {
	if x != nil {
		return x.Evidences
	}
	return nil
}

func (x *PolicyTopicEntry) GetConstraints() []*PolicyTopicConstraint {
	if x != nil {
		return x.Constraints
	}
	return nil
}

// Additional information that explains a policy finding.
type PolicyTopicEvidence struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specific evidence information depending on the evidence type.
	//
	// Types that are valid to be assigned to Value:
	//
	//	*PolicyTopicEvidence_WebsiteList_
	//	*PolicyTopicEvidence_TextList_
	//	*PolicyTopicEvidence_LanguageCode
	//	*PolicyTopicEvidence_DestinationTextList_
	//	*PolicyTopicEvidence_DestinationMismatch_
	//	*PolicyTopicEvidence_DestinationNotWorking_
	Value         isPolicyTopicEvidence_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolicyTopicEvidence) Reset() {
	*x = PolicyTopicEvidence{}
	mi := &file_google_ads_googleads_v20_common_policy_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyTopicEvidence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyTopicEvidence) ProtoMessage() {}

func (x *PolicyTopicEvidence) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_policy_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyTopicEvidence.ProtoReflect.Descriptor instead.
func (*PolicyTopicEvidence) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_policy_proto_rawDescGZIP(), []int{3}
}

func (x *PolicyTopicEvidence) GetValue() isPolicyTopicEvidence_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PolicyTopicEvidence) GetWebsiteList() *PolicyTopicEvidence_WebsiteList {
	if x != nil {
		if x, ok := x.Value.(*PolicyTopicEvidence_WebsiteList_); ok {
			return x.WebsiteList
		}
	}
	return nil
}

func (x *PolicyTopicEvidence) GetTextList() *PolicyTopicEvidence_TextList {
	if x != nil {
		if x, ok := x.Value.(*PolicyTopicEvidence_TextList_); ok {
			return x.TextList
		}
	}
	return nil
}

func (x *PolicyTopicEvidence) GetLanguageCode() string {
	if x != nil {
		if x, ok := x.Value.(*PolicyTopicEvidence_LanguageCode); ok {
			return x.LanguageCode
		}
	}
	return ""
}

func (x *PolicyTopicEvidence) GetDestinationTextList() *PolicyTopicEvidence_DestinationTextList {
	if x != nil {
		if x, ok := x.Value.(*PolicyTopicEvidence_DestinationTextList_); ok {
			return x.DestinationTextList
		}
	}
	return nil
}

func (x *PolicyTopicEvidence) GetDestinationMismatch() *PolicyTopicEvidence_DestinationMismatch {
	if x != nil {
		if x, ok := x.Value.(*PolicyTopicEvidence_DestinationMismatch_); ok {
			return x.DestinationMismatch
		}
	}
	return nil
}

func (x *PolicyTopicEvidence) GetDestinationNotWorking() *PolicyTopicEvidence_DestinationNotWorking {
	if x != nil {
		if x, ok := x.Value.(*PolicyTopicEvidence_DestinationNotWorking_); ok {
			return x.DestinationNotWorking
		}
	}
	return nil
}

type isPolicyTopicEvidence_Value interface {
	isPolicyTopicEvidence_Value()
}

type PolicyTopicEvidence_WebsiteList_ struct {
	// List of websites linked with this resource.
	WebsiteList *PolicyTopicEvidence_WebsiteList `protobuf:"bytes,3,opt,name=website_list,json=websiteList,proto3,oneof"`
}

type PolicyTopicEvidence_TextList_ struct {
	// List of evidence found in the text of a resource.
	TextList *PolicyTopicEvidence_TextList `protobuf:"bytes,4,opt,name=text_list,json=textList,proto3,oneof"`
}

type PolicyTopicEvidence_LanguageCode struct {
	// The language the resource was detected to be written in.
	// This is an IETF language tag such as "en-US".
	LanguageCode string `protobuf:"bytes,9,opt,name=language_code,json=languageCode,proto3,oneof"`
}

type PolicyTopicEvidence_DestinationTextList_ struct {
	// The text in the destination of the resource that is causing a policy
	// finding.
	DestinationTextList *PolicyTopicEvidence_DestinationTextList `protobuf:"bytes,6,opt,name=destination_text_list,json=destinationTextList,proto3,oneof"`
}

type PolicyTopicEvidence_DestinationMismatch_ struct {
	// Mismatch between the destinations of a resource's URLs.
	DestinationMismatch *PolicyTopicEvidence_DestinationMismatch `protobuf:"bytes,7,opt,name=destination_mismatch,json=destinationMismatch,proto3,oneof"`
}

type PolicyTopicEvidence_DestinationNotWorking_ struct {
	// Details when the destination is returning an HTTP error code or isn't
	// functional in all locations for commonly used devices.
	DestinationNotWorking *PolicyTopicEvidence_DestinationNotWorking `protobuf:"bytes,8,opt,name=destination_not_working,json=destinationNotWorking,proto3,oneof"`
}

func (*PolicyTopicEvidence_WebsiteList_) isPolicyTopicEvidence_Value() {}

func (*PolicyTopicEvidence_TextList_) isPolicyTopicEvidence_Value() {}

func (*PolicyTopicEvidence_LanguageCode) isPolicyTopicEvidence_Value() {}

func (*PolicyTopicEvidence_DestinationTextList_) isPolicyTopicEvidence_Value() {}

func (*PolicyTopicEvidence_DestinationMismatch_) isPolicyTopicEvidence_Value() {}

func (*PolicyTopicEvidence_DestinationNotWorking_) isPolicyTopicEvidence_Value() {}

// Describes the effect on serving that a policy topic entry will have.
type PolicyTopicConstraint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specific information about the constraint.
	//
	// Types that are valid to be assigned to Value:
	//
	//	*PolicyTopicConstraint_CountryConstraintList_
	//	*PolicyTopicConstraint_ResellerConstraint_
	//	*PolicyTopicConstraint_CertificateMissingInCountryList
	//	*PolicyTopicConstraint_CertificateDomainMismatchInCountryList
	Value         isPolicyTopicConstraint_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolicyTopicConstraint) Reset() {
	*x = PolicyTopicConstraint{}
	mi := &file_google_ads_googleads_v20_common_policy_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyTopicConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyTopicConstraint) ProtoMessage() {}

func (x *PolicyTopicConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_policy_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyTopicConstraint.ProtoReflect.Descriptor instead.
func (*PolicyTopicConstraint) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_policy_proto_rawDescGZIP(), []int{4}
}

func (x *PolicyTopicConstraint) GetValue() isPolicyTopicConstraint_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PolicyTopicConstraint) GetCountryConstraintList() *PolicyTopicConstraint_CountryConstraintList {
	if x != nil {
		if x, ok := x.Value.(*PolicyTopicConstraint_CountryConstraintList_); ok {
			return x.CountryConstraintList
		}
	}
	return nil
}

func (x *PolicyTopicConstraint) GetResellerConstraint() *PolicyTopicConstraint_ResellerConstraint {
	if x != nil {
		if x, ok := x.Value.(*PolicyTopicConstraint_ResellerConstraint_); ok {
			return x.ResellerConstraint
		}
	}
	return nil
}

func (x *PolicyTopicConstraint) GetCertificateMissingInCountryList() *PolicyTopicConstraint_CountryConstraintList {
	if x != nil {
		if x, ok := x.Value.(*PolicyTopicConstraint_CertificateMissingInCountryList); ok {
			return x.CertificateMissingInCountryList
		}
	}
	return nil
}

func (x *PolicyTopicConstraint) GetCertificateDomainMismatchInCountryList() *PolicyTopicConstraint_CountryConstraintList {
	if x != nil {
		if x, ok := x.Value.(*PolicyTopicConstraint_CertificateDomainMismatchInCountryList); ok {
			return x.CertificateDomainMismatchInCountryList
		}
	}
	return nil
}

type isPolicyTopicConstraint_Value interface {
	isPolicyTopicConstraint_Value()
}

type PolicyTopicConstraint_CountryConstraintList_ struct {
	// Countries where the resource cannot serve.
	CountryConstraintList *PolicyTopicConstraint_CountryConstraintList `protobuf:"bytes,1,opt,name=country_constraint_list,json=countryConstraintList,proto3,oneof"`
}

type PolicyTopicConstraint_ResellerConstraint_ struct {
	// Reseller constraint.
	ResellerConstraint *PolicyTopicConstraint_ResellerConstraint `protobuf:"bytes,2,opt,name=reseller_constraint,json=resellerConstraint,proto3,oneof"`
}

type PolicyTopicConstraint_CertificateMissingInCountryList struct {
	// Countries where a certificate is required for serving.
	CertificateMissingInCountryList *PolicyTopicConstraint_CountryConstraintList `protobuf:"bytes,3,opt,name=certificate_missing_in_country_list,json=certificateMissingInCountryList,proto3,oneof"`
}

type PolicyTopicConstraint_CertificateDomainMismatchInCountryList struct {
	// Countries where the resource's domain is not covered by the
	// certificates associated with it.
	CertificateDomainMismatchInCountryList *PolicyTopicConstraint_CountryConstraintList `protobuf:"bytes,4,opt,name=certificate_domain_mismatch_in_country_list,json=certificateDomainMismatchInCountryList,proto3,oneof"`
}

func (*PolicyTopicConstraint_CountryConstraintList_) isPolicyTopicConstraint_Value() {}

func (*PolicyTopicConstraint_ResellerConstraint_) isPolicyTopicConstraint_Value() {}

func (*PolicyTopicConstraint_CertificateMissingInCountryList) isPolicyTopicConstraint_Value() {}

func (*PolicyTopicConstraint_CertificateDomainMismatchInCountryList) isPolicyTopicConstraint_Value() {
}

// A list of fragments of text that violated a policy.
type PolicyTopicEvidence_TextList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The fragments of text from the resource that caused the policy finding.
	Texts         []string `protobuf:"bytes,2,rep,name=texts,proto3" json:"texts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolicyTopicEvidence_TextList) Reset() {
	*x = PolicyTopicEvidence_TextList{}
	mi := &file_google_ads_googleads_v20_common_policy_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyTopicEvidence_TextList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyTopicEvidence_TextList) ProtoMessage() {}

func (x *PolicyTopicEvidence_TextList) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_policy_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyTopicEvidence_TextList.ProtoReflect.Descriptor instead.
func (*PolicyTopicEvidence_TextList) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_policy_proto_rawDescGZIP(), []int{3, 0}
}

func (x *PolicyTopicEvidence_TextList) GetTexts() []string {
	if x != nil {
		return x.Texts
	}
	return nil
}

// A list of websites that caused a policy finding. Used for
// ONE_WEBSITE_PER_AD_GROUP policy topic, for example. In case there are more
// than five websites, only the top five (those that appear in resources the
// most) will be listed here.
type PolicyTopicEvidence_WebsiteList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Websites that caused the policy finding.
	Websites      []string `protobuf:"bytes,2,rep,name=websites,proto3" json:"websites,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolicyTopicEvidence_WebsiteList) Reset() {
	*x = PolicyTopicEvidence_WebsiteList{}
	mi := &file_google_ads_googleads_v20_common_policy_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyTopicEvidence_WebsiteList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyTopicEvidence_WebsiteList) ProtoMessage() {}

func (x *PolicyTopicEvidence_WebsiteList) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_policy_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyTopicEvidence_WebsiteList.ProtoReflect.Descriptor instead.
func (*PolicyTopicEvidence_WebsiteList) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_policy_proto_rawDescGZIP(), []int{3, 1}
}

func (x *PolicyTopicEvidence_WebsiteList) GetWebsites() []string {
	if x != nil {
		return x.Websites
	}
	return nil
}

// A list of strings found in a destination page that caused a policy
// finding.
type PolicyTopicEvidence_DestinationTextList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of text found in the resource's destination page.
	DestinationTexts []string `protobuf:"bytes,2,rep,name=destination_texts,json=destinationTexts,proto3" json:"destination_texts,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PolicyTopicEvidence_DestinationTextList) Reset() {
	*x = PolicyTopicEvidence_DestinationTextList{}
	mi := &file_google_ads_googleads_v20_common_policy_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyTopicEvidence_DestinationTextList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyTopicEvidence_DestinationTextList) ProtoMessage() {}

func (x *PolicyTopicEvidence_DestinationTextList) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_policy_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyTopicEvidence_DestinationTextList.ProtoReflect.Descriptor instead.
func (*PolicyTopicEvidence_DestinationTextList) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_policy_proto_rawDescGZIP(), []int{3, 2}
}

func (x *PolicyTopicEvidence_DestinationTextList) GetDestinationTexts() []string {
	if x != nil {
		return x.DestinationTexts
	}
	return nil
}

// Evidence of mismatches between the URLs of a resource.
type PolicyTopicEvidence_DestinationMismatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The set of URLs that did not match each other.
	UrlTypes      []enums.PolicyTopicEvidenceDestinationMismatchUrlTypeEnum_PolicyTopicEvidenceDestinationMismatchUrlType `protobuf:"varint,1,rep,packed,name=url_types,json=urlTypes,proto3,enum=google.ads.googleads.v20.enums.PolicyTopicEvidenceDestinationMismatchUrlTypeEnum_PolicyTopicEvidenceDestinationMismatchUrlType" json:"url_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolicyTopicEvidence_DestinationMismatch) Reset() {
	*x = PolicyTopicEvidence_DestinationMismatch{}
	mi := &file_google_ads_googleads_v20_common_policy_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyTopicEvidence_DestinationMismatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyTopicEvidence_DestinationMismatch) ProtoMessage() {}

func (x *PolicyTopicEvidence_DestinationMismatch) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_policy_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyTopicEvidence_DestinationMismatch.ProtoReflect.Descriptor instead.
func (*PolicyTopicEvidence_DestinationMismatch) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_policy_proto_rawDescGZIP(), []int{3, 3}
}

func (x *PolicyTopicEvidence_DestinationMismatch) GetUrlTypes() []enums.PolicyTopicEvidenceDestinationMismatchUrlTypeEnum_PolicyTopicEvidenceDestinationMismatchUrlType {
	if x != nil {
		return x.UrlTypes
	}
	return nil
}

// Evidence details when the destination is returning an HTTP error
// code or isn't functional in all locations for commonly used devices.
type PolicyTopicEvidence_DestinationNotWorking struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The full URL that didn't work.
	ExpandedUrl *string `protobuf:"bytes,7,opt,name=expanded_url,json=expandedUrl,proto3,oneof" json:"expanded_url,omitempty"`
	// The type of device that failed to load the URL.
	Device enums.PolicyTopicEvidenceDestinationNotWorkingDeviceEnum_PolicyTopicEvidenceDestinationNotWorkingDevice `protobuf:"varint,4,opt,name=device,proto3,enum=google.ads.googleads.v20.enums.PolicyTopicEvidenceDestinationNotWorkingDeviceEnum_PolicyTopicEvidenceDestinationNotWorkingDevice" json:"device,omitempty"`
	// The time the URL was last checked.
	// The format is "YYYY-MM-DD HH:MM:SS".
	// Examples: "2018-03-05 09:15:00" or "2018-02-01 14:34:30"
	LastCheckedDateTime *string `protobuf:"bytes,8,opt,name=last_checked_date_time,json=lastCheckedDateTime,proto3,oneof" json:"last_checked_date_time,omitempty"`
	// Indicates the reason of the DESTINATION_NOT_WORKING policy finding.
	//
	// Types that are valid to be assigned to Reason:
	//
	//	*PolicyTopicEvidence_DestinationNotWorking_DnsErrorType
	//	*PolicyTopicEvidence_DestinationNotWorking_HttpErrorCode
	Reason        isPolicyTopicEvidence_DestinationNotWorking_Reason `protobuf_oneof:"reason"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolicyTopicEvidence_DestinationNotWorking) Reset() {
	*x = PolicyTopicEvidence_DestinationNotWorking{}
	mi := &file_google_ads_googleads_v20_common_policy_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyTopicEvidence_DestinationNotWorking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyTopicEvidence_DestinationNotWorking) ProtoMessage() {}

func (x *PolicyTopicEvidence_DestinationNotWorking) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_policy_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyTopicEvidence_DestinationNotWorking.ProtoReflect.Descriptor instead.
func (*PolicyTopicEvidence_DestinationNotWorking) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_policy_proto_rawDescGZIP(), []int{3, 4}
}

func (x *PolicyTopicEvidence_DestinationNotWorking) GetExpandedUrl() string {
	if x != nil && x.ExpandedUrl != nil {
		return *x.ExpandedUrl
	}
	return ""
}

func (x *PolicyTopicEvidence_DestinationNotWorking) GetDevice() enums.PolicyTopicEvidenceDestinationNotWorkingDeviceEnum_PolicyTopicEvidenceDestinationNotWorkingDevice {
	if x != nil {
		return x.Device
	}
	return enums.PolicyTopicEvidenceDestinationNotWorkingDeviceEnum_PolicyTopicEvidenceDestinationNotWorkingDevice(0)
}

func (x *PolicyTopicEvidence_DestinationNotWorking) GetLastCheckedDateTime() string {
	if x != nil && x.LastCheckedDateTime != nil {
		return *x.LastCheckedDateTime
	}
	return ""
}

func (x *PolicyTopicEvidence_DestinationNotWorking) GetReason() isPolicyTopicEvidence_DestinationNotWorking_Reason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *PolicyTopicEvidence_DestinationNotWorking) GetDnsErrorType() enums.PolicyTopicEvidenceDestinationNotWorkingDnsErrorTypeEnum_PolicyTopicEvidenceDestinationNotWorkingDnsErrorType {
	if x != nil {
		if x, ok := x.Reason.(*PolicyTopicEvidence_DestinationNotWorking_DnsErrorType); ok {
			return x.DnsErrorType
		}
	}
	return enums.PolicyTopicEvidenceDestinationNotWorkingDnsErrorTypeEnum_PolicyTopicEvidenceDestinationNotWorkingDnsErrorType(0)
}

func (x *PolicyTopicEvidence_DestinationNotWorking) GetHttpErrorCode() int64 {
	if x != nil {
		if x, ok := x.Reason.(*PolicyTopicEvidence_DestinationNotWorking_HttpErrorCode); ok {
			return x.HttpErrorCode
		}
	}
	return 0
}

type isPolicyTopicEvidence_DestinationNotWorking_Reason interface {
	isPolicyTopicEvidence_DestinationNotWorking_Reason()
}

type PolicyTopicEvidence_DestinationNotWorking_DnsErrorType struct {
	// The type of DNS error.
	DnsErrorType enums.PolicyTopicEvidenceDestinationNotWorkingDnsErrorTypeEnum_PolicyTopicEvidenceDestinationNotWorkingDnsErrorType `protobuf:"varint,1,opt,name=dns_error_type,json=dnsErrorType,proto3,enum=google.ads.googleads.v20.enums.PolicyTopicEvidenceDestinationNotWorkingDnsErrorTypeEnum_PolicyTopicEvidenceDestinationNotWorkingDnsErrorType,oneof"`
}

type PolicyTopicEvidence_DestinationNotWorking_HttpErrorCode struct {
	// The HTTP error code.
	HttpErrorCode int64 `protobuf:"varint,6,opt,name=http_error_code,json=httpErrorCode,proto3,oneof"`
}

func (*PolicyTopicEvidence_DestinationNotWorking_DnsErrorType) isPolicyTopicEvidence_DestinationNotWorking_Reason() {
}

func (*PolicyTopicEvidence_DestinationNotWorking_HttpErrorCode) isPolicyTopicEvidence_DestinationNotWorking_Reason() {
}

// A list of countries where a resource's serving is constrained.
type PolicyTopicConstraint_CountryConstraintList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Total number of countries targeted by the resource.
	TotalTargetedCountries *int32 `protobuf:"varint,3,opt,name=total_targeted_countries,json=totalTargetedCountries,proto3,oneof" json:"total_targeted_countries,omitempty"`
	// Countries in which serving is restricted.
	Countries     []*PolicyTopicConstraint_CountryConstraint `protobuf:"bytes,2,rep,name=countries,proto3" json:"countries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolicyTopicConstraint_CountryConstraintList) Reset() {
	*x = PolicyTopicConstraint_CountryConstraintList{}
	mi := &file_google_ads_googleads_v20_common_policy_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyTopicConstraint_CountryConstraintList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyTopicConstraint_CountryConstraintList) ProtoMessage() {}

func (x *PolicyTopicConstraint_CountryConstraintList) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_policy_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyTopicConstraint_CountryConstraintList.ProtoReflect.Descriptor instead.
func (*PolicyTopicConstraint_CountryConstraintList) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_policy_proto_rawDescGZIP(), []int{4, 0}
}

func (x *PolicyTopicConstraint_CountryConstraintList) GetTotalTargetedCountries() int32 {
	if x != nil && x.TotalTargetedCountries != nil {
		return *x.TotalTargetedCountries
	}
	return 0
}

func (x *PolicyTopicConstraint_CountryConstraintList) GetCountries() []*PolicyTopicConstraint_CountryConstraint {
	if x != nil {
		return x.Countries
	}
	return nil
}

// Indicates that a policy topic was constrained due to disapproval of the
// website for reseller purposes.
type PolicyTopicConstraint_ResellerConstraint struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolicyTopicConstraint_ResellerConstraint) Reset() {
	*x = PolicyTopicConstraint_ResellerConstraint{}
	mi := &file_google_ads_googleads_v20_common_policy_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyTopicConstraint_ResellerConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyTopicConstraint_ResellerConstraint) ProtoMessage() {}

func (x *PolicyTopicConstraint_ResellerConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_policy_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyTopicConstraint_ResellerConstraint.ProtoReflect.Descriptor instead.
func (*PolicyTopicConstraint_ResellerConstraint) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_policy_proto_rawDescGZIP(), []int{4, 1}
}

// Indicates that a resource's ability to serve in a particular country is
// constrained.
type PolicyTopicConstraint_CountryConstraint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Geo target constant resource name of the country in which serving is
	// constrained.
	CountryCriterion *string `protobuf:"bytes,2,opt,name=country_criterion,json=countryCriterion,proto3,oneof" json:"country_criterion,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PolicyTopicConstraint_CountryConstraint) Reset() {
	*x = PolicyTopicConstraint_CountryConstraint{}
	mi := &file_google_ads_googleads_v20_common_policy_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyTopicConstraint_CountryConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyTopicConstraint_CountryConstraint) ProtoMessage() {}

func (x *PolicyTopicConstraint_CountryConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_policy_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyTopicConstraint_CountryConstraint.ProtoReflect.Descriptor instead.
func (*PolicyTopicConstraint_CountryConstraint) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_policy_proto_rawDescGZIP(), []int{4, 2}
}

func (x *PolicyTopicConstraint_CountryConstraint) GetCountryCriterion() string {
	if x != nil && x.CountryCriterion != nil {
		return *x.CountryCriterion
	}
	return ""
}

var File_google_ads_googleads_v20_common_policy_proto protoreflect.FileDescriptor

const file_google_ads_googleads_v20_common_policy_proto_rawDesc = "" +
	"\n" +
	",google/ads/googleads/v20/common/policy.proto\x12\x1fgoogle.ads.googleads.v20.common\x1a<google/ads/googleads/v20/enums/policy_topic_entry_type.proto\x1aXgoogle/ads/googleads/v20/enums/policy_topic_evidence_destination_mismatch_url_type.proto\x1aYgoogle/ads/googleads/v20/enums/policy_topic_evidence_destination_not_working_device.proto\x1aagoogle/ads/googleads/v20/enums/policy_topic_evidence_destination_not_working_dns_error_type.proto\"\x89\x01\n" +
	"\x12PolicyViolationKey\x12$\n" +
	"\vpolicy_name\x18\x03 \x01(\tH\x00R\n" +
	"policyName\x88\x01\x01\x12*\n" +
	"\x0eviolating_text\x18\x04 \x01(\tH\x01R\rviolatingText\x88\x01\x01B\x0e\n" +
	"\f_policy_nameB\x11\n" +
	"\x0f_violating_text\"\xc9\x01\n" +
	"\x19PolicyValidationParameter\x126\n" +
	"\x17ignorable_policy_topics\x18\x03 \x03(\tR\x15ignorablePolicyTopics\x12t\n" +
	"\x1cexempt_policy_violation_keys\x18\x02 \x03(\v23.google.ads.googleads.v20.common.PolicyViolationKeyR\x19exemptPolicyViolationKeys\"\xc8\x02\n" +
	"\x10PolicyTopicEntry\x12\x19\n" +
	"\x05topic\x18\x05 \x01(\tH\x00R\x05topic\x88\x01\x01\x12a\n" +
	"\x04type\x18\x02 \x01(\x0e2M.google.ads.googleads.v20.enums.PolicyTopicEntryTypeEnum.PolicyTopicEntryTypeR\x04type\x12R\n" +
	"\tevidences\x18\x03 \x03(\v24.google.ads.googleads.v20.common.PolicyTopicEvidenceR\tevidences\x12X\n" +
	"\vconstraints\x18\x04 \x03(\v26.google.ads.googleads.v20.common.PolicyTopicConstraintR\vconstraintsB\b\n" +
	"\x06_topic\"\x8a\f\n" +
	"\x13PolicyTopicEvidence\x12e\n" +
	"\fwebsite_list\x18\x03 \x01(\v2@.google.ads.googleads.v20.common.PolicyTopicEvidence.WebsiteListH\x00R\vwebsiteList\x12\\\n" +
	"\ttext_list\x18\x04 \x01(\v2=.google.ads.googleads.v20.common.PolicyTopicEvidence.TextListH\x00R\btextList\x12%\n" +
	"\rlanguage_code\x18\t \x01(\tH\x00R\flanguageCode\x12~\n" +
	"\x15destination_text_list\x18\x06 \x01(\v2H.google.ads.googleads.v20.common.PolicyTopicEvidence.DestinationTextListH\x00R\x13destinationTextList\x12}\n" +
	"\x14destination_mismatch\x18\a \x01(\v2H.google.ads.googleads.v20.common.PolicyTopicEvidence.DestinationMismatchH\x00R\x13destinationMismatch\x12\x84\x01\n" +
	"\x17destination_not_working\x18\b \x01(\v2J.google.ads.googleads.v20.common.PolicyTopicEvidence.DestinationNotWorkingH\x00R\x15destinationNotWorking\x1a \n" +
	"\bTextList\x12\x14\n" +
	"\x05texts\x18\x02 \x03(\tR\x05texts\x1a)\n" +
	"\vWebsiteList\x12\x1a\n" +
	"\bwebsites\x18\x02 \x03(\tR\bwebsites\x1aB\n" +
	"\x13DestinationTextList\x12+\n" +
	"\x11destination_texts\x18\x02 \x03(\tR\x10destinationTexts\x1a\xb4\x01\n" +
	"\x13DestinationMismatch\x12\x9c\x01\n" +
	"\turl_types\x18\x01 \x03(\x0e2\x7f.google.ads.googleads.v20.enums.PolicyTopicEvidenceDestinationMismatchUrlTypeEnum.PolicyTopicEvidenceDestinationMismatchUrlTypeR\burlTypes\x1a\xaf\x04\n" +
	"\x15DestinationNotWorking\x12&\n" +
	"\fexpanded_url\x18\a \x01(\tH\x01R\vexpandedUrl\x88\x01\x01\x12\x9a\x01\n" +
	"\x06device\x18\x04 \x01(\x0e2\x81\x01.google.ads.googleads.v20.enums.PolicyTopicEvidenceDestinationNotWorkingDeviceEnum.PolicyTopicEvidenceDestinationNotWorkingDeviceR\x06device\x128\n" +
	"\x16last_checked_date_time\x18\b \x01(\tH\x02R\x13lastCheckedDateTime\x88\x01\x01\x12\xb6\x01\n" +
	"\x0edns_error_type\x18\x01 \x01(\x0e2\x8d\x01.google.ads.googleads.v20.enums.PolicyTopicEvidenceDestinationNotWorkingDnsErrorTypeEnum.PolicyTopicEvidenceDestinationNotWorkingDnsErrorTypeH\x00R\fdnsErrorType\x12(\n" +
	"\x0fhttp_error_code\x18\x06 \x01(\x03H\x00R\rhttpErrorCodeB\b\n" +
	"\x06reasonB\x0f\n" +
	"\r_expanded_urlB\x19\n" +
	"\x17_last_checked_date_timeB\a\n" +
	"\x05value\"\xc5\a\n" +
	"\x15PolicyTopicConstraint\x12\x86\x01\n" +
	"\x17country_constraint_list\x18\x01 \x01(\v2L.google.ads.googleads.v20.common.PolicyTopicConstraint.CountryConstraintListH\x00R\x15countryConstraintList\x12|\n" +
	"\x13reseller_constraint\x18\x02 \x01(\v2I.google.ads.googleads.v20.common.PolicyTopicConstraint.ResellerConstraintH\x00R\x12resellerConstraint\x12\x9c\x01\n" +
	"#certificate_missing_in_country_list\x18\x03 \x01(\v2L.google.ads.googleads.v20.common.PolicyTopicConstraint.CountryConstraintListH\x00R\x1fcertificateMissingInCountryList\x12\xab\x01\n" +
	"+certificate_domain_mismatch_in_country_list\x18\x04 \x01(\v2L.google.ads.googleads.v20.common.PolicyTopicConstraint.CountryConstraintListH\x00R&certificateDomainMismatchInCountryList\x1a\xdb\x01\n" +
	"\x15CountryConstraintList\x12=\n" +
	"\x18total_targeted_countries\x18\x03 \x01(\x05H\x00R\x16totalTargetedCountries\x88\x01\x01\x12f\n" +
	"\tcountries\x18\x02 \x03(\v2H.google.ads.googleads.v20.common.PolicyTopicConstraint.CountryConstraintR\tcountriesB\x1b\n" +
	"\x19_total_targeted_countries\x1a\x14\n" +
	"\x12ResellerConstraint\x1a[\n" +
	"\x11CountryConstraint\x120\n" +
	"\x11country_criterion\x18\x02 \x01(\tH\x00R\x10countryCriterion\x88\x01\x01B\x14\n" +
	"\x12_country_criterionB\a\n" +
	"\x05valueB\xeb\x01\n" +
	"#com.google.ads.googleads.v20.commonB\vPolicyProtoP\x01ZEgoogle.golang.org/genproto/googleapis/ads/googleads/v20/common;common\xa2\x02\x03GAA\xaa\x02\x1fGoogle.Ads.GoogleAds.V20.Common\xca\x02\x1fGoogle\\Ads\\GoogleAds\\V20\\Common\xea\x02#Google::Ads::GoogleAds::V20::Commonb\x06proto3"

var (
	file_google_ads_googleads_v20_common_policy_proto_rawDescOnce sync.Once
	file_google_ads_googleads_v20_common_policy_proto_rawDescData []byte
)

func file_google_ads_googleads_v20_common_policy_proto_rawDescGZIP() []byte {
	file_google_ads_googleads_v20_common_policy_proto_rawDescOnce.Do(func() {
		file_google_ads_googleads_v20_common_policy_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_google_ads_googleads_v20_common_policy_proto_rawDesc), len(file_google_ads_googleads_v20_common_policy_proto_rawDesc)))
	})
	return file_google_ads_googleads_v20_common_policy_proto_rawDescData
}

var file_google_ads_googleads_v20_common_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_google_ads_googleads_v20_common_policy_proto_goTypes = []any{
	(*PolicyViolationKey)(nil),                               // 0: google.ads.googleads.v20.common.PolicyViolationKey
	(*PolicyValidationParameter)(nil),                        // 1: google.ads.googleads.v20.common.PolicyValidationParameter
	(*PolicyTopicEntry)(nil),                                 // 2: google.ads.googleads.v20.common.PolicyTopicEntry
	(*PolicyTopicEvidence)(nil),                              // 3: google.ads.googleads.v20.common.PolicyTopicEvidence
	(*PolicyTopicConstraint)(nil),                            // 4: google.ads.googleads.v20.common.PolicyTopicConstraint
	(*PolicyTopicEvidence_TextList)(nil),                     // 5: google.ads.googleads.v20.common.PolicyTopicEvidence.TextList
	(*PolicyTopicEvidence_WebsiteList)(nil),                  // 6: google.ads.googleads.v20.common.PolicyTopicEvidence.WebsiteList
	(*PolicyTopicEvidence_DestinationTextList)(nil),          // 7: google.ads.googleads.v20.common.PolicyTopicEvidence.DestinationTextList
	(*PolicyTopicEvidence_DestinationMismatch)(nil),          // 8: google.ads.googleads.v20.common.PolicyTopicEvidence.DestinationMismatch
	(*PolicyTopicEvidence_DestinationNotWorking)(nil),        // 9: google.ads.googleads.v20.common.PolicyTopicEvidence.DestinationNotWorking
	(*PolicyTopicConstraint_CountryConstraintList)(nil),      // 10: google.ads.googleads.v20.common.PolicyTopicConstraint.CountryConstraintList
	(*PolicyTopicConstraint_ResellerConstraint)(nil),         // 11: google.ads.googleads.v20.common.PolicyTopicConstraint.ResellerConstraint
	(*PolicyTopicConstraint_CountryConstraint)(nil),          // 12: google.ads.googleads.v20.common.PolicyTopicConstraint.CountryConstraint
	(enums.PolicyTopicEntryTypeEnum_PolicyTopicEntryType)(0), // 13: google.ads.googleads.v20.enums.PolicyTopicEntryTypeEnum.PolicyTopicEntryType
	(enums.PolicyTopicEvidenceDestinationMismatchUrlTypeEnum_PolicyTopicEvidenceDestinationMismatchUrlType)(0),               // 14: google.ads.googleads.v20.enums.PolicyTopicEvidenceDestinationMismatchUrlTypeEnum.PolicyTopicEvidenceDestinationMismatchUrlType
	(enums.PolicyTopicEvidenceDestinationNotWorkingDeviceEnum_PolicyTopicEvidenceDestinationNotWorkingDevice)(0),             // 15: google.ads.googleads.v20.enums.PolicyTopicEvidenceDestinationNotWorkingDeviceEnum.PolicyTopicEvidenceDestinationNotWorkingDevice
	(enums.PolicyTopicEvidenceDestinationNotWorkingDnsErrorTypeEnum_PolicyTopicEvidenceDestinationNotWorkingDnsErrorType)(0), // 16: google.ads.googleads.v20.enums.PolicyTopicEvidenceDestinationNotWorkingDnsErrorTypeEnum.PolicyTopicEvidenceDestinationNotWorkingDnsErrorType
}
var file_google_ads_googleads_v20_common_policy_proto_depIdxs = []int32{
	0,  // 0: google.ads.googleads.v20.common.PolicyValidationParameter.exempt_policy_violation_keys:type_name -> google.ads.googleads.v20.common.PolicyViolationKey
	13, // 1: google.ads.googleads.v20.common.PolicyTopicEntry.type:type_name -> google.ads.googleads.v20.enums.PolicyTopicEntryTypeEnum.PolicyTopicEntryType
	3,  // 2: google.ads.googleads.v20.common.PolicyTopicEntry.evidences:type_name -> google.ads.googleads.v20.common.PolicyTopicEvidence
	4,  // 3: google.ads.googleads.v20.common.PolicyTopicEntry.constraints:type_name -> google.ads.googleads.v20.common.PolicyTopicConstraint
	6,  // 4: google.ads.googleads.v20.common.PolicyTopicEvidence.website_list:type_name -> google.ads.googleads.v20.common.PolicyTopicEvidence.WebsiteList
	5,  // 5: google.ads.googleads.v20.common.PolicyTopicEvidence.text_list:type_name -> google.ads.googleads.v20.common.PolicyTopicEvidence.TextList
	7,  // 6: google.ads.googleads.v20.common.PolicyTopicEvidence.destination_text_list:type_name -> google.ads.googleads.v20.common.PolicyTopicEvidence.DestinationTextList
	8,  // 7: google.ads.googleads.v20.common.PolicyTopicEvidence.destination_mismatch:type_name -> google.ads.googleads.v20.common.PolicyTopicEvidence.DestinationMismatch
	9,  // 8: google.ads.googleads.v20.common.PolicyTopicEvidence.destination_not_working:type_name -> google.ads.googleads.v20.common.PolicyTopicEvidence.DestinationNotWorking
	10, // 9: google.ads.googleads.v20.common.PolicyTopicConstraint.country_constraint_list:type_name -> google.ads.googleads.v20.common.PolicyTopicConstraint.CountryConstraintList
	11, // 10: google.ads.googleads.v20.common.PolicyTopicConstraint.reseller_constraint:type_name -> google.ads.googleads.v20.common.PolicyTopicConstraint.ResellerConstraint
	10, // 11: google.ads.googleads.v20.common.PolicyTopicConstraint.certificate_missing_in_country_list:type_name -> google.ads.googleads.v20.common.PolicyTopicConstraint.CountryConstraintList
	10, // 12: google.ads.googleads.v20.common.PolicyTopicConstraint.certificate_domain_mismatch_in_country_list:type_name -> google.ads.googleads.v20.common.PolicyTopicConstraint.CountryConstraintList
	14, // 13: google.ads.googleads.v20.common.PolicyTopicEvidence.DestinationMismatch.url_types:type_name -> google.ads.googleads.v20.enums.PolicyTopicEvidenceDestinationMismatchUrlTypeEnum.PolicyTopicEvidenceDestinationMismatchUrlType
	15, // 14: google.ads.googleads.v20.common.PolicyTopicEvidence.DestinationNotWorking.device:type_name -> google.ads.googleads.v20.enums.PolicyTopicEvidenceDestinationNotWorkingDeviceEnum.PolicyTopicEvidenceDestinationNotWorkingDevice
	16, // 15: google.ads.googleads.v20.common.PolicyTopicEvidence.DestinationNotWorking.dns_error_type:type_name -> google.ads.googleads.v20.enums.PolicyTopicEvidenceDestinationNotWorkingDnsErrorTypeEnum.PolicyTopicEvidenceDestinationNotWorkingDnsErrorType
	12, // 16: google.ads.googleads.v20.common.PolicyTopicConstraint.CountryConstraintList.countries:type_name -> google.ads.googleads.v20.common.PolicyTopicConstraint.CountryConstraint
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_google_ads_googleads_v20_common_policy_proto_init() }
func file_google_ads_googleads_v20_common_policy_proto_init() {
	if File_google_ads_googleads_v20_common_policy_proto != nil {
		return
	}
	file_google_ads_googleads_v20_common_policy_proto_msgTypes[0].OneofWrappers = []any{}
	file_google_ads_googleads_v20_common_policy_proto_msgTypes[2].OneofWrappers = []any{}
	file_google_ads_googleads_v20_common_policy_proto_msgTypes[3].OneofWrappers = []any{
		(*PolicyTopicEvidence_WebsiteList_)(nil),
		(*PolicyTopicEvidence_TextList_)(nil),
		(*PolicyTopicEvidence_LanguageCode)(nil),
		(*PolicyTopicEvidence_DestinationTextList_)(nil),
		(*PolicyTopicEvidence_DestinationMismatch_)(nil),
		(*PolicyTopicEvidence_DestinationNotWorking_)(nil),
	}
	file_google_ads_googleads_v20_common_policy_proto_msgTypes[4].OneofWrappers = []any{
		(*PolicyTopicConstraint_CountryConstraintList_)(nil),
		(*PolicyTopicConstraint_ResellerConstraint_)(nil),
		(*PolicyTopicConstraint_CertificateMissingInCountryList)(nil),
		(*PolicyTopicConstraint_CertificateDomainMismatchInCountryList)(nil),
	}
	file_google_ads_googleads_v20_common_policy_proto_msgTypes[9].OneofWrappers = []any{
		(*PolicyTopicEvidence_DestinationNotWorking_DnsErrorType)(nil),
		(*PolicyTopicEvidence_DestinationNotWorking_HttpErrorCode)(nil),
	}
	file_google_ads_googleads_v20_common_policy_proto_msgTypes[10].OneofWrappers = []any{}
	file_google_ads_googleads_v20_common_policy_proto_msgTypes[12].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_google_ads_googleads_v20_common_policy_proto_rawDesc), len(file_google_ads_googleads_v20_common_policy_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_ads_googleads_v20_common_policy_proto_goTypes,
		DependencyIndexes: file_google_ads_googleads_v20_common_policy_proto_depIdxs,
		MessageInfos:      file_google_ads_googleads_v20_common_policy_proto_msgTypes,
	}.Build()
	File_google_ads_googleads_v20_common_policy_proto = out.File
	file_google_ads_googleads_v20_common_policy_proto_goTypes = nil
	file_google_ads_googleads_v20_common_policy_proto_depIdxs = nil
}
