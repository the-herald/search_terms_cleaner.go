// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: google/ads/googleads/v20/common/metrics.proto

package common

import (
	enums "google.golang.org/genproto/googleapis/ads/googleads/v20/enums"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Metrics data.
type Metrics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Search absolute top impression share is the percentage of your Search ad
	// impressions that are shown in the most prominent Search position.
	AbsoluteTopImpressionPercentage *float64 `protobuf:"fixed64,183,opt,name=absolute_top_impression_percentage,json=absoluteTopImpressionPercentage,proto3,oneof" json:"absolute_top_impression_percentage,omitempty"`
	// Average cost of viewable impressions (`active_view_impressions`).
	ActiveViewCpm *float64 `protobuf:"fixed64,184,opt,name=active_view_cpm,json=activeViewCpm,proto3,oneof" json:"active_view_cpm,omitempty"`
	// Active view measurable clicks divided by active view viewable impressions.
	//
	// This metric is reported only for the Display Network.
	ActiveViewCtr *float64 `protobuf:"fixed64,185,opt,name=active_view_ctr,json=activeViewCtr,proto3,oneof" json:"active_view_ctr,omitempty"`
	// A measurement of how often your ad has become viewable on a Display
	// Network site.
	ActiveViewImpressions *int64 `protobuf:"varint,186,opt,name=active_view_impressions,json=activeViewImpressions,proto3,oneof" json:"active_view_impressions,omitempty"`
	// The ratio of impressions that could be measured by Active View over the
	// number of served impressions.
	ActiveViewMeasurability *float64 `protobuf:"fixed64,187,opt,name=active_view_measurability,json=activeViewMeasurability,proto3,oneof" json:"active_view_measurability,omitempty"`
	// The cost of the impressions you received that were measurable by Active
	// View.
	ActiveViewMeasurableCostMicros *int64 `protobuf:"varint,188,opt,name=active_view_measurable_cost_micros,json=activeViewMeasurableCostMicros,proto3,oneof" json:"active_view_measurable_cost_micros,omitempty"`
	// The number of times your ads are appearing on placements in positions
	// where they can be seen.
	ActiveViewMeasurableImpressions *int64 `protobuf:"varint,189,opt,name=active_view_measurable_impressions,json=activeViewMeasurableImpressions,proto3,oneof" json:"active_view_measurable_impressions,omitempty"`
	// The percentage of time when your ad appeared on an Active View enabled site
	// (measurable impressions) and was viewable (viewable impressions).
	ActiveViewViewability *float64 `protobuf:"fixed64,190,opt,name=active_view_viewability,json=activeViewViewability,proto3,oneof" json:"active_view_viewability,omitempty"`
	// All conversions from interactions (as oppose to view through conversions)
	// divided by the number of ad interactions.
	AllConversionsFromInteractionsRate *float64 `protobuf:"fixed64,191,opt,name=all_conversions_from_interactions_rate,json=allConversionsFromInteractionsRate,proto3,oneof" json:"all_conversions_from_interactions_rate,omitempty"`
	// The value of all conversions.
	AllConversionsValue *float64 `protobuf:"fixed64,192,opt,name=all_conversions_value,json=allConversionsValue,proto3,oneof" json:"all_conversions_value,omitempty"`
	// The value of all conversions. When this column is selected with date, the
	// values in date column means the conversion date. Details for the
	// by_conversion_date columns are available at
	// https://support.google.com/google-ads/answer/9549009.
	AllConversionsValueByConversionDate *float64 `protobuf:"fixed64,240,opt,name=all_conversions_value_by_conversion_date,json=allConversionsValueByConversionDate,proto3,oneof" json:"all_conversions_value_by_conversion_date,omitempty"`
	// All of new customers' lifetime conversion value. If you have set up
	// customer acquisition goal at either account level or campaign level, this
	// will include the additional conversion value from new customers for both
	// biddable and non-biddable conversions. If your campaign has adopted the
	// customer acquisition goal and selected "bid higher for new customers",
	// these values will be included in "all_conversions_value". See
	// https://support.google.com/google-ads/answer/12080169 for more details.
	AllNewCustomerLifetimeValue *float64 `protobuf:"fixed64,294,opt,name=all_new_customer_lifetime_value,json=allNewCustomerLifetimeValue,proto3,oneof" json:"all_new_customer_lifetime_value,omitempty"`
	// The total number of conversions. This includes all conversions regardless
	// of the value of include_in_conversions_metric.
	AllConversions *float64 `protobuf:"fixed64,193,opt,name=all_conversions,json=allConversions,proto3,oneof" json:"all_conversions,omitempty"`
	// The total number of conversions. This includes all conversions regardless
	// of the value of include_in_conversions_metric. When this column is selected
	// with date, the values in date column means the conversion date. Details for
	// the by_conversion_date columns are available at
	// https://support.google.com/google-ads/answer/9549009.
	AllConversionsByConversionDate *float64 `protobuf:"fixed64,241,opt,name=all_conversions_by_conversion_date,json=allConversionsByConversionDate,proto3,oneof" json:"all_conversions_by_conversion_date,omitempty"`
	// The value of all conversions divided by the total cost of ad interactions
	// (such as clicks for text ads or views for video ads).
	AllConversionsValuePerCost *float64 `protobuf:"fixed64,194,opt,name=all_conversions_value_per_cost,json=allConversionsValuePerCost,proto3,oneof" json:"all_conversions_value_per_cost,omitempty"`
	// The number of times people clicked the "Call" button to call a store during
	// or after clicking an ad. This number doesn't include whether or not calls
	// were connected, or the duration of any calls.
	//
	// This metric applies to feed items only.
	AllConversionsFromClickToCall *float64 `protobuf:"fixed64,195,opt,name=all_conversions_from_click_to_call,json=allConversionsFromClickToCall,proto3,oneof" json:"all_conversions_from_click_to_call,omitempty"`
	// The number of times people clicked a "Get directions" button to navigate to
	// a store after clicking an ad.
	//
	// This metric applies to feed items only.
	AllConversionsFromDirections *float64 `protobuf:"fixed64,196,opt,name=all_conversions_from_directions,json=allConversionsFromDirections,proto3,oneof" json:"all_conversions_from_directions,omitempty"`
	// The value of all conversions from interactions divided by the total number
	// of interactions.
	AllConversionsFromInteractionsValuePerInteraction *float64 `protobuf:"fixed64,197,opt,name=all_conversions_from_interactions_value_per_interaction,json=allConversionsFromInteractionsValuePerInteraction,proto3,oneof" json:"all_conversions_from_interactions_value_per_interaction,omitempty"`
	// The number of times people clicked a link to view a store's menu after
	// clicking an ad.
	//
	// This metric applies to feed items only.
	AllConversionsFromMenu *float64 `protobuf:"fixed64,198,opt,name=all_conversions_from_menu,json=allConversionsFromMenu,proto3,oneof" json:"all_conversions_from_menu,omitempty"`
	// The number of times people placed an order at a store after clicking an ad.
	//
	// This metric applies to feed items only.
	AllConversionsFromOrder *float64 `protobuf:"fixed64,199,opt,name=all_conversions_from_order,json=allConversionsFromOrder,proto3,oneof" json:"all_conversions_from_order,omitempty"`
	// The number of other conversions (for example, posting a review or saving a
	// location for a store) that occurred after people clicked an ad.
	//
	// This metric applies to feed items only.
	AllConversionsFromOtherEngagement *float64 `protobuf:"fixed64,200,opt,name=all_conversions_from_other_engagement,json=allConversionsFromOtherEngagement,proto3,oneof" json:"all_conversions_from_other_engagement,omitempty"`
	// Estimated number of times people visited a store after clicking an ad.
	//
	// This metric applies to feed items only.
	AllConversionsFromStoreVisit *float64 `protobuf:"fixed64,201,opt,name=all_conversions_from_store_visit,json=allConversionsFromStoreVisit,proto3,oneof" json:"all_conversions_from_store_visit,omitempty"`
	// The number of times that people were taken to a store's URL after clicking
	// an ad.
	//
	// This metric applies to feed items only.
	AllConversionsFromStoreWebsite *float64 `protobuf:"fixed64,202,opt,name=all_conversions_from_store_website,json=allConversionsFromStoreWebsite,proto3,oneof" json:"all_conversions_from_store_website,omitempty"`
	// This metric is part of the Auction Insights report, and tells how often
	// the ads of another participant showed in the most prominent position on the
	// search results page.
	// This percentage is computed only over the auctions that you appeared in
	// the page.
	//
	// This metric is not publicly available.
	AuctionInsightSearchAbsoluteTopImpressionPercentage *float64 `protobuf:"fixed64,258,opt,name=auction_insight_search_absolute_top_impression_percentage,json=auctionInsightSearchAbsoluteTopImpressionPercentage,proto3,oneof" json:"auction_insight_search_absolute_top_impression_percentage,omitempty"`
	// This metric is part of the Auction Insights report, and tells the
	// percentage of impressions that another participant obtained, over the total
	// number of impressions that your ads were eligible for.
	// Any value below 0.1 is reported as 0.0999.
	//
	// This metric is not publicly available.
	AuctionInsightSearchImpressionShare *float64 `protobuf:"fixed64,259,opt,name=auction_insight_search_impression_share,json=auctionInsightSearchImpressionShare,proto3,oneof" json:"auction_insight_search_impression_share,omitempty"`
	// This metric is part of the Auction Insights report, and tells the
	// percentage of impressions that your ads outranked (showed above)
	// another participant in the auction, compared to the total number of
	// impressions that your ads were eligible for.
	// Any value below 0.1 is reported as 0.0999.
	//
	// This metric is not publicly available.
	AuctionInsightSearchOutrankingShare *float64 `protobuf:"fixed64,260,opt,name=auction_insight_search_outranking_share,json=auctionInsightSearchOutrankingShare,proto3,oneof" json:"auction_insight_search_outranking_share,omitempty"`
	// This metric is part of the Auction Insights report, and tells how often
	// another participant's ad received an impression when your ad also received
	// an impression.
	//
	// This metric is not publicly available.
	AuctionInsightSearchOverlapRate *float64 `protobuf:"fixed64,261,opt,name=auction_insight_search_overlap_rate,json=auctionInsightSearchOverlapRate,proto3,oneof" json:"auction_insight_search_overlap_rate,omitempty"`
	// This metric is part of the Auction Insights report, and tells how often
	// another participant's ad was shown in a higher position than yours, when
	// both of your ads were shown at the same page.
	//
	// This metric is not publicly available.
	AuctionInsightSearchPositionAboveRate *float64 `protobuf:"fixed64,262,opt,name=auction_insight_search_position_above_rate,json=auctionInsightSearchPositionAboveRate,proto3,oneof" json:"auction_insight_search_position_above_rate,omitempty"`
	// This metric is part of the Auction Insights report, and tells how often
	// the ads of another participant showed adjacent to the top organic search
	// results. This percentage is computed only over the auctions that you
	// appeared in the page.
	//
	// This metric is not publicly available.
	AuctionInsightSearchTopImpressionPercentage *float64 `protobuf:"fixed64,263,opt,name=auction_insight_search_top_impression_percentage,json=auctionInsightSearchTopImpressionPercentage,proto3,oneof" json:"auction_insight_search_top_impression_percentage,omitempty"`
	// The average amount you pay per interaction. This amount is the total cost
	// of your ads divided by the total number of interactions.
	AverageCost *float64 `protobuf:"fixed64,203,opt,name=average_cost,json=averageCost,proto3,oneof" json:"average_cost,omitempty"`
	// The total cost of all clicks divided by the total number of clicks
	// received.
	AverageCpc *float64 `protobuf:"fixed64,204,opt,name=average_cpc,json=averageCpc,proto3,oneof" json:"average_cpc,omitempty"`
	// The average amount that you've been charged for an ad engagement. This
	// amount is the total cost of all ad engagements divided by the total number
	// of ad engagements.
	AverageCpe *float64 `protobuf:"fixed64,205,opt,name=average_cpe,json=averageCpe,proto3,oneof" json:"average_cpe,omitempty"`
	// Average cost-per-thousand impressions (CPM).
	AverageCpm *float64 `protobuf:"fixed64,206,opt,name=average_cpm,json=averageCpm,proto3,oneof" json:"average_cpm,omitempty"`
	// The average amount you pay each time someone views your ad.
	// The average CPV is defined by the total cost of all ad views divided by
	// the number of views.
	AverageCpv *float64 `protobuf:"fixed64,207,opt,name=average_cpv,json=averageCpv,proto3,oneof" json:"average_cpv,omitempty"`
	// Average number of pages viewed per session.
	AveragePageViews *float64 `protobuf:"fixed64,208,opt,name=average_page_views,json=averagePageViews,proto3,oneof" json:"average_page_views,omitempty"`
	// Total duration of all sessions (in seconds) / number of sessions. Imported
	// from Google Analytics.
	AverageTimeOnSite *float64 `protobuf:"fixed64,209,opt,name=average_time_on_site,json=averageTimeOnSite,proto3,oneof" json:"average_time_on_site,omitempty"`
	// An indication of how other advertisers are bidding on similar products.
	BenchmarkAverageMaxCpc *float64 `protobuf:"fixed64,210,opt,name=benchmark_average_max_cpc,json=benchmarkAverageMaxCpc,proto3,oneof" json:"benchmark_average_max_cpc,omitempty"`
	// Number of app installs.
	BiddableAppInstallConversions *float64 `protobuf:"fixed64,254,opt,name=biddable_app_install_conversions,json=biddableAppInstallConversions,proto3,oneof" json:"biddable_app_install_conversions,omitempty"`
	// Number of in-app actions.
	BiddableAppPostInstallConversions *float64 `protobuf:"fixed64,255,opt,name=biddable_app_post_install_conversions,json=biddableAppPostInstallConversions,proto3,oneof" json:"biddable_app_post_install_conversions,omitempty"`
	// Participated in-app actions. The number of in app actions that come
	// directly or indirectly from the campaign.
	BiddableCohortAppPostInstallConversions *float64 `protobuf:"fixed64,378,opt,name=biddable_cohort_app_post_install_conversions,json=biddableCohortAppPostInstallConversions,proto3,oneof" json:"biddable_cohort_app_post_install_conversions,omitempty"`
	// An indication on how other advertisers' Shopping ads for similar products
	// are performing based on how often people who see their ad click on it.
	BenchmarkCtr *float64 `protobuf:"fixed64,211,opt,name=benchmark_ctr,json=benchmarkCtr,proto3,oneof" json:"benchmark_ctr,omitempty"`
	// Percentage of clicks where the user only visited a single page on your
	// site. Imported from Google Analytics.
	BounceRate *float64 `protobuf:"fixed64,212,opt,name=bounce_rate,json=bounceRate,proto3,oneof" json:"bounce_rate,omitempty"`
	// The number of clicks.
	Clicks *int64 `protobuf:"varint,131,opt,name=clicks,proto3,oneof" json:"clicks,omitempty"`
	// The number of times your ad or your site's listing in the unpaid
	// results was clicked. See the help page at
	// https://support.google.com/google-ads/answer/3097241 for details.
	CombinedClicks *int64 `protobuf:"varint,156,opt,name=combined_clicks,json=combinedClicks,proto3,oneof" json:"combined_clicks,omitempty"`
	// The number of times your ad or your site's listing in the unpaid
	// results was clicked (combined_clicks) divided by combined_queries. See the
	// help page at https://support.google.com/google-ads/answer/3097241 for
	// details.
	CombinedClicksPerQuery *float64 `protobuf:"fixed64,157,opt,name=combined_clicks_per_query,json=combinedClicksPerQuery,proto3,oneof" json:"combined_clicks_per_query,omitempty"`
	// The number of searches that returned pages from your site in the unpaid
	// results or showed one of your text ads. See the help page at
	// https://support.google.com/google-ads/answer/3097241 for details.
	CombinedQueries *int64 `protobuf:"varint,158,opt,name=combined_queries,json=combinedQueries,proto3,oneof" json:"combined_queries,omitempty"`
	// The estimated percent of times that your ad was eligible to show
	// on the Display Network but didn't because your budget was too low.
	// Note: Content budget lost impression share is reported in the range of 0
	// to 0.9. Any value above 0.9 is reported as 0.9001.
	ContentBudgetLostImpressionShare *float64 `protobuf:"fixed64,159,opt,name=content_budget_lost_impression_share,json=contentBudgetLostImpressionShare,proto3,oneof" json:"content_budget_lost_impression_share,omitempty"`
	// The impressions you've received on the Display Network divided
	// by the estimated number of impressions you were eligible to receive.
	// Note: Content impression share is reported in the range of 0.1 to 1. Any
	// value below 0.1 is reported as 0.0999.
	ContentImpressionShare *float64 `protobuf:"fixed64,160,opt,name=content_impression_share,json=contentImpressionShare,proto3,oneof" json:"content_impression_share,omitempty"`
	// The last date/time a conversion tag for this conversion action successfully
	// fired and was seen by Google Ads. This firing event may not have been the
	// result of an attributable conversion (for example, because the tag was
	// fired from a browser that did not previously click an ad from an
	// appropriate advertiser). The date/time is in the customer's time zone.
	ConversionLastReceivedRequestDateTime *string `protobuf:"bytes,161,opt,name=conversion_last_received_request_date_time,json=conversionLastReceivedRequestDateTime,proto3,oneof" json:"conversion_last_received_request_date_time,omitempty"`
	// The date of the most recent conversion for this conversion action. The date
	// is in the customer's time zone.
	ConversionLastConversionDate *string `protobuf:"bytes,162,opt,name=conversion_last_conversion_date,json=conversionLastConversionDate,proto3,oneof" json:"conversion_last_conversion_date,omitempty"`
	// The estimated percentage of impressions on the Display Network
	// that your ads didn't receive due to poor Ad Rank.
	// Note: Content rank lost impression share is reported in the range of 0
	// to 0.9. Any value above 0.9 is reported as 0.9001.
	ContentRankLostImpressionShare *float64 `protobuf:"fixed64,163,opt,name=content_rank_lost_impression_share,json=contentRankLostImpressionShare,proto3,oneof" json:"content_rank_lost_impression_share,omitempty"`
	// Conversions from interactions divided by the number of ad interactions
	// (such as clicks for text ads or views for video ads). This only includes
	// conversion actions which include_in_conversions_metric attribute is set to
	// true. If you use conversion-based bidding, your bid strategies will
	// optimize for these conversions.
	ConversionsFromInteractionsRate *float64 `protobuf:"fixed64,164,opt,name=conversions_from_interactions_rate,json=conversionsFromInteractionsRate,proto3,oneof" json:"conversions_from_interactions_rate,omitempty"`
	// The value of conversions. This only includes conversion actions which
	// include_in_conversions_metric attribute is set to true. If you use
	// conversion-based bidding, your bid strategies will optimize for these
	// conversions.
	ConversionsValue *float64 `protobuf:"fixed64,165,opt,name=conversions_value,json=conversionsValue,proto3,oneof" json:"conversions_value,omitempty"`
	// The value of conversions. This only includes conversion actions which
	// include_in_conversions_metric attribute is set to true. If you use
	// conversion-based bidding, your bid strategies will optimize for these
	// conversions. When this column is selected with date, the values in date
	// column means the conversion date. Details for the by_conversion_date
	// columns are available at
	// https://support.google.com/google-ads/answer/9549009.
	ConversionsValueByConversionDate *float64 `protobuf:"fixed64,242,opt,name=conversions_value_by_conversion_date,json=conversionsValueByConversionDate,proto3,oneof" json:"conversions_value_by_conversion_date,omitempty"`
	// New customers' lifetime conversion value. If you have set up
	// customer acquisition goal at either account level or campaign level, this
	// will include the additional conversion value from new customers for
	// biddable conversions. If your campaign has adopted the customer
	// acquisition goal and selected "bid higher for new customers", these values
	// will be included in "conversions_value" for optimization. See
	// https://support.google.com/google-ads/answer/12080169 for more details.
	NewCustomerLifetimeValue *float64 `protobuf:"fixed64,293,opt,name=new_customer_lifetime_value,json=newCustomerLifetimeValue,proto3,oneof" json:"new_customer_lifetime_value,omitempty"`
	// The value of conversions divided by the cost of ad interactions. This only
	// includes conversion actions which include_in_conversions_metric attribute
	// is set to true. If you use conversion-based bidding, your bid strategies
	// will optimize for these conversions.
	ConversionsValuePerCost *float64 `protobuf:"fixed64,166,opt,name=conversions_value_per_cost,json=conversionsValuePerCost,proto3,oneof" json:"conversions_value_per_cost,omitempty"`
	// The value of conversions from interactions divided by the number of ad
	// interactions. This only includes conversion actions which
	// include_in_conversions_metric attribute is set to true. If you use
	// conversion-based bidding, your bid strategies will optimize for these
	// conversions.
	ConversionsFromInteractionsValuePerInteraction *float64 `protobuf:"fixed64,167,opt,name=conversions_from_interactions_value_per_interaction,json=conversionsFromInteractionsValuePerInteraction,proto3,oneof" json:"conversions_from_interactions_value_per_interaction,omitempty"`
	// The number of conversions. This only includes conversion actions which
	// include_in_conversions_metric attribute is set to true. If you use
	// conversion-based bidding, your bid strategies will optimize for these
	// conversions.
	Conversions *float64 `protobuf:"fixed64,168,opt,name=conversions,proto3,oneof" json:"conversions,omitempty"`
	// The number of conversions. This only includes conversion actions which
	// include_in_conversions_metric attribute is set to true. If you use
	// conversion-based bidding, your bid strategies will optimize for these
	// conversions. When this column is selected with date, the values in date
	// column means the conversion date. Details for the by_conversion_date
	// columns are available at
	// https://support.google.com/google-ads/answer/9549009.
	ConversionsByConversionDate *float64 `protobuf:"fixed64,243,opt,name=conversions_by_conversion_date,json=conversionsByConversionDate,proto3,oneof" json:"conversions_by_conversion_date,omitempty"`
	// The sum of your cost-per-click (CPC) and cost-per-thousand impressions
	// (CPM) costs during this period.
	CostMicros *int64 `protobuf:"varint,169,opt,name=cost_micros,json=costMicros,proto3,oneof" json:"cost_micros,omitempty"`
	// The cost of ad interactions divided by all conversions.
	CostPerAllConversions *float64 `protobuf:"fixed64,170,opt,name=cost_per_all_conversions,json=costPerAllConversions,proto3,oneof" json:"cost_per_all_conversions,omitempty"`
	// The cost of ad interactions divided by conversions. This only includes
	// conversion actions which include_in_conversions_metric attribute is set to
	// true. If you use conversion-based bidding, your bid strategies will
	// optimize for these conversions.
	CostPerConversion *float64 `protobuf:"fixed64,171,opt,name=cost_per_conversion,json=costPerConversion,proto3,oneof" json:"cost_per_conversion,omitempty"`
	// The cost of ad interactions divided by current model attributed
	// conversions. This only includes conversion actions which
	// include_in_conversions_metric attribute is set to true. If you use
	// conversion-based bidding, your bid strategies will optimize for these
	// conversions.
	CostPerCurrentModelAttributedConversion *float64 `protobuf:"fixed64,172,opt,name=cost_per_current_model_attributed_conversion,json=costPerCurrentModelAttributedConversion,proto3,oneof" json:"cost_per_current_model_attributed_conversion,omitempty"`
	// Conversions from when a customer clicks on a Google Ads ad on one device,
	// then converts on a different device or browser.
	// Cross-device conversions are already included in all_conversions.
	CrossDeviceConversions *float64 `protobuf:"fixed64,173,opt,name=cross_device_conversions,json=crossDeviceConversions,proto3,oneof" json:"cross_device_conversions,omitempty"`
	// The sum of the value of cross-device conversions, in micros.
	CrossDeviceConversionsValueMicros *int64 `protobuf:"varint,312,opt,name=cross_device_conversions_value_micros,json=crossDeviceConversionsValueMicros,proto3,oneof" json:"cross_device_conversions_value_micros,omitempty"`
	// The number of clicks your ad receives (Clicks) divided by the number
	// of times your ad is shown (Impressions).
	Ctr *float64 `protobuf:"fixed64,174,opt,name=ctr,proto3,oneof" json:"ctr,omitempty"`
	// Shows how your historic conversions data would look under the attribution
	// model you've currently selected. This only includes conversion actions
	// which include_in_conversions_metric attribute is set to true. If you use
	// conversion-based bidding, your bid strategies will optimize for these
	// conversions.
	CurrentModelAttributedConversions *float64 `protobuf:"fixed64,175,opt,name=current_model_attributed_conversions,json=currentModelAttributedConversions,proto3,oneof" json:"current_model_attributed_conversions,omitempty"`
	// Current model attributed conversions from interactions divided by the
	// number of ad interactions (such as clicks for text ads or views for video
	// ads). This only includes conversion actions which
	// include_in_conversions_metric attribute is set to true. If you use
	// conversion-based bidding, your bid strategies will optimize for these
	// conversions.
	CurrentModelAttributedConversionsFromInteractionsRate *float64 `protobuf:"fixed64,176,opt,name=current_model_attributed_conversions_from_interactions_rate,json=currentModelAttributedConversionsFromInteractionsRate,proto3,oneof" json:"current_model_attributed_conversions_from_interactions_rate,omitempty"`
	// The value of current model attributed conversions from interactions divided
	// by the number of ad interactions. This only includes conversion actions
	// which include_in_conversions_metric attribute is set to true. If you use
	// conversion-based bidding, your bid strategies will optimize for these
	// conversions.
	CurrentModelAttributedConversionsFromInteractionsValuePerInteraction *float64 `protobuf:"fixed64,177,opt,name=current_model_attributed_conversions_from_interactions_value_per_interaction,json=currentModelAttributedConversionsFromInteractionsValuePerInteraction,proto3,oneof" json:"current_model_attributed_conversions_from_interactions_value_per_interaction,omitempty"`
	// The value of current model attributed conversions. This only includes
	// conversion actions which include_in_conversions_metric attribute is set to
	// true. If you use conversion-based bidding, your bid strategies will
	// optimize for these conversions.
	CurrentModelAttributedConversionsValue *float64 `protobuf:"fixed64,178,opt,name=current_model_attributed_conversions_value,json=currentModelAttributedConversionsValue,proto3,oneof" json:"current_model_attributed_conversions_value,omitempty"`
	// The value of current model attributed conversions divided by the cost of ad
	// interactions. This only includes conversion actions which
	// include_in_conversions_metric attribute is set to true. If you use
	// conversion-based bidding, your bid strategies will optimize for these
	// conversions.
	CurrentModelAttributedConversionsValuePerCost *float64 `protobuf:"fixed64,179,opt,name=current_model_attributed_conversions_value_per_cost,json=currentModelAttributedConversionsValuePerCost,proto3,oneof" json:"current_model_attributed_conversions_value_per_cost,omitempty"`
	// How often people engage with your ad after it's shown to them. This is the
	// number of ad expansions divided by the number of times your ad is shown.
	EngagementRate *float64 `protobuf:"fixed64,180,opt,name=engagement_rate,json=engagementRate,proto3,oneof" json:"engagement_rate,omitempty"`
	// The number of engagements.
	// An engagement occurs when a viewer expands your Lightbox ad. Also, in the
	// future, other ad types may support engagement metrics.
	Engagements *int64 `protobuf:"varint,181,opt,name=engagements,proto3,oneof" json:"engagements,omitempty"`
	// Average lead value based on clicks.
	HotelAverageLeadValueMicros *float64 `protobuf:"fixed64,213,opt,name=hotel_average_lead_value_micros,json=hotelAverageLeadValueMicros,proto3,oneof" json:"hotel_average_lead_value_micros,omitempty"`
	// Commission bid rate in micros. A 20% commission is represented as
	// 200,000.
	HotelCommissionRateMicros *int64 `protobuf:"varint,256,opt,name=hotel_commission_rate_micros,json=hotelCommissionRateMicros,proto3,oneof" json:"hotel_commission_rate_micros,omitempty"`
	// Expected commission cost. The result of multiplying the commission value
	// times the hotel_commission_rate in advertiser currency.
	HotelExpectedCommissionCost *float64 `protobuf:"fixed64,257,opt,name=hotel_expected_commission_cost,json=hotelExpectedCommissionCost,proto3,oneof" json:"hotel_expected_commission_cost,omitempty"`
	// The average price difference between the price offered by reporting hotel
	// advertiser and the cheapest price offered by the competing advertiser.
	HotelPriceDifferencePercentage *float64 `protobuf:"fixed64,214,opt,name=hotel_price_difference_percentage,json=hotelPriceDifferencePercentage,proto3,oneof" json:"hotel_price_difference_percentage,omitempty"`
	// The number of impressions that hotel partners could have had given their
	// feed performance.
	HotelEligibleImpressions *int64 `protobuf:"varint,215,opt,name=hotel_eligible_impressions,json=hotelEligibleImpressions,proto3,oneof" json:"hotel_eligible_impressions,omitempty"`
	// The creative historical quality score.
	HistoricalCreativeQualityScore enums.QualityScoreBucketEnum_QualityScoreBucket `protobuf:"varint,80,opt,name=historical_creative_quality_score,json=historicalCreativeQualityScore,proto3,enum=google.ads.googleads.v20.enums.QualityScoreBucketEnum_QualityScoreBucket" json:"historical_creative_quality_score,omitempty"`
	// The quality of historical landing page experience.
	HistoricalLandingPageQualityScore enums.QualityScoreBucketEnum_QualityScoreBucket `protobuf:"varint,81,opt,name=historical_landing_page_quality_score,json=historicalLandingPageQualityScore,proto3,enum=google.ads.googleads.v20.enums.QualityScoreBucketEnum_QualityScoreBucket" json:"historical_landing_page_quality_score,omitempty"`
	// The historical quality score.
	HistoricalQualityScore *int64 `protobuf:"varint,216,opt,name=historical_quality_score,json=historicalQualityScore,proto3,oneof" json:"historical_quality_score,omitempty"`
	// The historical search predicted click through rate (CTR).
	HistoricalSearchPredictedCtr enums.QualityScoreBucketEnum_QualityScoreBucket `protobuf:"varint,83,opt,name=historical_search_predicted_ctr,json=historicalSearchPredictedCtr,proto3,enum=google.ads.googleads.v20.enums.QualityScoreBucketEnum_QualityScoreBucket" json:"historical_search_predicted_ctr,omitempty"`
	// The number of times the ad was forwarded to someone else as a message.
	GmailForwards *int64 `protobuf:"varint,217,opt,name=gmail_forwards,json=gmailForwards,proto3,oneof" json:"gmail_forwards,omitempty"`
	// The number of times someone has saved your Gmail ad to their inbox as a
	// message.
	GmailSaves *int64 `protobuf:"varint,218,opt,name=gmail_saves,json=gmailSaves,proto3,oneof" json:"gmail_saves,omitempty"`
	// The number of clicks to the landing page on the expanded state of Gmail
	// ads.
	GmailSecondaryClicks *int64 `protobuf:"varint,219,opt,name=gmail_secondary_clicks,json=gmailSecondaryClicks,proto3,oneof" json:"gmail_secondary_clicks,omitempty"`
	// The number of times a store's location-based ad was shown.
	//
	// This metric applies to feed items only.
	ImpressionsFromStoreReach *int64 `protobuf:"varint,220,opt,name=impressions_from_store_reach,json=impressionsFromStoreReach,proto3,oneof" json:"impressions_from_store_reach,omitempty"`
	// Count of how often your ad has appeared on a search results page or
	// website on the Google Network.
	Impressions *int64 `protobuf:"varint,221,opt,name=impressions,proto3,oneof" json:"impressions,omitempty"`
	// How often people interact with your ad after it is shown to them.
	// This is the number of interactions divided by the number of times your ad
	// is shown.
	InteractionRate *float64 `protobuf:"fixed64,222,opt,name=interaction_rate,json=interactionRate,proto3,oneof" json:"interaction_rate,omitempty"`
	// The number of interactions.
	// An interaction is the main user action associated with an ad format-clicks
	// for text and shopping ads, views for video ads, and so on.
	Interactions *int64 `protobuf:"varint,223,opt,name=interactions,proto3,oneof" json:"interactions,omitempty"`
	// The types of payable and free interactions.
	InteractionEventTypes []enums.InteractionEventTypeEnum_InteractionEventType `protobuf:"varint,100,rep,packed,name=interaction_event_types,json=interactionEventTypes,proto3,enum=google.ads.googleads.v20.enums.InteractionEventTypeEnum_InteractionEventType" json:"interaction_event_types,omitempty"`
	// The percentage of clicks filtered out of your total number of clicks
	// (filtered + non-filtered clicks) during the reporting period.
	InvalidClickRate *float64 `protobuf:"fixed64,224,opt,name=invalid_click_rate,json=invalidClickRate,proto3,oneof" json:"invalid_click_rate,omitempty"`
	// Number of clicks Google considers illegitimate and doesn't charge you for.
	InvalidClicks *int64 `protobuf:"varint,225,opt,name=invalid_clicks,json=invalidClicks,proto3,oneof" json:"invalid_clicks,omitempty"`
	// The percentage of clicks that have been filtered out of your total number
	// of clicks (filtered + non-filtered clicks) due to being general invalid
	// clicks. These are clicks Google considers illegitimate that are detected
	// through routine means of filtration (that is, known invalid data-center
	// traffic, bots and spiders or other crawlers, irregular patterns, etc).
	// You're not charged for them, and they don't affect your account statistics.
	// See the help page at
	// https://support.google.com/campaignmanager/answer/6076504 for
	// details.
	GeneralInvalidClickRate *float64 `protobuf:"fixed64,370,opt,name=general_invalid_click_rate,json=generalInvalidClickRate,proto3,oneof" json:"general_invalid_click_rate,omitempty"`
	// Number of general invalid clicks. These are a subset of your invalid clicks
	// that are detected through routine means of filtration (such as known
	// invalid data-center traffic, bots and spiders or other crawlers, irregular
	// patterns, etc.). You're not charged for them, and they don't affect your
	// account statistics. See the help page at
	// https://support.google.com/campaignmanager/answer/6076504 for
	// details.
	GeneralInvalidClicks *int64 `protobuf:"varint,371,opt,name=general_invalid_clicks,json=generalInvalidClicks,proto3,oneof" json:"general_invalid_clicks,omitempty"`
	// Number of message chats initiated for Click To Message impressions that
	// were message tracking eligible.
	MessageChats *int64 `protobuf:"varint,226,opt,name=message_chats,json=messageChats,proto3,oneof" json:"message_chats,omitempty"`
	// Number of Click To Message impressions that were message tracking eligible.
	MessageImpressions *int64 `protobuf:"varint,227,opt,name=message_impressions,json=messageImpressions,proto3,oneof" json:"message_impressions,omitempty"`
	// Number of message chats initiated (message_chats) divided by the number
	// of message impressions (message_impressions).
	// Rate at which a user initiates a message chat from an ad impression with
	// a messaging option and message tracking enabled.
	// Note that this rate can be more than 1.0 for a given message impression.
	MessageChatRate *float64 `protobuf:"fixed64,228,opt,name=message_chat_rate,json=messageChatRate,proto3,oneof" json:"message_chat_rate,omitempty"`
	// The percentage of mobile clicks that go to a mobile-friendly page.
	MobileFriendlyClicksPercentage *float64 `protobuf:"fixed64,229,opt,name=mobile_friendly_clicks_percentage,json=mobileFriendlyClicksPercentage,proto3,oneof" json:"mobile_friendly_clicks_percentage,omitempty"`
	// Total optimization score uplift of all recommendations.
	OptimizationScoreUplift *float64 `protobuf:"fixed64,247,opt,name=optimization_score_uplift,json=optimizationScoreUplift,proto3,oneof" json:"optimization_score_uplift,omitempty"`
	// URL for the optimization score page in the Google Ads web interface.
	// This metric can be selected from `customer` or `campaign`, and can be
	// segmented by `segments.recommendation_type`. For example, `SELECT
	// metrics.optimization_score_url, segments.recommendation_type FROM
	// customer` will return a URL for each unique (customer, recommendation_type)
	// combination.
	OptimizationScoreUrl *string `protobuf:"bytes,248,opt,name=optimization_score_url,json=optimizationScoreUrl,proto3,oneof" json:"optimization_score_url,omitempty"`
	// The number of times someone clicked your site's listing in the unpaid
	// results for a particular query. See the help page at
	// https://support.google.com/google-ads/answer/3097241 for details.
	OrganicClicks *int64 `protobuf:"varint,230,opt,name=organic_clicks,json=organicClicks,proto3,oneof" json:"organic_clicks,omitempty"`
	// The number of times someone clicked your site's listing in the unpaid
	// results (organic_clicks) divided by the total number of searches that
	// returned pages from your site (organic_queries). See the help page at
	// https://support.google.com/google-ads/answer/3097241 for details.
	OrganicClicksPerQuery *float64 `protobuf:"fixed64,231,opt,name=organic_clicks_per_query,json=organicClicksPerQuery,proto3,oneof" json:"organic_clicks_per_query,omitempty"`
	// The number of listings for your site in the unpaid search results. See the
	// help page at https://support.google.com/google-ads/answer/3097241 for
	// details.
	OrganicImpressions *int64 `protobuf:"varint,232,opt,name=organic_impressions,json=organicImpressions,proto3,oneof" json:"organic_impressions,omitempty"`
	// The number of times a page from your site was listed in the unpaid search
	// results (organic_impressions) divided by the number of searches returning
	// your site's listing in the unpaid results (organic_queries). See the help
	// page at https://support.google.com/google-ads/answer/3097241 for details.
	OrganicImpressionsPerQuery *float64 `protobuf:"fixed64,233,opt,name=organic_impressions_per_query,json=organicImpressionsPerQuery,proto3,oneof" json:"organic_impressions_per_query,omitempty"`
	// The total number of searches that returned your site's listing in the
	// unpaid results. See the help page at
	// https://support.google.com/google-ads/answer/3097241 for details.
	OrganicQueries *int64 `protobuf:"varint,234,opt,name=organic_queries,json=organicQueries,proto3,oneof" json:"organic_queries,omitempty"`
	// Percentage of first-time sessions (from people who had never visited your
	// site before). Imported from Google Analytics.
	PercentNewVisitors *float64 `protobuf:"fixed64,235,opt,name=percent_new_visitors,json=percentNewVisitors,proto3,oneof" json:"percent_new_visitors,omitempty"`
	// Number of offline phone calls.
	PhoneCalls *int64 `protobuf:"varint,236,opt,name=phone_calls,json=phoneCalls,proto3,oneof" json:"phone_calls,omitempty"`
	// Number of offline phone impressions.
	PhoneImpressions *int64 `protobuf:"varint,237,opt,name=phone_impressions,json=phoneImpressions,proto3,oneof" json:"phone_impressions,omitempty"`
	// Number of phone calls received (phone_calls) divided by the number of
	// times your phone number is shown (phone_impressions).
	PhoneThroughRate *float64 `protobuf:"fixed64,238,opt,name=phone_through_rate,json=phoneThroughRate,proto3,oneof" json:"phone_through_rate,omitempty"`
	// Your clickthrough rate (Ctr) divided by the average clickthrough rate of
	// all advertisers on the websites that show your ads. Measures how your ads
	// perform on Display Network sites compared to other ads on the same sites.
	RelativeCtr *float64 `protobuf:"fixed64,239,opt,name=relative_ctr,json=relativeCtr,proto3,oneof" json:"relative_ctr,omitempty"`
	// The percentage of the customer's Shopping or Search ad impressions that are
	// shown in the most prominent Shopping position. See
	// https://support.google.com/google-ads/answer/7501826
	// for details. Any value below 0.1 is reported as 0.0999.
	SearchAbsoluteTopImpressionShare *float64 `protobuf:"fixed64,136,opt,name=search_absolute_top_impression_share,json=searchAbsoluteTopImpressionShare,proto3,oneof" json:"search_absolute_top_impression_share,omitempty"`
	// The number estimating how often your ad wasn't the very first ad among the
	// top ads in the search results due to a low budget. Note: Search
	// budget lost absolute top impression share is reported in the range of 0 to
	// 0.9. Any value above 0.9 is reported as 0.9001.
	SearchBudgetLostAbsoluteTopImpressionShare *float64 `protobuf:"fixed64,137,opt,name=search_budget_lost_absolute_top_impression_share,json=searchBudgetLostAbsoluteTopImpressionShare,proto3,oneof" json:"search_budget_lost_absolute_top_impression_share,omitempty"`
	// The estimated percent of times that your ad was eligible to show on the
	// Search Network but didn't because your budget was too low. Note: Search
	// budget lost impression share is reported in the range of 0 to 0.9. Any
	// value above 0.9 is reported as 0.9001.
	SearchBudgetLostImpressionShare *float64 `protobuf:"fixed64,138,opt,name=search_budget_lost_impression_share,json=searchBudgetLostImpressionShare,proto3,oneof" json:"search_budget_lost_impression_share,omitempty"`
	// The number estimating how often your ad didn't show adjacent to the top
	// organic search results due to a low budget. Note: Search
	// budget lost top impression share is reported in the range of 0 to 0.9. Any
	// value above 0.9 is reported as 0.9001.
	SearchBudgetLostTopImpressionShare *float64 `protobuf:"fixed64,139,opt,name=search_budget_lost_top_impression_share,json=searchBudgetLostTopImpressionShare,proto3,oneof" json:"search_budget_lost_top_impression_share,omitempty"`
	// The number of clicks you've received on the Search Network
	// divided by the estimated number of clicks you were eligible to receive.
	// Note: Search click share is reported in the range of 0.1 to 1. Any value
	// below 0.1 is reported as 0.0999.
	SearchClickShare *float64 `protobuf:"fixed64,140,opt,name=search_click_share,json=searchClickShare,proto3,oneof" json:"search_click_share,omitempty"`
	// The impressions you've received divided by the estimated number of
	// impressions you were eligible to receive on the Search Network for search
	// terms that matched your keywords exactly (or were close variants of your
	// keyword), regardless of your keyword match types. Note: Search exact match
	// impression share is reported in the range of 0.1 to 1. Any value below 0.1
	// is reported as 0.0999.
	SearchExactMatchImpressionShare *float64 `protobuf:"fixed64,141,opt,name=search_exact_match_impression_share,json=searchExactMatchImpressionShare,proto3,oneof" json:"search_exact_match_impression_share,omitempty"`
	// The impressions you've received on the Search Network divided
	// by the estimated number of impressions you were eligible to receive.
	// Note: Search impression share is reported in the range of 0.1 to 1. Any
	// value below 0.1 is reported as 0.0999.
	SearchImpressionShare *float64 `protobuf:"fixed64,142,opt,name=search_impression_share,json=searchImpressionShare,proto3,oneof" json:"search_impression_share,omitempty"`
	// The number estimating how often your ad wasn't the very first ad among the
	// top ads in the search results due to poor Ad Rank.
	// Note: Search rank lost absolute top impression share is reported in the
	// range of 0 to 0.9. Any value above 0.9 is reported as 0.9001.
	SearchRankLostAbsoluteTopImpressionShare *float64 `protobuf:"fixed64,143,opt,name=search_rank_lost_absolute_top_impression_share,json=searchRankLostAbsoluteTopImpressionShare,proto3,oneof" json:"search_rank_lost_absolute_top_impression_share,omitempty"`
	// The estimated percentage of impressions on the Search Network
	// that your ads didn't receive due to poor Ad Rank.
	// Note: Search rank lost impression share is reported in the range of 0 to
	// 0.9. Any value above 0.9 is reported as 0.9001.
	SearchRankLostImpressionShare *float64 `protobuf:"fixed64,144,opt,name=search_rank_lost_impression_share,json=searchRankLostImpressionShare,proto3,oneof" json:"search_rank_lost_impression_share,omitempty"`
	// The number estimating how often your ad didn't show adjacent to the top
	// organic search results due to poor Ad Rank.
	// Note: Search rank lost top impression share is reported in the range of 0
	// to 0.9. Any value above 0.9 is reported as 0.9001.
	SearchRankLostTopImpressionShare *float64 `protobuf:"fixed64,145,opt,name=search_rank_lost_top_impression_share,json=searchRankLostTopImpressionShare,proto3,oneof" json:"search_rank_lost_top_impression_share,omitempty"`
	// The impressions you've received among the top ads compared to the estimated
	// number of impressions you were eligible to receive among the top ads.
	// Note: Search top impression share is reported in the range of 0.1 to 1. Any
	// value below 0.1 is reported as 0.0999.
	//
	// Top ads are generally above the top organic results, although they may show
	// below the top organic results on certain queries.
	SearchTopImpressionShare *float64 `protobuf:"fixed64,146,opt,name=search_top_impression_share,json=searchTopImpressionShare,proto3,oneof" json:"search_top_impression_share,omitempty"`
	// Search volume range for a search term insight category.
	SearchVolume *SearchVolumeRange `protobuf:"bytes,295,opt,name=search_volume,json=searchVolume,proto3,oneof" json:"search_volume,omitempty"`
	// A measure of how quickly your page loads after clicks on your mobile ads.
	// The score is a range from 1 to 10, 10 being the fastest.
	SpeedScore *int64 `protobuf:"varint,147,opt,name=speed_score,json=speedScore,proto3,oneof" json:"speed_score,omitempty"`
	// The average Target CPA, or unset if not available (for example, for
	// campaigns that had traffic from portfolio bidding strategies or non-tCPA).
	AverageTargetCpaMicros *int64 `protobuf:"varint,290,opt,name=average_target_cpa_micros,json=averageTargetCpaMicros,proto3,oneof" json:"average_target_cpa_micros,omitempty"`
	// The average Target ROAS, or unset if not available (for example, for
	// campaigns that had traffic from portfolio bidding strategies or non-tROAS).
	AverageTargetRoas *float64 `protobuf:"fixed64,250,opt,name=average_target_roas,json=averageTargetRoas,proto3,oneof" json:"average_target_roas,omitempty"`
	// The percent of your ad impressions that are shown adjacent to the top
	// organic search results.
	TopImpressionPercentage *float64 `protobuf:"fixed64,148,opt,name=top_impression_percentage,json=topImpressionPercentage,proto3,oneof" json:"top_impression_percentage,omitempty"`
	// The percentage of ad clicks to Accelerated Mobile Pages (AMP) landing pages
	// that reach a valid AMP page.
	ValidAcceleratedMobilePagesClicksPercentage *float64 `protobuf:"fixed64,149,opt,name=valid_accelerated_mobile_pages_clicks_percentage,json=validAcceleratedMobilePagesClicksPercentage,proto3,oneof" json:"valid_accelerated_mobile_pages_clicks_percentage,omitempty"`
	// The value of all conversions divided by the number of all conversions.
	ValuePerAllConversions *float64 `protobuf:"fixed64,150,opt,name=value_per_all_conversions,json=valuePerAllConversions,proto3,oneof" json:"value_per_all_conversions,omitempty"`
	// The value of all conversions divided by the number of all conversions. When
	// this column is selected with date, the values in date column means the
	// conversion date. Details for the by_conversion_date columns are available
	// at https://support.google.com/google-ads/answer/9549009.
	ValuePerAllConversionsByConversionDate *float64 `protobuf:"fixed64,244,opt,name=value_per_all_conversions_by_conversion_date,json=valuePerAllConversionsByConversionDate,proto3,oneof" json:"value_per_all_conversions_by_conversion_date,omitempty"`
	// The value of conversions divided by the number of conversions. This only
	// includes conversion actions which include_in_conversions_metric attribute
	// is set to true. If you use conversion-based bidding, your bid strategies
	// will optimize for these conversions.
	ValuePerConversion *float64 `protobuf:"fixed64,151,opt,name=value_per_conversion,json=valuePerConversion,proto3,oneof" json:"value_per_conversion,omitempty"`
	// The value of conversions divided by the number of conversions. This only
	// includes conversion actions which include_in_conversions_metric attribute
	// is set to true. If you use conversion-based bidding, your bid strategies
	// will optimize for these conversions. When this column is selected with
	// date, the values in date column means the conversion date. Details for the
	// by_conversion_date columns are available at
	// https://support.google.com/google-ads/answer/9549009.
	ValuePerConversionsByConversionDate *float64 `protobuf:"fixed64,245,opt,name=value_per_conversions_by_conversion_date,json=valuePerConversionsByConversionDate,proto3,oneof" json:"value_per_conversions_by_conversion_date,omitempty"`
	// The value of current model attributed conversions divided by the number of
	// the conversions. This only includes conversion actions which
	// include_in_conversions_metric attribute is set to true. If you use
	// conversion-based bidding, your bid strategies will optimize for these
	// conversions.
	ValuePerCurrentModelAttributedConversion *float64 `protobuf:"fixed64,152,opt,name=value_per_current_model_attributed_conversion,json=valuePerCurrentModelAttributedConversion,proto3,oneof" json:"value_per_current_model_attributed_conversion,omitempty"`
	// Percentage of impressions where the viewer watched all of your video.
	VideoQuartileP100Rate *float64 `protobuf:"fixed64,132,opt,name=video_quartile_p100_rate,json=videoQuartileP100Rate,proto3,oneof" json:"video_quartile_p100_rate,omitempty"`
	// Percentage of impressions where the viewer watched 25% of your video.
	VideoQuartileP25Rate *float64 `protobuf:"fixed64,133,opt,name=video_quartile_p25_rate,json=videoQuartileP25Rate,proto3,oneof" json:"video_quartile_p25_rate,omitempty"`
	// Percentage of impressions where the viewer watched 50% of your video.
	VideoQuartileP50Rate *float64 `protobuf:"fixed64,134,opt,name=video_quartile_p50_rate,json=videoQuartileP50Rate,proto3,oneof" json:"video_quartile_p50_rate,omitempty"`
	// Percentage of impressions where the viewer watched 75% of your video.
	VideoQuartileP75Rate *float64 `protobuf:"fixed64,135,opt,name=video_quartile_p75_rate,json=videoQuartileP75Rate,proto3,oneof" json:"video_quartile_p75_rate,omitempty"`
	// The number of views your TrueView video ad receives divided by its number
	// of impressions, including thumbnail impressions for TrueView in-display
	// ads.
	VideoViewRate *float64 `protobuf:"fixed64,153,opt,name=video_view_rate,json=videoViewRate,proto3,oneof" json:"video_view_rate,omitempty"`
	// The number of times your video ads were viewed.
	VideoViews *int64 `protobuf:"varint,154,opt,name=video_views,json=videoViews,proto3,oneof" json:"video_views,omitempty"`
	// The total number of view-through conversions.
	// These happen when a customer sees an image or rich media ad, then later
	// completes a conversion on your site without interacting with (for example,
	// clicking on) another ad.
	ViewThroughConversions *int64 `protobuf:"varint,155,opt,name=view_through_conversions,json=viewThroughConversions,proto3,oneof" json:"view_through_conversions,omitempty"`
	// The number of iOS Store Kit Ad Network conversions.
	SkAdNetworkInstalls int64 `protobuf:"varint,246,opt,name=sk_ad_network_installs,json=skAdNetworkInstalls,proto3" json:"sk_ad_network_installs,omitempty"`
	// The total number of iOS Store Kit Ad Network conversions.
	SkAdNetworkTotalConversions int64 `protobuf:"varint,292,opt,name=sk_ad_network_total_conversions,json=skAdNetworkTotalConversions,proto3" json:"sk_ad_network_total_conversions,omitempty"`
	// Clicks from properties not owned by the publisher for which the traffic
	// the publisher has paid for or acquired through incentivized activity
	PublisherPurchasedClicks int64 `protobuf:"varint,264,opt,name=publisher_purchased_clicks,json=publisherPurchasedClicks,proto3" json:"publisher_purchased_clicks,omitempty"`
	// Clicks from properties for which the traffic the publisher has not paid
	// for or acquired through incentivized activity
	PublisherOrganicClicks int64 `protobuf:"varint,265,opt,name=publisher_organic_clicks,json=publisherOrganicClicks,proto3" json:"publisher_organic_clicks,omitempty"`
	// Clicks from traffic which is not identified as "Publisher Purchased" or
	// "Publisher Organic"
	PublisherUnknownClicks int64 `protobuf:"varint,266,opt,name=publisher_unknown_clicks,json=publisherUnknownClicks,proto3" json:"publisher_unknown_clicks,omitempty"`
	// Number of call button clicks on any location surface after a chargeable ad
	// event (click or impression). This measure is coming from Asset based
	// location.
	AllConversionsFromLocationAssetClickToCall *float64 `protobuf:"fixed64,267,opt,name=all_conversions_from_location_asset_click_to_call,json=allConversionsFromLocationAssetClickToCall,proto3,oneof" json:"all_conversions_from_location_asset_click_to_call,omitempty"`
	// Number of driving directions clicks on any location surface after a
	// chargeable ad event (click or impression). This measure is coming
	// from Asset based location.
	AllConversionsFromLocationAssetDirections *float64 `protobuf:"fixed64,268,opt,name=all_conversions_from_location_asset_directions,json=allConversionsFromLocationAssetDirections,proto3,oneof" json:"all_conversions_from_location_asset_directions,omitempty"`
	// Number of menu link clicks on any location surface after a chargeable ad
	// event (click or impression). This measure is coming from Asset based
	// location.
	AllConversionsFromLocationAssetMenu *float64 `protobuf:"fixed64,269,opt,name=all_conversions_from_location_asset_menu,json=allConversionsFromLocationAssetMenu,proto3,oneof" json:"all_conversions_from_location_asset_menu,omitempty"`
	// Number of order clicks on any location surface after a chargeable ad event
	// (click or impression). This measure is coming from Asset based
	// location.
	AllConversionsFromLocationAssetOrder *float64 `protobuf:"fixed64,270,opt,name=all_conversions_from_location_asset_order,json=allConversionsFromLocationAssetOrder,proto3,oneof" json:"all_conversions_from_location_asset_order,omitempty"`
	// Number of other types of local action clicks on any location surface after
	// a chargeable ad event (click or impression). This measure is coming
	// from Asset based location.
	AllConversionsFromLocationAssetOtherEngagement *float64 `protobuf:"fixed64,271,opt,name=all_conversions_from_location_asset_other_engagement,json=allConversionsFromLocationAssetOtherEngagement,proto3,oneof" json:"all_conversions_from_location_asset_other_engagement,omitempty"`
	// Estimated number of visits to the store after a chargeable
	// ad event (click or impression). This measure is coming from Asset
	// based location.
	AllConversionsFromLocationAssetStoreVisits *float64 `protobuf:"fixed64,272,opt,name=all_conversions_from_location_asset_store_visits,json=allConversionsFromLocationAssetStoreVisits,proto3,oneof" json:"all_conversions_from_location_asset_store_visits,omitempty"`
	// Number of website URL clicks on any location surface after a chargeable ad
	// event (click or impression). This measure is coming from Asset based
	// location.
	AllConversionsFromLocationAssetWebsite *float64 `protobuf:"fixed64,273,opt,name=all_conversions_from_location_asset_website,json=allConversionsFromLocationAssetWebsite,proto3,oneof" json:"all_conversions_from_location_asset_website,omitempty"`
	// Number of impressions in which the store location was shown or the location
	// was used for targeting. This measure is coming from Asset based
	// location.
	EligibleImpressionsFromLocationAssetStoreReach *int64 `protobuf:"varint,274,opt,name=eligible_impressions_from_location_asset_store_reach,json=eligibleImpressionsFromLocationAssetStoreReach,proto3,oneof" json:"eligible_impressions_from_location_asset_store_reach,omitempty"`
	// Number of call button clicks on any location surface after an impression.
	// This measure is coming from Asset based location.
	ViewThroughConversionsFromLocationAssetClickToCall *float64 `protobuf:"fixed64,275,opt,name=view_through_conversions_from_location_asset_click_to_call,json=viewThroughConversionsFromLocationAssetClickToCall,proto3,oneof" json:"view_through_conversions_from_location_asset_click_to_call,omitempty"`
	// Number of driving directions clicks on any location surface after an
	// impression. This measure is coming from Asset based location.
	ViewThroughConversionsFromLocationAssetDirections *float64 `protobuf:"fixed64,276,opt,name=view_through_conversions_from_location_asset_directions,json=viewThroughConversionsFromLocationAssetDirections,proto3,oneof" json:"view_through_conversions_from_location_asset_directions,omitempty"`
	// Number of menu link clicks on any location surface after an impression.
	// This measure is coming from Asset based location.
	ViewThroughConversionsFromLocationAssetMenu *float64 `protobuf:"fixed64,277,opt,name=view_through_conversions_from_location_asset_menu,json=viewThroughConversionsFromLocationAssetMenu,proto3,oneof" json:"view_through_conversions_from_location_asset_menu,omitempty"`
	// Number of order clicks on any location surface after an impression. This
	// measure is coming from Asset based location.
	ViewThroughConversionsFromLocationAssetOrder *float64 `protobuf:"fixed64,278,opt,name=view_through_conversions_from_location_asset_order,json=viewThroughConversionsFromLocationAssetOrder,proto3,oneof" json:"view_through_conversions_from_location_asset_order,omitempty"`
	// Number of other types of local action clicks on any location surface after
	// an impression. This measure is coming from Asset based location.
	ViewThroughConversionsFromLocationAssetOtherEngagement *float64 `protobuf:"fixed64,279,opt,name=view_through_conversions_from_location_asset_other_engagement,json=viewThroughConversionsFromLocationAssetOtherEngagement,proto3,oneof" json:"view_through_conversions_from_location_asset_other_engagement,omitempty"`
	// Estimated number of visits to the store after an impression.
	// This measure is coming from Asset based location.
	ViewThroughConversionsFromLocationAssetStoreVisits *float64 `protobuf:"fixed64,280,opt,name=view_through_conversions_from_location_asset_store_visits,json=viewThroughConversionsFromLocationAssetStoreVisits,proto3,oneof" json:"view_through_conversions_from_location_asset_store_visits,omitempty"`
	// Number of website URL clicks on any location surface after an impression.
	// This measure is coming from Asset based location.
	ViewThroughConversionsFromLocationAssetWebsite *float64 `protobuf:"fixed64,281,opt,name=view_through_conversions_from_location_asset_website,json=viewThroughConversionsFromLocationAssetWebsite,proto3,oneof" json:"view_through_conversions_from_location_asset_website,omitempty"`
	// Orders is the total number of purchase conversions you received attributed
	// to your ads.
	// How it works: You report conversions with cart data for
	// completed purchases on your website. If a conversion is attributed to
	// previous interactions with your ads (clicks for text or Shopping ads, views
	// for video ads etc.) it's counted as an order.
	// Example: Someone clicked on a Shopping ad for a hat then bought the same
	// hat and a shirt in an order on your website. Even though they bought 2
	// products, this would count as 1 order.
	// This metric is only available if you report conversions with cart data.
	Orders *float64 `protobuf:"fixed64,296,opt,name=orders,proto3,oneof" json:"orders,omitempty"`
	// Average order value is the average revenue you made per order attributed to
	// your ads.
	// How it works: You report conversions with cart data for completed purchases
	// on your website. Average order value is the total revenue from your orders
	// divided by the total number of orders.
	// Example: You received 3 orders which made $10, $15 and $20 worth of
	// revenue. The average order value is $15 = ($10 + $15 + $20)/3.
	// This metric is only available if you report conversions with cart data.
	AverageOrderValueMicros *int64 `protobuf:"varint,297,opt,name=average_order_value_micros,json=averageOrderValueMicros,proto3,oneof" json:"average_order_value_micros,omitempty"`
	// Average cart size is the average number of products in each order
	// attributed to your ads.
	// How it works: You report conversions with cart data for completed purchases
	// on your website. Average cart size is the total number of products sold
	// divided by the total number of orders you received.
	// Example: You received 2 orders, the first included 3 products and the
	// second included 2. The average cart size is 2.5 products = (3+2)/2.
	// This metric is only available if you report conversions with cart data.
	AverageCartSize *float64 `protobuf:"fixed64,298,opt,name=average_cart_size,json=averageCartSize,proto3,oneof" json:"average_cart_size,omitempty"`
	// Cost of goods sold (COGS) is the total cost of the products you sold in
	// orders attributed to your ads.
	// How it works: You can add a cost of goods sold value to every product in
	// Merchant Center. If you report conversions with cart data, the products you
	// sold are matched with their cost of goods sold value and this can be used
	// to calculate the gross profit you made on each order.
	// Example: Someone clicked on a Shopping ad for a hat then bought the same
	// hat and a shirt. The hat has a cost of goods sold value of $3, the shirt
	// has a cost of goods sold value of $5. The cost of goods sold for this order
	// is $8 = $3 + $5.
	// This metric is only available if you report conversions with cart data.
	CostOfGoodsSoldMicros *int64 `protobuf:"varint,299,opt,name=cost_of_goods_sold_micros,json=costOfGoodsSoldMicros,proto3,oneof" json:"cost_of_goods_sold_micros,omitempty"`
	// Gross profit is the profit you made from orders attributed to your ads
	// minus the cost of goods sold (COGS).
	// How it works: Gross profit is the revenue you made from sales attributed to
	// your ads minus cost of goods sold. Gross profit calculations only include
	// products that have a cost of goods sold value in Merchant Center.
	// Example: Someone clicked on a Shopping ad for a hat then bought the same
	// hat and a shirt in an order from your website. The hat is priced $10 and
	// the shirt is priced $20. The hat has a cost of goods sold value of $3, but
	// the shirt has no cost of goods sold value. Gross profit for this order will
	// only take into account the hat, so it's $7 = $10 - $3.
	// This metric is only available if you report conversions with cart data.
	GrossProfitMicros *int64 `protobuf:"varint,300,opt,name=gross_profit_micros,json=grossProfitMicros,proto3,oneof" json:"gross_profit_micros,omitempty"`
	// Gross profit margin is the percentage gross profit you made from orders
	// attributed to your ads, after taking out the cost of goods sold (COGS).
	// How it works: You report conversions with cart data for completed purchases
	// on your website. Gross profit margin is the gross profit you made divided
	// by your total revenue and multiplied by 100%. Gross profit margin
	// calculations only include products that have a cost of goods sold value in
	// Merchant Center.
	// Example: Someone bought a hat and a shirt in an order on your website. The
	// hat is priced $10 and has a cost of goods sold value of $3. The shirt is
	// priced $20 but has no cost of goods sold value. Gross profit margin for
	// this order will only take into account the hat because it has a cost of
	// goods sold value, so it's 70% = ($10 - $3)/$10 x 100%.
	// This metric is only available if you report conversions with cart data.
	GrossProfitMargin *float64 `protobuf:"fixed64,301,opt,name=gross_profit_margin,json=grossProfitMargin,proto3,oneof" json:"gross_profit_margin,omitempty"`
	// Revenue is the total amount you made from orders attributed to your ads.
	// How it works: You report conversions with cart data for completed purchases
	// on your website. Revenue is the total value of all the orders you received
	// attributed to your ads, minus any discount.
	// Example: Someone clicked on a Shopping ad  for a hat then bought the same
	// hat and a shirt in an order from your website. The hat is priced $10 and
	// the shirt is priced $20. The entire order has a $5 discount. The revenue
	// from this order is $25 = ($10 + $20) - $5.
	// This metric is only available if you report conversions with cart data.
	RevenueMicros *int64 `protobuf:"varint,302,opt,name=revenue_micros,json=revenueMicros,proto3,oneof" json:"revenue_micros,omitempty"`
	// Units sold is the total number of products sold from orders attributed to
	// your ads.
	// How it works: You report conversions with cart data for completed purchases
	// on your website. Units sold is the total number of products sold from all
	// orders attributed to your ads.
	// Example: Someone clicked on a Shopping ad for a hat then bought the same
	// hat, a shirt and a jacket. The units sold in this order is 3.
	// This metric is only available if you report conversions with cart data.
	UnitsSold *float64 `protobuf:"fixed64,303,opt,name=units_sold,json=unitsSold,proto3,oneof" json:"units_sold,omitempty"`
	// Cross-sell cost of goods sold (COGS) is the total cost of products sold as
	// a result of advertising a different product.
	// How it works: You report conversions with cart data for completed purchases
	// on your website. If the ad that was interacted with before the purchase has
	// an associated product (see Shopping Ads) then this product is considered
	// the advertised product. Any product included in the order the customer
	// places is a sold product. If these products don't match then this is
	// considered cross-sell. Cross-sell cost of goods sold is the total cost of
	// the products sold that weren't advertised.
	// Example: Someone clicked on a Shopping ad for a hat then bought the same
	// hat and a shirt. The hat has a cost of goods sold value of $3, the shirt
	// has a cost of goods sold value of $5. The cross-sell cost of goods sold for
	// this order is $5.
	// This metric is only available if you report conversions with cart data.
	CrossSellCostOfGoodsSoldMicros *int64 `protobuf:"varint,304,opt,name=cross_sell_cost_of_goods_sold_micros,json=crossSellCostOfGoodsSoldMicros,proto3,oneof" json:"cross_sell_cost_of_goods_sold_micros,omitempty"`
	// Cross-sell gross profit is the profit you made from products sold as a
	// result of advertising a different product, minus cost of goods sold (COGS).
	// How it works: You report conversions with cart data for completed purchases
	// on your website. If the ad that was interacted with before the purchase has
	// an associated product (see Shopping Ads) then this product is considered
	// the advertised product. Any product included in the purchase is a sold
	// product. If these products don't match then this is considered cross-sell.
	// Cross-sell gross profit is the revenue you made from cross-sell attributed
	// to your ads minus the cost of the goods sold.
	// Example: Someone clicked on a Shopping ad for a hat then bought the same
	// hat and a shirt. The shirt is priced $20 and has a cost of goods sold value
	// of $5. The cross-sell gross profit of this order is $15 = $20 - $5.
	// This metric is only available if you report conversions with cart data.
	CrossSellGrossProfitMicros *int64 `protobuf:"varint,305,opt,name=cross_sell_gross_profit_micros,json=crossSellGrossProfitMicros,proto3,oneof" json:"cross_sell_gross_profit_micros,omitempty"`
	// Cross-sell revenue is the total amount you made from products sold as a
	// result of advertising a different product.
	// How it works: You report conversions with cart data for completed purchases
	// on your website. If the ad that was interacted with before the purchase has
	// an associated product (see Shopping Ads) then this product is considered
	// the advertised product. Any product included in the order the customer
	// places is a sold product. If these products don't match then this is
	// considered cross-sell. Cross-sell revenue is the total value you made from
	// cross-sell attributed to your ads.
	// Example: Someone clicked on a Shopping ad for a hat then bought the same
	// hat and a shirt. The hat is priced $10 and the shirt is priced $20. The
	// cross-sell revenue of this order is $20.
	// This metric is only available if you report conversions with cart data.
	CrossSellRevenueMicros *int64 `protobuf:"varint,306,opt,name=cross_sell_revenue_micros,json=crossSellRevenueMicros,proto3,oneof" json:"cross_sell_revenue_micros,omitempty"`
	// Cross-sell units sold is the total number of products sold as a result of
	// advertising a different product.
	// How it works: You report conversions with cart data for completed purchases
	// on your website. If the ad that was interacted with before the purchase has
	// an associated product (see Shopping Ads) then this product is considered
	// the advertised product. Any product included in the order the customer
	// places is a sold product. If these products don't match then this is
	// considered cross-sell. Cross-sell units sold is the total number of
	// cross-sold products from all orders attributed to your ads.
	// Example: Someone clicked on a Shopping ad for a hat then bought the same
	// hat, a shirt and a jacket. The cross-sell units sold in this order is 2.
	// This metric is only available if you report conversions with cart data.
	CrossSellUnitsSold *float64 `protobuf:"fixed64,307,opt,name=cross_sell_units_sold,json=crossSellUnitsSold,proto3,oneof" json:"cross_sell_units_sold,omitempty"`
	// Lead cost of goods sold (COGS) is the total cost of products sold as a
	// result of advertising the same product.
	// How it works: You report conversions with cart data for completed purchases
	// on your website. If the ad that was interacted with has an associated
	// product (see Shopping Ads) then this product is considered the advertised
	// product. Any product included in the order the customer places is a sold
	// product. If the advertised and sold products match, then the cost of these
	// goods is counted under lead cost of goods sold.
	// Example: Someone clicked on a Shopping ad for a hat then bought the same
	// hat and a shirt. The hat has a cost of goods sold value of $3, the shirt
	// has a cost of goods sold value of $5. The lead cost of goods sold for this
	// order is $3.
	// This metric is only available if you report conversions with cart data.
	LeadCostOfGoodsSoldMicros *int64 `protobuf:"varint,308,opt,name=lead_cost_of_goods_sold_micros,json=leadCostOfGoodsSoldMicros,proto3,oneof" json:"lead_cost_of_goods_sold_micros,omitempty"`
	// Lead gross profit is the profit you made from products sold as a result of
	// advertising the same product, minus cost of goods sold (COGS).
	// How it works: You report conversions with cart data for completed purchases
	// on your website. If the ad that was interacted with before the purchase has
	// an associated product (see Shopping Ads) then this product is considered
	// the advertised product. Any product included in the order the customer
	// places is a sold product. If the advertised and sold products match, then
	// the revenue you made from these sales minus the cost of goods sold is your
	// lead gross profit.
	// Example: Someone clicked on a Shopping ad for a hat then bought the same
	// hat and a shirt. The hat is priced $10 and has a cost of goods sold value
	// of $3. The lead gross profit of this order is $7 = $10 - $3.
	// This metric is only available if you report conversions with cart data.
	LeadGrossProfitMicros *int64 `protobuf:"varint,309,opt,name=lead_gross_profit_micros,json=leadGrossProfitMicros,proto3,oneof" json:"lead_gross_profit_micros,omitempty"`
	// Lead revenue is the total amount you made from products sold as a result of
	// advertising the same product.
	// How it works: You report conversions with cart data for completed purchases
	// on your website. If the ad that was interacted with before the purchase has
	// an associated product (see Shopping Ads) then this product is considered
	// the advertised product. Any product included in the order the customer
	// places is a sold product. If the advertised and sold products match, then
	// the total value you made from the sales of these products is shown under
	// lead revenue.
	// Example: Someone clicked on a Shopping ad for a hat then bought the same
	// hat and a shirt. The hat is priced $10 and the shirt is priced $20. The
	// lead revenue of this order is $10.
	// This metric is only available if you report conversions with cart data.
	LeadRevenueMicros *int64 `protobuf:"varint,310,opt,name=lead_revenue_micros,json=leadRevenueMicros,proto3,oneof" json:"lead_revenue_micros,omitempty"`
	// Lead units sold is the total number of products sold as a result of
	// advertising the same product.
	// How it works: You report conversions with cart data for completed purchases
	// on your website. If the ad that was interacted with before the purchase has
	// an associated product (see Shopping Ads) then this product is considered
	// the advertised product. Any product included in the order the customer
	// places is a sold product. If the advertised and sold products match, then
	// the total number of these products sold is shown under lead units sold.
	// Example: Someone clicked on a Shopping ad for a hat then bought the same
	// hat, a shirt and a jacket. The lead units sold in this order is 1.
	// This metric is only available if you report conversions with cart data.
	LeadUnitsSold *float64 `protobuf:"fixed64,311,opt,name=lead_units_sold,json=leadUnitsSold,proto3,oneof" json:"lead_units_sold,omitempty"`
	// The number of unique users who saw your ad during the requested time
	// period. This metric cannot be aggregated, and can only be requested for
	// date ranges of 92 days or less. This metric is available for following
	// campaign types - Display, Video, Discovery and App.
	UniqueUsers *int64 `protobuf:"varint,319,opt,name=unique_users,json=uniqueUsers,proto3,oneof" json:"unique_users,omitempty"`
	// The average number of times a unique user saw your ad during the requested
	// time period. This metric cannot be aggregated, and can only be requested
	// for date ranges of 92 days or less. This metric is available for following
	// campaign types - Display, Video, Discovery and App.
	AverageImpressionFrequencyPerUser *float64 `protobuf:"fixed64,320,opt,name=average_impression_frequency_per_user,json=averageImpressionFrequencyPerUser,proto3,oneof" json:"average_impression_frequency_per_user,omitempty"`
	// Number of linked resources in which the asset is used.
	// This metric can only be selected with ChannelAggregateAssetView and
	// CampaignAggregateAssetView.
	LinkedEntitiesCount *int64 `protobuf:"varint,341,opt,name=linked_entities_count,json=linkedEntitiesCount,proto3,oneof" json:"linked_entities_count,omitempty"`
	// A list of up to 20 sample linked resources in which the asset is used.
	// This metric can only be selected with ChannelAggregateAssetView and
	// CampaignAggregateAssetView.
	LinkedSampleEntities []string `protobuf:"bytes,342,rep,name=linked_sample_entities,json=linkedSampleEntities,proto3" json:"linked_sample_entities,omitempty"`
	// A list of up to 20 sample linked resources with impressions in the last 30
	// days where the asset had the AssetPerformanceLabel.BEST performance label.
	// This metric can only be selected with ChannelAggregateAssetView and
	// CampaignAggregateAssetView.
	SampleBestPerformanceEntities []string `protobuf:"bytes,343,rep,name=sample_best_performance_entities,json=sampleBestPerformanceEntities,proto3" json:"sample_best_performance_entities,omitempty"`
	// A list of up to 20 sample linked resources with impressions in the last 30
	// days where the asset had the AssetPerformanceLabel.GOOD performance label.
	// This metric can only be selected with ChannelAggregateAssetView and
	// CampaignAggregateAssetView.
	SampleGoodPerformanceEntities []string `protobuf:"bytes,344,rep,name=sample_good_performance_entities,json=sampleGoodPerformanceEntities,proto3" json:"sample_good_performance_entities,omitempty"`
	// A list of up to 20 sample linked resources with impressions in the last 30
	// days where the asset had the AssetPerformanceLabel.LOW performance label.
	// This metric can only be selected with ChannelAggregateAssetView and
	// CampaignAggregateAssetView.
	SampleLowPerformanceEntities []string `protobuf:"bytes,345,rep,name=sample_low_performance_entities,json=sampleLowPerformanceEntities,proto3" json:"sample_low_performance_entities,omitempty"`
	// A list of up to 20 sample linked resources with impressions in the last 30
	// days where the asset had the AssetPerformanceLabel.LEARNING performance
	// label.
	// This metric can only be selected with ChannelAggregateAssetView and
	// CampaignAggregateAssetView.
	SampleLearningPerformanceEntities []string `protobuf:"bytes,346,rep,name=sample_learning_performance_entities,json=sampleLearningPerformanceEntities,proto3" json:"sample_learning_performance_entities,omitempty"`
	// A list of up to 20 sample linked resources with impressions in the last 30
	// days where the assets had AssetPerformanceLabel performance label other
	// than BEST, GOOD, LOW, and LEARNING.
	// This metric can only be selected with ChannelAggregateAssetView and
	// CampaignAggregateAssetView.
	SampleUnratedPerformanceEntities []string `protobuf:"bytes,347,rep,name=sample_unrated_performance_entities,json=sampleUnratedPerformanceEntities,proto3" json:"sample_unrated_performance_entities,omitempty"`
	// Number of total usages in which the asset is pinned.
	// This metric can only be selected with ChannelAggregateAssetView and
	// CampaignAggregateAssetView.
	// This metric is only supported in Search channel.
	AssetPinnedTotalCount *int64 `protobuf:"varint,348,opt,name=asset_pinned_total_count,json=assetPinnedTotalCount,proto3,oneof" json:"asset_pinned_total_count,omitempty"`
	// Number of entities in which the asset is pinned to headline 1.
	// This metric can only be selected with ChannelAggregateAssetView and
	// CampaignAggregateAssetView.
	// This metric is only supported in Search channel.
	AssetPinnedAsHeadlinePositionOneCount *int64 `protobuf:"varint,349,opt,name=asset_pinned_as_headline_position_one_count,json=assetPinnedAsHeadlinePositionOneCount,proto3,oneof" json:"asset_pinned_as_headline_position_one_count,omitempty"`
	// Number of entities in which the asset is pinned to headline 2.
	// This metric can only be selected with ChannelAggregateAssetView and
	// CampaignAggregateAssetView.
	// This metric is only supported in Search channel.
	AssetPinnedAsHeadlinePositionTwoCount *int64 `protobuf:"varint,350,opt,name=asset_pinned_as_headline_position_two_count,json=assetPinnedAsHeadlinePositionTwoCount,proto3,oneof" json:"asset_pinned_as_headline_position_two_count,omitempty"`
	// Number of entities in which the asset is pinned to headline 3.
	// This metric can only be selected with ChannelAggregateAssetView and
	// CampaignAggregateAssetView.
	// This metric is only supported in Search channel.
	AssetPinnedAsHeadlinePositionThreeCount *int64 `protobuf:"varint,351,opt,name=asset_pinned_as_headline_position_three_count,json=assetPinnedAsHeadlinePositionThreeCount,proto3,oneof" json:"asset_pinned_as_headline_position_three_count,omitempty"`
	// Number of entities in which the asset is pinned to description 1.
	// This metric can only be selected with ChannelAggregateAssetView and
	// CampaignAggregateAssetView.
	// This metric is only supported in Search channel.
	AssetPinnedAsDescriptionPositionOneCount *int64 `protobuf:"varint,352,opt,name=asset_pinned_as_description_position_one_count,json=assetPinnedAsDescriptionPositionOneCount,proto3,oneof" json:"asset_pinned_as_description_position_one_count,omitempty"`
	// Number of entities in which the asset is pinned to description 2.
	// This metric can only be selected with ChannelAggregateAssetView and
	// CampaignAggregateAssetView.
	// This metric is only supported in Search channel.
	AssetPinnedAsDescriptionPositionTwoCount *int64 `protobuf:"varint,353,opt,name=asset_pinned_as_description_position_two_count,json=assetPinnedAsDescriptionPositionTwoCount,proto3,oneof" json:"asset_pinned_as_description_position_two_count,omitempty"`
	// Percentage of impressions the asset received in ads with
	// AssetPerformanceLabel.BEST.
	// This metric can only be selected with ChannelAggregateAssetView and
	// CampaignAggregateAssetView.
	// This metric is only supported in Search channel.
	AssetBestPerformanceImpressionPercentage *float64 `protobuf:"fixed64,354,opt,name=asset_best_performance_impression_percentage,json=assetBestPerformanceImpressionPercentage,proto3,oneof" json:"asset_best_performance_impression_percentage,omitempty"`
	// Percentage of impressions the asset received in ads with
	// AssetPerformanceLabel.GOOD.
	// This metric can only be selected with ChannelAggregateAssetView and
	// CampaignAggregateAssetView.
	// This metric is only supported in Search channel.
	AssetGoodPerformanceImpressionPercentage *float64 `protobuf:"fixed64,355,opt,name=asset_good_performance_impression_percentage,json=assetGoodPerformanceImpressionPercentage,proto3,oneof" json:"asset_good_performance_impression_percentage,omitempty"`
	// Percentage of impressions the asset received in ads with
	// AssetPerformanceLabel.LOW.
	// This metric can only be selected with ChannelAggregateAssetView and
	// CampaignAggregateAssetView.
	// This metric is only supported in Search channel.
	AssetLowPerformanceImpressionPercentage *float64 `protobuf:"fixed64,356,opt,name=asset_low_performance_impression_percentage,json=assetLowPerformanceImpressionPercentage,proto3,oneof" json:"asset_low_performance_impression_percentage,omitempty"`
	// Percentage of impressions the asset received in ads with
	// AssetPerformanceLabel.LEARNING.
	// This metric can only be selected with ChannelAggregateAssetView and
	// CampaignAggregateAssetView.
	// This metric is only supported in Search channel.
	AssetLearningPerformanceImpressionPercentage *float64 `protobuf:"fixed64,357,opt,name=asset_learning_performance_impression_percentage,json=assetLearningPerformanceImpressionPercentage,proto3,oneof" json:"asset_learning_performance_impression_percentage,omitempty"`
	// Percentage of impressions the asset received in ads with
	// AssetPerformanceLabel other than BEST, GOOD, LOW, and LEARNING.
	// This metric can only be selected with ChannelAggregateAssetView and
	// CampaignAggregateAssetView.
	// This metric is only supported in Search channel.
	AssetUnratedPerformanceImpressionPercentage *float64 `protobuf:"fixed64,358,opt,name=asset_unrated_performance_impression_percentage,json=assetUnratedPerformanceImpressionPercentage,proto3,oneof" json:"asset_unrated_performance_impression_percentage,omitempty"`
	// Percentage of cost the asset received in ads with
	// AssetPerformanceLabel.BEST.
	// This metric can only be selected with ChannelAggregateAssetView and
	// CampaignAggregateAssetView.
	// This metric is only supported in Performance Max channel.
	AssetBestPerformanceCostPercentage *float64 `protobuf:"fixed64,359,opt,name=asset_best_performance_cost_percentage,json=assetBestPerformanceCostPercentage,proto3,oneof" json:"asset_best_performance_cost_percentage,omitempty"`
	// Percentage of cost the asset received in ads with
	// AssetPerformanceLabel.GOOD.
	// This metric can only be selected with ChannelAggregateAssetView and
	// CampaignAggregateAssetView.
	// This metric is only supported in Performance Max channel.
	AssetGoodPerformanceCostPercentage *float64 `protobuf:"fixed64,360,opt,name=asset_good_performance_cost_percentage,json=assetGoodPerformanceCostPercentage,proto3,oneof" json:"asset_good_performance_cost_percentage,omitempty"`
	// Percentage of cost the asset received in ads with
	// AssetPerformanceLabel.LOW.
	// This metric can only be selected with ChannelAggregateAssetView and
	// CampaignAggregateAssetView.
	// This metric is only supported in Performance Max channel.
	AssetLowPerformanceCostPercentage *float64 `protobuf:"fixed64,361,opt,name=asset_low_performance_cost_percentage,json=assetLowPerformanceCostPercentage,proto3,oneof" json:"asset_low_performance_cost_percentage,omitempty"`
	// Percentage of cost the asset received in ads with
	// AssetPerformanceLabel.LEARNING.
	// This metric can only be selected with ChannelAggregateAssetView and
	// CampaignAggregateAssetView.
	// This metric is only supported in Performance Max channel.
	AssetLearningPerformanceCostPercentage *float64 `protobuf:"fixed64,362,opt,name=asset_learning_performance_cost_percentage,json=assetLearningPerformanceCostPercentage,proto3,oneof" json:"asset_learning_performance_cost_percentage,omitempty"`
	// Percentage of cost the asset received in ads with AssetPerformanceLabel
	// other than BEST, GOOD, LOW, and LEARNING.
	// This metric can only be selected with ChannelAggregateAssetView and
	// CampaignAggregateAssetView.
	// This metric is only supported in Performance Max channel.
	AssetUnratedPerformanceCostPercentage *float64 `protobuf:"fixed64,363,opt,name=asset_unrated_performance_cost_percentage,json=assetUnratedPerformanceCostPercentage,proto3,oneof" json:"asset_unrated_performance_cost_percentage,omitempty"`
	// The amount of store visits attributed by the last click model.
	StoreVisitsLastClickModelAttributedConversions *float64 `protobuf:"fixed64,365,opt,name=store_visits_last_click_model_attributed_conversions,json=storeVisitsLastClickModelAttributedConversions,proto3,oneof" json:"store_visits_last_click_model_attributed_conversions,omitempty"`
	// The purchase conversion stats for the unified goals results.
	ResultsConversionsPurchase *float64 `protobuf:"fixed64,366,opt,name=results_conversions_purchase,json=resultsConversionsPurchase,proto3,oneof" json:"results_conversions_purchase,omitempty"`
	// The number of video views divided by number of impressions that can
	// potentially lead to video views for in-feed formats.
	VideoViewRateInFeed *float64 `protobuf:"fixed64,367,opt,name=video_view_rate_in_feed,json=videoViewRateInFeed,proto3,oneof" json:"video_view_rate_in_feed,omitempty"`
	// The number of video views divided by number of impressions that can
	// potentially lead to video views for in-stream formats.
	VideoViewRateInStream *float64 `protobuf:"fixed64,368,opt,name=video_view_rate_in_stream,json=videoViewRateInStream,proto3,oneof" json:"video_view_rate_in_stream,omitempty"`
	// The number of video views divided by number of impressions that can
	// potentially lead to video views for in shorts formats.
	VideoViewRateShorts *float64 `protobuf:"fixed64,369,opt,name=video_view_rate_shorts,json=videoViewRateShorts,proto3,oneof" json:"video_view_rate_shorts,omitempty"`
	// All co-viewed impressions represent the total number of people who saw your
	// ad. This includes people who are signed into their Google Account, as well
	// as other people who are watching the same ad on a connected TV. This metric
	// is only available for the Campaign resource with adjusted_age_range and
	// adjusted_gender segments. These segmentations are mandatory to get the
	// all coviewed impressions.
	CoviewedImpressions *int64 `protobuf:"varint,380,opt,name=coviewed_impressions,json=coviewedImpressions,proto3,oneof" json:"coviewed_impressions,omitempty"`
	// Primary impression is counted each time your ad is served. This metric is
	// only available for the Campaign resource with adjusted_age_range and
	// adjusted_gender segments. These segmentations are mandatory to get the
	// primary impressions.
	PrimaryImpressions *int64 `protobuf:"varint,381,opt,name=primary_impressions,json=primaryImpressions,proto3,oneof" json:"primary_impressions,omitempty"`
	// Platform comparable conversions from interactions divided by the number of
	// ad interactions (such as clicks for text ads or views for video ads). This
	// only includes conversion actions for which include_in_conversions_metric
	// attribute is set to true. If you use conversion-based bidding, your bid
	// strategies will optimize for these conversions.
	PlatformComparableConversionsFromInteractionsRate *float64 `protobuf:"fixed64,382,opt,name=platform_comparable_conversions_from_interactions_rate,json=platformComparableConversionsFromInteractionsRate,proto3,oneof" json:"platform_comparable_conversions_from_interactions_rate,omitempty"`
	// The number of platform comparable conversions. This only includes
	// conversion actions for which include_in_conversions_metric attribute is set
	// to true. If you use conversion-based bidding, your bid strategies will
	// optimize for these conversions.
	PlatformComparableConversions *float64 `protobuf:"fixed64,383,opt,name=platform_comparable_conversions,json=platformComparableConversions,proto3,oneof" json:"platform_comparable_conversions,omitempty"`
	// The value of platform comparable conversions. This only includes conversion
	// actions which include_in_conversions_metric attribute is set to true. If
	// you use conversion-based bidding, your bid strategies will optimize for
	// these conversions.
	PlatformComparableConversionsValue *float64 `protobuf:"fixed64,384,opt,name=platform_comparable_conversions_value,json=platformComparableConversionsValue,proto3,oneof" json:"platform_comparable_conversions_value,omitempty"`
	// The value of conversions divided by the cost of ad interactions. This only
	// includes conversion actions for which include_in_conversions_metric
	// attribute is set to true. If you use conversion-based bidding, your bid
	// strategies will optimize for these conversions.
	PlatformComparableConversionsValuePerCost *float64 `protobuf:"fixed64,385,opt,name=platform_comparable_conversions_value_per_cost,json=platformComparableConversionsValuePerCost,proto3,oneof" json:"platform_comparable_conversions_value_per_cost,omitempty"`
	// The number of platform comparable conversions. When this metric is
	// segmented by date, the values in the date segment represent the conversion
	// date. This only includes conversion actions for which
	// include_in_conversions_metric attribute is set to true. If you use
	// conversion-based bidding, your bid strategies will optimize for these
	// conversions.
	PlatformComparableConversionsByConversionDate *float64 `protobuf:"fixed64,386,opt,name=platform_comparable_conversions_by_conversion_date,json=platformComparableConversionsByConversionDate,proto3,oneof" json:"platform_comparable_conversions_by_conversion_date,omitempty"`
	// The value of platform comparable conversions. When this metric is segmented
	// by date, the values in the date segment represent the conversion date. This
	// only includes conversion actions for which include_in_conversions_metric
	// attribute is set to true. If you use conversion-based bidding, your bid
	// strategies will optimize for these conversions.
	PlatformComparableConversionsValueByConversionDate *float64 `protobuf:"fixed64,387,opt,name=platform_comparable_conversions_value_by_conversion_date,json=platformComparableConversionsValueByConversionDate,proto3,oneof" json:"platform_comparable_conversions_value_by_conversion_date,omitempty"`
	// The value of platform comparable conversions from interactions divided by
	// the number of ad interactions. This only includes conversion actions for
	// which include_in_conversions_metric attribute is set to true. If you use
	// conversion-based bidding, your bid strategies will optimize for these
	// conversions.
	PlatformComparableConversionsFromInteractionsValuePerInteraction *float64 `protobuf:"fixed64,388,opt,name=platform_comparable_conversions_from_interactions_value_per_interaction,json=platformComparableConversionsFromInteractionsValuePerInteraction,proto3,oneof" json:"platform_comparable_conversions_from_interactions_value_per_interaction,omitempty"`
	// The cost of ad interactions divided by the number of platform comparable
	// conversions. This only includes conversion actions for which
	// include_in_conversions_metric attribute is set to true. If you use
	// conversion-based bidding, your bid strategies will optimize for these
	// conversions.
	CostPerPlatformComparableConversion *float64 `protobuf:"fixed64,389,opt,name=cost_per_platform_comparable_conversion,json=costPerPlatformComparableConversion,proto3,oneof" json:"cost_per_platform_comparable_conversion,omitempty"`
	// The value of platform comparable conversions divided by the number of
	// platform comparable conversions. This only includes conversion actions for
	// which include_in_conversions_metric attribute is set to true. If you use
	// conversion-based bidding, your bid strategies will optimize for these
	// conversions.
	ValuePerPlatformComparableConversion *float64 `protobuf:"fixed64,390,opt,name=value_per_platform_comparable_conversion,json=valuePerPlatformComparableConversion,proto3,oneof" json:"value_per_platform_comparable_conversion,omitempty"`
	// The value of platform comparable conversions divided by the number of
	// platform comparable conversions. When this metric is segmented by date, the
	// values in the date segment represent the conversion date. This only
	// includes conversion actions for which include_in_conversions_metric
	// attribute is set to true. If you use conversion-based bidding, your bid
	// strategies will optimize for these conversions.
	ValuePerPlatformComparableConversionsByConversionDate *float64 `protobuf:"fixed64,391,opt,name=value_per_platform_comparable_conversions_by_conversion_date,json=valuePerPlatformComparableConversionsByConversionDate,proto3,oneof" json:"value_per_platform_comparable_conversions_by_conversion_date,omitempty"`
	// The cost of the platform comparable conversion in the currency of the
	// authorized customer.
	CostConvertedCurrencyPerPlatformComparableConversion *float64 `protobuf:"fixed64,392,opt,name=cost_converted_currency_per_platform_comparable_conversion,json=costConvertedCurrencyPerPlatformComparableConversion,proto3,oneof" json:"cost_converted_currency_per_platform_comparable_conversion,omitempty"`
	unknownFields                                        protoimpl.UnknownFields
	sizeCache                                            protoimpl.SizeCache
}

func (x *Metrics) Reset() {
	*x = Metrics{}
	mi := &file_google_ads_googleads_v20_common_metrics_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metrics) ProtoMessage() {}

func (x *Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_metrics_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metrics.ProtoReflect.Descriptor instead.
func (*Metrics) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_metrics_proto_rawDescGZIP(), []int{0}
}

func (x *Metrics) GetAbsoluteTopImpressionPercentage() float64 {
	if x != nil && x.AbsoluteTopImpressionPercentage != nil {
		return *x.AbsoluteTopImpressionPercentage
	}
	return 0
}

func (x *Metrics) GetActiveViewCpm() float64 {
	if x != nil && x.ActiveViewCpm != nil {
		return *x.ActiveViewCpm
	}
	return 0
}

func (x *Metrics) GetActiveViewCtr() float64 {
	if x != nil && x.ActiveViewCtr != nil {
		return *x.ActiveViewCtr
	}
	return 0
}

func (x *Metrics) GetActiveViewImpressions() int64 {
	if x != nil && x.ActiveViewImpressions != nil {
		return *x.ActiveViewImpressions
	}
	return 0
}

func (x *Metrics) GetActiveViewMeasurability() float64 {
	if x != nil && x.ActiveViewMeasurability != nil {
		return *x.ActiveViewMeasurability
	}
	return 0
}

func (x *Metrics) GetActiveViewMeasurableCostMicros() int64 {
	if x != nil && x.ActiveViewMeasurableCostMicros != nil {
		return *x.ActiveViewMeasurableCostMicros
	}
	return 0
}

func (x *Metrics) GetActiveViewMeasurableImpressions() int64 {
	if x != nil && x.ActiveViewMeasurableImpressions != nil {
		return *x.ActiveViewMeasurableImpressions
	}
	return 0
}

func (x *Metrics) GetActiveViewViewability() float64 {
	if x != nil && x.ActiveViewViewability != nil {
		return *x.ActiveViewViewability
	}
	return 0
}

func (x *Metrics) GetAllConversionsFromInteractionsRate() float64 {
	if x != nil && x.AllConversionsFromInteractionsRate != nil {
		return *x.AllConversionsFromInteractionsRate
	}
	return 0
}

func (x *Metrics) GetAllConversionsValue() float64 {
	if x != nil && x.AllConversionsValue != nil {
		return *x.AllConversionsValue
	}
	return 0
}

func (x *Metrics) GetAllConversionsValueByConversionDate() float64 {
	if x != nil && x.AllConversionsValueByConversionDate != nil {
		return *x.AllConversionsValueByConversionDate
	}
	return 0
}

func (x *Metrics) GetAllNewCustomerLifetimeValue() float64 {
	if x != nil && x.AllNewCustomerLifetimeValue != nil {
		return *x.AllNewCustomerLifetimeValue
	}
	return 0
}

func (x *Metrics) GetAllConversions() float64 {
	if x != nil && x.AllConversions != nil {
		return *x.AllConversions
	}
	return 0
}

func (x *Metrics) GetAllConversionsByConversionDate() float64 {
	if x != nil && x.AllConversionsByConversionDate != nil {
		return *x.AllConversionsByConversionDate
	}
	return 0
}

func (x *Metrics) GetAllConversionsValuePerCost() float64 {
	if x != nil && x.AllConversionsValuePerCost != nil {
		return *x.AllConversionsValuePerCost
	}
	return 0
}

func (x *Metrics) GetAllConversionsFromClickToCall() float64 {
	if x != nil && x.AllConversionsFromClickToCall != nil {
		return *x.AllConversionsFromClickToCall
	}
	return 0
}

func (x *Metrics) GetAllConversionsFromDirections() float64 {
	if x != nil && x.AllConversionsFromDirections != nil {
		return *x.AllConversionsFromDirections
	}
	return 0
}

func (x *Metrics) GetAllConversionsFromInteractionsValuePerInteraction() float64 {
	if x != nil && x.AllConversionsFromInteractionsValuePerInteraction != nil {
		return *x.AllConversionsFromInteractionsValuePerInteraction
	}
	return 0
}

func (x *Metrics) GetAllConversionsFromMenu() float64 {
	if x != nil && x.AllConversionsFromMenu != nil {
		return *x.AllConversionsFromMenu
	}
	return 0
}

func (x *Metrics) GetAllConversionsFromOrder() float64 {
	if x != nil && x.AllConversionsFromOrder != nil {
		return *x.AllConversionsFromOrder
	}
	return 0
}

func (x *Metrics) GetAllConversionsFromOtherEngagement() float64 {
	if x != nil && x.AllConversionsFromOtherEngagement != nil {
		return *x.AllConversionsFromOtherEngagement
	}
	return 0
}

func (x *Metrics) GetAllConversionsFromStoreVisit() float64 {
	if x != nil && x.AllConversionsFromStoreVisit != nil {
		return *x.AllConversionsFromStoreVisit
	}
	return 0
}

func (x *Metrics) GetAllConversionsFromStoreWebsite() float64 {
	if x != nil && x.AllConversionsFromStoreWebsite != nil {
		return *x.AllConversionsFromStoreWebsite
	}
	return 0
}

func (x *Metrics) GetAuctionInsightSearchAbsoluteTopImpressionPercentage() float64 {
	if x != nil && x.AuctionInsightSearchAbsoluteTopImpressionPercentage != nil {
		return *x.AuctionInsightSearchAbsoluteTopImpressionPercentage
	}
	return 0
}

func (x *Metrics) GetAuctionInsightSearchImpressionShare() float64 {
	if x != nil && x.AuctionInsightSearchImpressionShare != nil {
		return *x.AuctionInsightSearchImpressionShare
	}
	return 0
}

func (x *Metrics) GetAuctionInsightSearchOutrankingShare() float64 {
	if x != nil && x.AuctionInsightSearchOutrankingShare != nil {
		return *x.AuctionInsightSearchOutrankingShare
	}
	return 0
}

func (x *Metrics) GetAuctionInsightSearchOverlapRate() float64 {
	if x != nil && x.AuctionInsightSearchOverlapRate != nil {
		return *x.AuctionInsightSearchOverlapRate
	}
	return 0
}

func (x *Metrics) GetAuctionInsightSearchPositionAboveRate() float64 {
	if x != nil && x.AuctionInsightSearchPositionAboveRate != nil {
		return *x.AuctionInsightSearchPositionAboveRate
	}
	return 0
}

func (x *Metrics) GetAuctionInsightSearchTopImpressionPercentage() float64 {
	if x != nil && x.AuctionInsightSearchTopImpressionPercentage != nil {
		return *x.AuctionInsightSearchTopImpressionPercentage
	}
	return 0
}

func (x *Metrics) GetAverageCost() float64 {
	if x != nil && x.AverageCost != nil {
		return *x.AverageCost
	}
	return 0
}

func (x *Metrics) GetAverageCpc() float64 {
	if x != nil && x.AverageCpc != nil {
		return *x.AverageCpc
	}
	return 0
}

func (x *Metrics) GetAverageCpe() float64 {
	if x != nil && x.AverageCpe != nil {
		return *x.AverageCpe
	}
	return 0
}

func (x *Metrics) GetAverageCpm() float64 {
	if x != nil && x.AverageCpm != nil {
		return *x.AverageCpm
	}
	return 0
}

func (x *Metrics) GetAverageCpv() float64 {
	if x != nil && x.AverageCpv != nil {
		return *x.AverageCpv
	}
	return 0
}

func (x *Metrics) GetAveragePageViews() float64 {
	if x != nil && x.AveragePageViews != nil {
		return *x.AveragePageViews
	}
	return 0
}

func (x *Metrics) GetAverageTimeOnSite() float64 {
	if x != nil && x.AverageTimeOnSite != nil {
		return *x.AverageTimeOnSite
	}
	return 0
}

func (x *Metrics) GetBenchmarkAverageMaxCpc() float64 {
	if x != nil && x.BenchmarkAverageMaxCpc != nil {
		return *x.BenchmarkAverageMaxCpc
	}
	return 0
}

func (x *Metrics) GetBiddableAppInstallConversions() float64 {
	if x != nil && x.BiddableAppInstallConversions != nil {
		return *x.BiddableAppInstallConversions
	}
	return 0
}

func (x *Metrics) GetBiddableAppPostInstallConversions() float64 {
	if x != nil && x.BiddableAppPostInstallConversions != nil {
		return *x.BiddableAppPostInstallConversions
	}
	return 0
}

func (x *Metrics) GetBiddableCohortAppPostInstallConversions() float64 {
	if x != nil && x.BiddableCohortAppPostInstallConversions != nil {
		return *x.BiddableCohortAppPostInstallConversions
	}
	return 0
}

func (x *Metrics) GetBenchmarkCtr() float64 {
	if x != nil && x.BenchmarkCtr != nil {
		return *x.BenchmarkCtr
	}
	return 0
}

func (x *Metrics) GetBounceRate() float64 {
	if x != nil && x.BounceRate != nil {
		return *x.BounceRate
	}
	return 0
}

func (x *Metrics) GetClicks() int64 {
	if x != nil && x.Clicks != nil {
		return *x.Clicks
	}
	return 0
}

func (x *Metrics) GetCombinedClicks() int64 {
	if x != nil && x.CombinedClicks != nil {
		return *x.CombinedClicks
	}
	return 0
}

func (x *Metrics) GetCombinedClicksPerQuery() float64 {
	if x != nil && x.CombinedClicksPerQuery != nil {
		return *x.CombinedClicksPerQuery
	}
	return 0
}

func (x *Metrics) GetCombinedQueries() int64 {
	if x != nil && x.CombinedQueries != nil {
		return *x.CombinedQueries
	}
	return 0
}

func (x *Metrics) GetContentBudgetLostImpressionShare() float64 {
	if x != nil && x.ContentBudgetLostImpressionShare != nil {
		return *x.ContentBudgetLostImpressionShare
	}
	return 0
}

func (x *Metrics) GetContentImpressionShare() float64 {
	if x != nil && x.ContentImpressionShare != nil {
		return *x.ContentImpressionShare
	}
	return 0
}

func (x *Metrics) GetConversionLastReceivedRequestDateTime() string {
	if x != nil && x.ConversionLastReceivedRequestDateTime != nil {
		return *x.ConversionLastReceivedRequestDateTime
	}
	return ""
}

func (x *Metrics) GetConversionLastConversionDate() string {
	if x != nil && x.ConversionLastConversionDate != nil {
		return *x.ConversionLastConversionDate
	}
	return ""
}

func (x *Metrics) GetContentRankLostImpressionShare() float64 {
	if x != nil && x.ContentRankLostImpressionShare != nil {
		return *x.ContentRankLostImpressionShare
	}
	return 0
}

func (x *Metrics) GetConversionsFromInteractionsRate() float64 {
	if x != nil && x.ConversionsFromInteractionsRate != nil {
		return *x.ConversionsFromInteractionsRate
	}
	return 0
}

func (x *Metrics) GetConversionsValue() float64 {
	if x != nil && x.ConversionsValue != nil {
		return *x.ConversionsValue
	}
	return 0
}

func (x *Metrics) GetConversionsValueByConversionDate() float64 {
	if x != nil && x.ConversionsValueByConversionDate != nil {
		return *x.ConversionsValueByConversionDate
	}
	return 0
}

func (x *Metrics) GetNewCustomerLifetimeValue() float64 {
	if x != nil && x.NewCustomerLifetimeValue != nil {
		return *x.NewCustomerLifetimeValue
	}
	return 0
}

func (x *Metrics) GetConversionsValuePerCost() float64 {
	if x != nil && x.ConversionsValuePerCost != nil {
		return *x.ConversionsValuePerCost
	}
	return 0
}

func (x *Metrics) GetConversionsFromInteractionsValuePerInteraction() float64 {
	if x != nil && x.ConversionsFromInteractionsValuePerInteraction != nil {
		return *x.ConversionsFromInteractionsValuePerInteraction
	}
	return 0
}

func (x *Metrics) GetConversions() float64 {
	if x != nil && x.Conversions != nil {
		return *x.Conversions
	}
	return 0
}

func (x *Metrics) GetConversionsByConversionDate() float64 {
	if x != nil && x.ConversionsByConversionDate != nil {
		return *x.ConversionsByConversionDate
	}
	return 0
}

func (x *Metrics) GetCostMicros() int64 {
	if x != nil && x.CostMicros != nil {
		return *x.CostMicros
	}
	return 0
}

func (x *Metrics) GetCostPerAllConversions() float64 {
	if x != nil && x.CostPerAllConversions != nil {
		return *x.CostPerAllConversions
	}
	return 0
}

func (x *Metrics) GetCostPerConversion() float64 {
	if x != nil && x.CostPerConversion != nil {
		return *x.CostPerConversion
	}
	return 0
}

func (x *Metrics) GetCostPerCurrentModelAttributedConversion() float64 {
	if x != nil && x.CostPerCurrentModelAttributedConversion != nil {
		return *x.CostPerCurrentModelAttributedConversion
	}
	return 0
}

func (x *Metrics) GetCrossDeviceConversions() float64 {
	if x != nil && x.CrossDeviceConversions != nil {
		return *x.CrossDeviceConversions
	}
	return 0
}

func (x *Metrics) GetCrossDeviceConversionsValueMicros() int64 {
	if x != nil && x.CrossDeviceConversionsValueMicros != nil {
		return *x.CrossDeviceConversionsValueMicros
	}
	return 0
}

func (x *Metrics) GetCtr() float64 {
	if x != nil && x.Ctr != nil {
		return *x.Ctr
	}
	return 0
}

func (x *Metrics) GetCurrentModelAttributedConversions() float64 {
	if x != nil && x.CurrentModelAttributedConversions != nil {
		return *x.CurrentModelAttributedConversions
	}
	return 0
}

func (x *Metrics) GetCurrentModelAttributedConversionsFromInteractionsRate() float64 {
	if x != nil && x.CurrentModelAttributedConversionsFromInteractionsRate != nil {
		return *x.CurrentModelAttributedConversionsFromInteractionsRate
	}
	return 0
}

func (x *Metrics) GetCurrentModelAttributedConversionsFromInteractionsValuePerInteraction() float64 {
	if x != nil && x.CurrentModelAttributedConversionsFromInteractionsValuePerInteraction != nil {
		return *x.CurrentModelAttributedConversionsFromInteractionsValuePerInteraction
	}
	return 0
}

func (x *Metrics) GetCurrentModelAttributedConversionsValue() float64 {
	if x != nil && x.CurrentModelAttributedConversionsValue != nil {
		return *x.CurrentModelAttributedConversionsValue
	}
	return 0
}

func (x *Metrics) GetCurrentModelAttributedConversionsValuePerCost() float64 {
	if x != nil && x.CurrentModelAttributedConversionsValuePerCost != nil {
		return *x.CurrentModelAttributedConversionsValuePerCost
	}
	return 0
}

func (x *Metrics) GetEngagementRate() float64 {
	if x != nil && x.EngagementRate != nil {
		return *x.EngagementRate
	}
	return 0
}

func (x *Metrics) GetEngagements() int64 {
	if x != nil && x.Engagements != nil {
		return *x.Engagements
	}
	return 0
}

func (x *Metrics) GetHotelAverageLeadValueMicros() float64 {
	if x != nil && x.HotelAverageLeadValueMicros != nil {
		return *x.HotelAverageLeadValueMicros
	}
	return 0
}

func (x *Metrics) GetHotelCommissionRateMicros() int64 {
	if x != nil && x.HotelCommissionRateMicros != nil {
		return *x.HotelCommissionRateMicros
	}
	return 0
}

func (x *Metrics) GetHotelExpectedCommissionCost() float64 {
	if x != nil && x.HotelExpectedCommissionCost != nil {
		return *x.HotelExpectedCommissionCost
	}
	return 0
}

func (x *Metrics) GetHotelPriceDifferencePercentage() float64 {
	if x != nil && x.HotelPriceDifferencePercentage != nil {
		return *x.HotelPriceDifferencePercentage
	}
	return 0
}

func (x *Metrics) GetHotelEligibleImpressions() int64 {
	if x != nil && x.HotelEligibleImpressions != nil {
		return *x.HotelEligibleImpressions
	}
	return 0
}

func (x *Metrics) GetHistoricalCreativeQualityScore() enums.QualityScoreBucketEnum_QualityScoreBucket {
	if x != nil {
		return x.HistoricalCreativeQualityScore
	}
	return enums.QualityScoreBucketEnum_QualityScoreBucket(0)
}

func (x *Metrics) GetHistoricalLandingPageQualityScore() enums.QualityScoreBucketEnum_QualityScoreBucket {
	if x != nil {
		return x.HistoricalLandingPageQualityScore
	}
	return enums.QualityScoreBucketEnum_QualityScoreBucket(0)
}

func (x *Metrics) GetHistoricalQualityScore() int64 {
	if x != nil && x.HistoricalQualityScore != nil {
		return *x.HistoricalQualityScore
	}
	return 0
}

func (x *Metrics) GetHistoricalSearchPredictedCtr() enums.QualityScoreBucketEnum_QualityScoreBucket {
	if x != nil {
		return x.HistoricalSearchPredictedCtr
	}
	return enums.QualityScoreBucketEnum_QualityScoreBucket(0)
}

func (x *Metrics) GetGmailForwards() int64 {
	if x != nil && x.GmailForwards != nil {
		return *x.GmailForwards
	}
	return 0
}

func (x *Metrics) GetGmailSaves() int64 {
	if x != nil && x.GmailSaves != nil {
		return *x.GmailSaves
	}
	return 0
}

func (x *Metrics) GetGmailSecondaryClicks() int64 {
	if x != nil && x.GmailSecondaryClicks != nil {
		return *x.GmailSecondaryClicks
	}
	return 0
}

func (x *Metrics) GetImpressionsFromStoreReach() int64 {
	if x != nil && x.ImpressionsFromStoreReach != nil {
		return *x.ImpressionsFromStoreReach
	}
	return 0
}

func (x *Metrics) GetImpressions() int64 {
	if x != nil && x.Impressions != nil {
		return *x.Impressions
	}
	return 0
}

func (x *Metrics) GetInteractionRate() float64 {
	if x != nil && x.InteractionRate != nil {
		return *x.InteractionRate
	}
	return 0
}

func (x *Metrics) GetInteractions() int64 {
	if x != nil && x.Interactions != nil {
		return *x.Interactions
	}
	return 0
}

func (x *Metrics) GetInteractionEventTypes() []enums.InteractionEventTypeEnum_InteractionEventType {
	if x != nil {
		return x.InteractionEventTypes
	}
	return nil
}

func (x *Metrics) GetInvalidClickRate() float64 {
	if x != nil && x.InvalidClickRate != nil {
		return *x.InvalidClickRate
	}
	return 0
}

func (x *Metrics) GetInvalidClicks() int64 {
	if x != nil && x.InvalidClicks != nil {
		return *x.InvalidClicks
	}
	return 0
}

func (x *Metrics) GetGeneralInvalidClickRate() float64 {
	if x != nil && x.GeneralInvalidClickRate != nil {
		return *x.GeneralInvalidClickRate
	}
	return 0
}

func (x *Metrics) GetGeneralInvalidClicks() int64 {
	if x != nil && x.GeneralInvalidClicks != nil {
		return *x.GeneralInvalidClicks
	}
	return 0
}

func (x *Metrics) GetMessageChats() int64 {
	if x != nil && x.MessageChats != nil {
		return *x.MessageChats
	}
	return 0
}

func (x *Metrics) GetMessageImpressions() int64 {
	if x != nil && x.MessageImpressions != nil {
		return *x.MessageImpressions
	}
	return 0
}

func (x *Metrics) GetMessageChatRate() float64 {
	if x != nil && x.MessageChatRate != nil {
		return *x.MessageChatRate
	}
	return 0
}

func (x *Metrics) GetMobileFriendlyClicksPercentage() float64 {
	if x != nil && x.MobileFriendlyClicksPercentage != nil {
		return *x.MobileFriendlyClicksPercentage
	}
	return 0
}

func (x *Metrics) GetOptimizationScoreUplift() float64 {
	if x != nil && x.OptimizationScoreUplift != nil {
		return *x.OptimizationScoreUplift
	}
	return 0
}

func (x *Metrics) GetOptimizationScoreUrl() string {
	if x != nil && x.OptimizationScoreUrl != nil {
		return *x.OptimizationScoreUrl
	}
	return ""
}

func (x *Metrics) GetOrganicClicks() int64 {
	if x != nil && x.OrganicClicks != nil {
		return *x.OrganicClicks
	}
	return 0
}

func (x *Metrics) GetOrganicClicksPerQuery() float64 {
	if x != nil && x.OrganicClicksPerQuery != nil {
		return *x.OrganicClicksPerQuery
	}
	return 0
}

func (x *Metrics) GetOrganicImpressions() int64 {
	if x != nil && x.OrganicImpressions != nil {
		return *x.OrganicImpressions
	}
	return 0
}

func (x *Metrics) GetOrganicImpressionsPerQuery() float64 {
	if x != nil && x.OrganicImpressionsPerQuery != nil {
		return *x.OrganicImpressionsPerQuery
	}
	return 0
}

func (x *Metrics) GetOrganicQueries() int64 {
	if x != nil && x.OrganicQueries != nil {
		return *x.OrganicQueries
	}
	return 0
}

func (x *Metrics) GetPercentNewVisitors() float64 {
	if x != nil && x.PercentNewVisitors != nil {
		return *x.PercentNewVisitors
	}
	return 0
}

func (x *Metrics) GetPhoneCalls() int64 {
	if x != nil && x.PhoneCalls != nil {
		return *x.PhoneCalls
	}
	return 0
}

func (x *Metrics) GetPhoneImpressions() int64 {
	if x != nil && x.PhoneImpressions != nil {
		return *x.PhoneImpressions
	}
	return 0
}

func (x *Metrics) GetPhoneThroughRate() float64 {
	if x != nil && x.PhoneThroughRate != nil {
		return *x.PhoneThroughRate
	}
	return 0
}

func (x *Metrics) GetRelativeCtr() float64 {
	if x != nil && x.RelativeCtr != nil {
		return *x.RelativeCtr
	}
	return 0
}

func (x *Metrics) GetSearchAbsoluteTopImpressionShare() float64 {
	if x != nil && x.SearchAbsoluteTopImpressionShare != nil {
		return *x.SearchAbsoluteTopImpressionShare
	}
	return 0
}

func (x *Metrics) GetSearchBudgetLostAbsoluteTopImpressionShare() float64 {
	if x != nil && x.SearchBudgetLostAbsoluteTopImpressionShare != nil {
		return *x.SearchBudgetLostAbsoluteTopImpressionShare
	}
	return 0
}

func (x *Metrics) GetSearchBudgetLostImpressionShare() float64 {
	if x != nil && x.SearchBudgetLostImpressionShare != nil {
		return *x.SearchBudgetLostImpressionShare
	}
	return 0
}

func (x *Metrics) GetSearchBudgetLostTopImpressionShare() float64 {
	if x != nil && x.SearchBudgetLostTopImpressionShare != nil {
		return *x.SearchBudgetLostTopImpressionShare
	}
	return 0
}

func (x *Metrics) GetSearchClickShare() float64 {
	if x != nil && x.SearchClickShare != nil {
		return *x.SearchClickShare
	}
	return 0
}

func (x *Metrics) GetSearchExactMatchImpressionShare() float64 {
	if x != nil && x.SearchExactMatchImpressionShare != nil {
		return *x.SearchExactMatchImpressionShare
	}
	return 0
}

func (x *Metrics) GetSearchImpressionShare() float64 {
	if x != nil && x.SearchImpressionShare != nil {
		return *x.SearchImpressionShare
	}
	return 0
}

func (x *Metrics) GetSearchRankLostAbsoluteTopImpressionShare() float64 {
	if x != nil && x.SearchRankLostAbsoluteTopImpressionShare != nil {
		return *x.SearchRankLostAbsoluteTopImpressionShare
	}
	return 0
}

func (x *Metrics) GetSearchRankLostImpressionShare() float64 {
	if x != nil && x.SearchRankLostImpressionShare != nil {
		return *x.SearchRankLostImpressionShare
	}
	return 0
}

func (x *Metrics) GetSearchRankLostTopImpressionShare() float64 {
	if x != nil && x.SearchRankLostTopImpressionShare != nil {
		return *x.SearchRankLostTopImpressionShare
	}
	return 0
}

func (x *Metrics) GetSearchTopImpressionShare() float64 {
	if x != nil && x.SearchTopImpressionShare != nil {
		return *x.SearchTopImpressionShare
	}
	return 0
}

func (x *Metrics) GetSearchVolume() *SearchVolumeRange {
	if x != nil {
		return x.SearchVolume
	}
	return nil
}

func (x *Metrics) GetSpeedScore() int64 {
	if x != nil && x.SpeedScore != nil {
		return *x.SpeedScore
	}
	return 0
}

func (x *Metrics) GetAverageTargetCpaMicros() int64 {
	if x != nil && x.AverageTargetCpaMicros != nil {
		return *x.AverageTargetCpaMicros
	}
	return 0
}

func (x *Metrics) GetAverageTargetRoas() float64 {
	if x != nil && x.AverageTargetRoas != nil {
		return *x.AverageTargetRoas
	}
	return 0
}

func (x *Metrics) GetTopImpressionPercentage() float64 {
	if x != nil && x.TopImpressionPercentage != nil {
		return *x.TopImpressionPercentage
	}
	return 0
}

func (x *Metrics) GetValidAcceleratedMobilePagesClicksPercentage() float64 {
	if x != nil && x.ValidAcceleratedMobilePagesClicksPercentage != nil {
		return *x.ValidAcceleratedMobilePagesClicksPercentage
	}
	return 0
}

func (x *Metrics) GetValuePerAllConversions() float64 {
	if x != nil && x.ValuePerAllConversions != nil {
		return *x.ValuePerAllConversions
	}
	return 0
}

func (x *Metrics) GetValuePerAllConversionsByConversionDate() float64 {
	if x != nil && x.ValuePerAllConversionsByConversionDate != nil {
		return *x.ValuePerAllConversionsByConversionDate
	}
	return 0
}

func (x *Metrics) GetValuePerConversion() float64 {
	if x != nil && x.ValuePerConversion != nil {
		return *x.ValuePerConversion
	}
	return 0
}

func (x *Metrics) GetValuePerConversionsByConversionDate() float64 {
	if x != nil && x.ValuePerConversionsByConversionDate != nil {
		return *x.ValuePerConversionsByConversionDate
	}
	return 0
}

func (x *Metrics) GetValuePerCurrentModelAttributedConversion() float64 {
	if x != nil && x.ValuePerCurrentModelAttributedConversion != nil {
		return *x.ValuePerCurrentModelAttributedConversion
	}
	return 0
}

func (x *Metrics) GetVideoQuartileP100Rate() float64 {
	if x != nil && x.VideoQuartileP100Rate != nil {
		return *x.VideoQuartileP100Rate
	}
	return 0
}

func (x *Metrics) GetVideoQuartileP25Rate() float64 {
	if x != nil && x.VideoQuartileP25Rate != nil {
		return *x.VideoQuartileP25Rate
	}
	return 0
}

func (x *Metrics) GetVideoQuartileP50Rate() float64 {
	if x != nil && x.VideoQuartileP50Rate != nil {
		return *x.VideoQuartileP50Rate
	}
	return 0
}

func (x *Metrics) GetVideoQuartileP75Rate() float64 {
	if x != nil && x.VideoQuartileP75Rate != nil {
		return *x.VideoQuartileP75Rate
	}
	return 0
}

func (x *Metrics) GetVideoViewRate() float64 {
	if x != nil && x.VideoViewRate != nil {
		return *x.VideoViewRate
	}
	return 0
}

func (x *Metrics) GetVideoViews() int64 {
	if x != nil && x.VideoViews != nil {
		return *x.VideoViews
	}
	return 0
}

func (x *Metrics) GetViewThroughConversions() int64 {
	if x != nil && x.ViewThroughConversions != nil {
		return *x.ViewThroughConversions
	}
	return 0
}

func (x *Metrics) GetSkAdNetworkInstalls() int64 {
	if x != nil {
		return x.SkAdNetworkInstalls
	}
	return 0
}

func (x *Metrics) GetSkAdNetworkTotalConversions() int64 {
	if x != nil {
		return x.SkAdNetworkTotalConversions
	}
	return 0
}

func (x *Metrics) GetPublisherPurchasedClicks() int64 {
	if x != nil {
		return x.PublisherPurchasedClicks
	}
	return 0
}

func (x *Metrics) GetPublisherOrganicClicks() int64 {
	if x != nil {
		return x.PublisherOrganicClicks
	}
	return 0
}

func (x *Metrics) GetPublisherUnknownClicks() int64 {
	if x != nil {
		return x.PublisherUnknownClicks
	}
	return 0
}

func (x *Metrics) GetAllConversionsFromLocationAssetClickToCall() float64 {
	if x != nil && x.AllConversionsFromLocationAssetClickToCall != nil {
		return *x.AllConversionsFromLocationAssetClickToCall
	}
	return 0
}

func (x *Metrics) GetAllConversionsFromLocationAssetDirections() float64 {
	if x != nil && x.AllConversionsFromLocationAssetDirections != nil {
		return *x.AllConversionsFromLocationAssetDirections
	}
	return 0
}

func (x *Metrics) GetAllConversionsFromLocationAssetMenu() float64 {
	if x != nil && x.AllConversionsFromLocationAssetMenu != nil {
		return *x.AllConversionsFromLocationAssetMenu
	}
	return 0
}

func (x *Metrics) GetAllConversionsFromLocationAssetOrder() float64 {
	if x != nil && x.AllConversionsFromLocationAssetOrder != nil {
		return *x.AllConversionsFromLocationAssetOrder
	}
	return 0
}

func (x *Metrics) GetAllConversionsFromLocationAssetOtherEngagement() float64 {
	if x != nil && x.AllConversionsFromLocationAssetOtherEngagement != nil {
		return *x.AllConversionsFromLocationAssetOtherEngagement
	}
	return 0
}

func (x *Metrics) GetAllConversionsFromLocationAssetStoreVisits() float64 {
	if x != nil && x.AllConversionsFromLocationAssetStoreVisits != nil {
		return *x.AllConversionsFromLocationAssetStoreVisits
	}
	return 0
}

func (x *Metrics) GetAllConversionsFromLocationAssetWebsite() float64 {
	if x != nil && x.AllConversionsFromLocationAssetWebsite != nil {
		return *x.AllConversionsFromLocationAssetWebsite
	}
	return 0
}

func (x *Metrics) GetEligibleImpressionsFromLocationAssetStoreReach() int64 {
	if x != nil && x.EligibleImpressionsFromLocationAssetStoreReach != nil {
		return *x.EligibleImpressionsFromLocationAssetStoreReach
	}
	return 0
}

func (x *Metrics) GetViewThroughConversionsFromLocationAssetClickToCall() float64 {
	if x != nil && x.ViewThroughConversionsFromLocationAssetClickToCall != nil {
		return *x.ViewThroughConversionsFromLocationAssetClickToCall
	}
	return 0
}

func (x *Metrics) GetViewThroughConversionsFromLocationAssetDirections() float64 {
	if x != nil && x.ViewThroughConversionsFromLocationAssetDirections != nil {
		return *x.ViewThroughConversionsFromLocationAssetDirections
	}
	return 0
}

func (x *Metrics) GetViewThroughConversionsFromLocationAssetMenu() float64 {
	if x != nil && x.ViewThroughConversionsFromLocationAssetMenu != nil {
		return *x.ViewThroughConversionsFromLocationAssetMenu
	}
	return 0
}

func (x *Metrics) GetViewThroughConversionsFromLocationAssetOrder() float64 {
	if x != nil && x.ViewThroughConversionsFromLocationAssetOrder != nil {
		return *x.ViewThroughConversionsFromLocationAssetOrder
	}
	return 0
}

func (x *Metrics) GetViewThroughConversionsFromLocationAssetOtherEngagement() float64 {
	if x != nil && x.ViewThroughConversionsFromLocationAssetOtherEngagement != nil {
		return *x.ViewThroughConversionsFromLocationAssetOtherEngagement
	}
	return 0
}

func (x *Metrics) GetViewThroughConversionsFromLocationAssetStoreVisits() float64 {
	if x != nil && x.ViewThroughConversionsFromLocationAssetStoreVisits != nil {
		return *x.ViewThroughConversionsFromLocationAssetStoreVisits
	}
	return 0
}

func (x *Metrics) GetViewThroughConversionsFromLocationAssetWebsite() float64 {
	if x != nil && x.ViewThroughConversionsFromLocationAssetWebsite != nil {
		return *x.ViewThroughConversionsFromLocationAssetWebsite
	}
	return 0
}

func (x *Metrics) GetOrders() float64 {
	if x != nil && x.Orders != nil {
		return *x.Orders
	}
	return 0
}

func (x *Metrics) GetAverageOrderValueMicros() int64 {
	if x != nil && x.AverageOrderValueMicros != nil {
		return *x.AverageOrderValueMicros
	}
	return 0
}

func (x *Metrics) GetAverageCartSize() float64 {
	if x != nil && x.AverageCartSize != nil {
		return *x.AverageCartSize
	}
	return 0
}

func (x *Metrics) GetCostOfGoodsSoldMicros() int64 {
	if x != nil && x.CostOfGoodsSoldMicros != nil {
		return *x.CostOfGoodsSoldMicros
	}
	return 0
}

func (x *Metrics) GetGrossProfitMicros() int64 {
	if x != nil && x.GrossProfitMicros != nil {
		return *x.GrossProfitMicros
	}
	return 0
}

func (x *Metrics) GetGrossProfitMargin() float64 {
	if x != nil && x.GrossProfitMargin != nil {
		return *x.GrossProfitMargin
	}
	return 0
}

func (x *Metrics) GetRevenueMicros() int64 {
	if x != nil && x.RevenueMicros != nil {
		return *x.RevenueMicros
	}
	return 0
}

func (x *Metrics) GetUnitsSold() float64 {
	if x != nil && x.UnitsSold != nil {
		return *x.UnitsSold
	}
	return 0
}

func (x *Metrics) GetCrossSellCostOfGoodsSoldMicros() int64 {
	if x != nil && x.CrossSellCostOfGoodsSoldMicros != nil {
		return *x.CrossSellCostOfGoodsSoldMicros
	}
	return 0
}

func (x *Metrics) GetCrossSellGrossProfitMicros() int64 {
	if x != nil && x.CrossSellGrossProfitMicros != nil {
		return *x.CrossSellGrossProfitMicros
	}
	return 0
}

func (x *Metrics) GetCrossSellRevenueMicros() int64 {
	if x != nil && x.CrossSellRevenueMicros != nil {
		return *x.CrossSellRevenueMicros
	}
	return 0
}

func (x *Metrics) GetCrossSellUnitsSold() float64 {
	if x != nil && x.CrossSellUnitsSold != nil {
		return *x.CrossSellUnitsSold
	}
	return 0
}

func (x *Metrics) GetLeadCostOfGoodsSoldMicros() int64 {
	if x != nil && x.LeadCostOfGoodsSoldMicros != nil {
		return *x.LeadCostOfGoodsSoldMicros
	}
	return 0
}

func (x *Metrics) GetLeadGrossProfitMicros() int64 {
	if x != nil && x.LeadGrossProfitMicros != nil {
		return *x.LeadGrossProfitMicros
	}
	return 0
}

func (x *Metrics) GetLeadRevenueMicros() int64 {
	if x != nil && x.LeadRevenueMicros != nil {
		return *x.LeadRevenueMicros
	}
	return 0
}

func (x *Metrics) GetLeadUnitsSold() float64 {
	if x != nil && x.LeadUnitsSold != nil {
		return *x.LeadUnitsSold
	}
	return 0
}

func (x *Metrics) GetUniqueUsers() int64 {
	if x != nil && x.UniqueUsers != nil {
		return *x.UniqueUsers
	}
	return 0
}

func (x *Metrics) GetAverageImpressionFrequencyPerUser() float64 {
	if x != nil && x.AverageImpressionFrequencyPerUser != nil {
		return *x.AverageImpressionFrequencyPerUser
	}
	return 0
}

func (x *Metrics) GetLinkedEntitiesCount() int64 {
	if x != nil && x.LinkedEntitiesCount != nil {
		return *x.LinkedEntitiesCount
	}
	return 0
}

func (x *Metrics) GetLinkedSampleEntities() []string {
	if x != nil {
		return x.LinkedSampleEntities
	}
	return nil
}

func (x *Metrics) GetSampleBestPerformanceEntities() []string {
	if x != nil {
		return x.SampleBestPerformanceEntities
	}
	return nil
}

func (x *Metrics) GetSampleGoodPerformanceEntities() []string {
	if x != nil {
		return x.SampleGoodPerformanceEntities
	}
	return nil
}

func (x *Metrics) GetSampleLowPerformanceEntities() []string {
	if x != nil {
		return x.SampleLowPerformanceEntities
	}
	return nil
}

func (x *Metrics) GetSampleLearningPerformanceEntities() []string {
	if x != nil {
		return x.SampleLearningPerformanceEntities
	}
	return nil
}

func (x *Metrics) GetSampleUnratedPerformanceEntities() []string {
	if x != nil {
		return x.SampleUnratedPerformanceEntities
	}
	return nil
}

func (x *Metrics) GetAssetPinnedTotalCount() int64 {
	if x != nil && x.AssetPinnedTotalCount != nil {
		return *x.AssetPinnedTotalCount
	}
	return 0
}

func (x *Metrics) GetAssetPinnedAsHeadlinePositionOneCount() int64 {
	if x != nil && x.AssetPinnedAsHeadlinePositionOneCount != nil {
		return *x.AssetPinnedAsHeadlinePositionOneCount
	}
	return 0
}

func (x *Metrics) GetAssetPinnedAsHeadlinePositionTwoCount() int64 {
	if x != nil && x.AssetPinnedAsHeadlinePositionTwoCount != nil {
		return *x.AssetPinnedAsHeadlinePositionTwoCount
	}
	return 0
}

func (x *Metrics) GetAssetPinnedAsHeadlinePositionThreeCount() int64 {
	if x != nil && x.AssetPinnedAsHeadlinePositionThreeCount != nil {
		return *x.AssetPinnedAsHeadlinePositionThreeCount
	}
	return 0
}

func (x *Metrics) GetAssetPinnedAsDescriptionPositionOneCount() int64 {
	if x != nil && x.AssetPinnedAsDescriptionPositionOneCount != nil {
		return *x.AssetPinnedAsDescriptionPositionOneCount
	}
	return 0
}

func (x *Metrics) GetAssetPinnedAsDescriptionPositionTwoCount() int64 {
	if x != nil && x.AssetPinnedAsDescriptionPositionTwoCount != nil {
		return *x.AssetPinnedAsDescriptionPositionTwoCount
	}
	return 0
}

func (x *Metrics) GetAssetBestPerformanceImpressionPercentage() float64 {
	if x != nil && x.AssetBestPerformanceImpressionPercentage != nil {
		return *x.AssetBestPerformanceImpressionPercentage
	}
	return 0
}

func (x *Metrics) GetAssetGoodPerformanceImpressionPercentage() float64 {
	if x != nil && x.AssetGoodPerformanceImpressionPercentage != nil {
		return *x.AssetGoodPerformanceImpressionPercentage
	}
	return 0
}

func (x *Metrics) GetAssetLowPerformanceImpressionPercentage() float64 {
	if x != nil && x.AssetLowPerformanceImpressionPercentage != nil {
		return *x.AssetLowPerformanceImpressionPercentage
	}
	return 0
}

func (x *Metrics) GetAssetLearningPerformanceImpressionPercentage() float64 {
	if x != nil && x.AssetLearningPerformanceImpressionPercentage != nil {
		return *x.AssetLearningPerformanceImpressionPercentage
	}
	return 0
}

func (x *Metrics) GetAssetUnratedPerformanceImpressionPercentage() float64 {
	if x != nil && x.AssetUnratedPerformanceImpressionPercentage != nil {
		return *x.AssetUnratedPerformanceImpressionPercentage
	}
	return 0
}

func (x *Metrics) GetAssetBestPerformanceCostPercentage() float64 {
	if x != nil && x.AssetBestPerformanceCostPercentage != nil {
		return *x.AssetBestPerformanceCostPercentage
	}
	return 0
}

func (x *Metrics) GetAssetGoodPerformanceCostPercentage() float64 {
	if x != nil && x.AssetGoodPerformanceCostPercentage != nil {
		return *x.AssetGoodPerformanceCostPercentage
	}
	return 0
}

func (x *Metrics) GetAssetLowPerformanceCostPercentage() float64 {
	if x != nil && x.AssetLowPerformanceCostPercentage != nil {
		return *x.AssetLowPerformanceCostPercentage
	}
	return 0
}

func (x *Metrics) GetAssetLearningPerformanceCostPercentage() float64 {
	if x != nil && x.AssetLearningPerformanceCostPercentage != nil {
		return *x.AssetLearningPerformanceCostPercentage
	}
	return 0
}

func (x *Metrics) GetAssetUnratedPerformanceCostPercentage() float64 {
	if x != nil && x.AssetUnratedPerformanceCostPercentage != nil {
		return *x.AssetUnratedPerformanceCostPercentage
	}
	return 0
}

func (x *Metrics) GetStoreVisitsLastClickModelAttributedConversions() float64 {
	if x != nil && x.StoreVisitsLastClickModelAttributedConversions != nil {
		return *x.StoreVisitsLastClickModelAttributedConversions
	}
	return 0
}

func (x *Metrics) GetResultsConversionsPurchase() float64 {
	if x != nil && x.ResultsConversionsPurchase != nil {
		return *x.ResultsConversionsPurchase
	}
	return 0
}

func (x *Metrics) GetVideoViewRateInFeed() float64 {
	if x != nil && x.VideoViewRateInFeed != nil {
		return *x.VideoViewRateInFeed
	}
	return 0
}

func (x *Metrics) GetVideoViewRateInStream() float64 {
	if x != nil && x.VideoViewRateInStream != nil {
		return *x.VideoViewRateInStream
	}
	return 0
}

func (x *Metrics) GetVideoViewRateShorts() float64 {
	if x != nil && x.VideoViewRateShorts != nil {
		return *x.VideoViewRateShorts
	}
	return 0
}

func (x *Metrics) GetCoviewedImpressions() int64 {
	if x != nil && x.CoviewedImpressions != nil {
		return *x.CoviewedImpressions
	}
	return 0
}

func (x *Metrics) GetPrimaryImpressions() int64 {
	if x != nil && x.PrimaryImpressions != nil {
		return *x.PrimaryImpressions
	}
	return 0
}

func (x *Metrics) GetPlatformComparableConversionsFromInteractionsRate() float64 {
	if x != nil && x.PlatformComparableConversionsFromInteractionsRate != nil {
		return *x.PlatformComparableConversionsFromInteractionsRate
	}
	return 0
}

func (x *Metrics) GetPlatformComparableConversions() float64 {
	if x != nil && x.PlatformComparableConversions != nil {
		return *x.PlatformComparableConversions
	}
	return 0
}

func (x *Metrics) GetPlatformComparableConversionsValue() float64 {
	if x != nil && x.PlatformComparableConversionsValue != nil {
		return *x.PlatformComparableConversionsValue
	}
	return 0
}

func (x *Metrics) GetPlatformComparableConversionsValuePerCost() float64 {
	if x != nil && x.PlatformComparableConversionsValuePerCost != nil {
		return *x.PlatformComparableConversionsValuePerCost
	}
	return 0
}

func (x *Metrics) GetPlatformComparableConversionsByConversionDate() float64 {
	if x != nil && x.PlatformComparableConversionsByConversionDate != nil {
		return *x.PlatformComparableConversionsByConversionDate
	}
	return 0
}

func (x *Metrics) GetPlatformComparableConversionsValueByConversionDate() float64 {
	if x != nil && x.PlatformComparableConversionsValueByConversionDate != nil {
		return *x.PlatformComparableConversionsValueByConversionDate
	}
	return 0
}

func (x *Metrics) GetPlatformComparableConversionsFromInteractionsValuePerInteraction() float64 {
	if x != nil && x.PlatformComparableConversionsFromInteractionsValuePerInteraction != nil {
		return *x.PlatformComparableConversionsFromInteractionsValuePerInteraction
	}
	return 0
}

func (x *Metrics) GetCostPerPlatformComparableConversion() float64 {
	if x != nil && x.CostPerPlatformComparableConversion != nil {
		return *x.CostPerPlatformComparableConversion
	}
	return 0
}

func (x *Metrics) GetValuePerPlatformComparableConversion() float64 {
	if x != nil && x.ValuePerPlatformComparableConversion != nil {
		return *x.ValuePerPlatformComparableConversion
	}
	return 0
}

func (x *Metrics) GetValuePerPlatformComparableConversionsByConversionDate() float64 {
	if x != nil && x.ValuePerPlatformComparableConversionsByConversionDate != nil {
		return *x.ValuePerPlatformComparableConversionsByConversionDate
	}
	return 0
}

func (x *Metrics) GetCostConvertedCurrencyPerPlatformComparableConversion() float64 {
	if x != nil && x.CostConvertedCurrencyPerPlatformComparableConversion != nil {
		return *x.CostConvertedCurrencyPerPlatformComparableConversion
	}
	return 0
}

// Search volume range.
// Actual search volume falls within this range.
type SearchVolumeRange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Lower bound of search volume.
	Min *int64 `protobuf:"varint,1,opt,name=min,proto3,oneof" json:"min,omitempty"`
	// Upper bound of search volume.
	Max           *int64 `protobuf:"varint,2,opt,name=max,proto3,oneof" json:"max,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchVolumeRange) Reset() {
	*x = SearchVolumeRange{}
	mi := &file_google_ads_googleads_v20_common_metrics_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchVolumeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchVolumeRange) ProtoMessage() {}

func (x *SearchVolumeRange) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_common_metrics_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchVolumeRange.ProtoReflect.Descriptor instead.
func (*SearchVolumeRange) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_common_metrics_proto_rawDescGZIP(), []int{1}
}

func (x *SearchVolumeRange) GetMin() int64 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *SearchVolumeRange) GetMax() int64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

var File_google_ads_googleads_v20_common_metrics_proto protoreflect.FileDescriptor

const file_google_ads_googleads_v20_common_metrics_proto_rawDesc = "" +
	"\n" +
	"-google/ads/googleads/v20/common/metrics.proto\x12\x1fgoogle.ads.googleads.v20.common\x1a;google/ads/googleads/v20/enums/interaction_event_type.proto\x1a9google/ads/googleads/v20/enums/quality_score_bucket.proto\"ۻ\x01\n" +
	"\aMetrics\x12Q\n" +
	"\"absolute_top_impression_percentage\x18\xb7\x01 \x01(\x01H\x00R\x1fabsoluteTopImpressionPercentage\x88\x01\x01\x12,\n" +
	"\x0factive_view_cpm\x18\xb8\x01 \x01(\x01H\x01R\ractiveViewCpm\x88\x01\x01\x12,\n" +
	"\x0factive_view_ctr\x18\xb9\x01 \x01(\x01H\x02R\ractiveViewCtr\x88\x01\x01\x12<\n" +
	"\x17active_view_impressions\x18\xba\x01 \x01(\x03H\x03R\x15activeViewImpressions\x88\x01\x01\x12@\n" +
	"\x19active_view_measurability\x18\xbb\x01 \x01(\x01H\x04R\x17activeViewMeasurability\x88\x01\x01\x12P\n" +
	"\"active_view_measurable_cost_micros\x18\xbc\x01 \x01(\x03H\x05R\x1eactiveViewMeasurableCostMicros\x88\x01\x01\x12Q\n" +
	"\"active_view_measurable_impressions\x18\xbd\x01 \x01(\x03H\x06R\x1factiveViewMeasurableImpressions\x88\x01\x01\x12<\n" +
	"\x17active_view_viewability\x18\xbe\x01 \x01(\x01H\aR\x15activeViewViewability\x88\x01\x01\x12X\n" +
	"&all_conversions_from_interactions_rate\x18\xbf\x01 \x01(\x01H\bR\"allConversionsFromInteractionsRate\x88\x01\x01\x128\n" +
	"\x15all_conversions_value\x18\xc0\x01 \x01(\x01H\tR\x13allConversionsValue\x88\x01\x01\x12[\n" +
	"(all_conversions_value_by_conversion_date\x18\xf0\x01 \x01(\x01H\n" +
	"R#allConversionsValueByConversionDate\x88\x01\x01\x12J\n" +
	"\x1fall_new_customer_lifetime_value\x18\xa6\x02 \x01(\x01H\vR\x1ballNewCustomerLifetimeValue\x88\x01\x01\x12-\n" +
	"\x0fall_conversions\x18\xc1\x01 \x01(\x01H\fR\x0eallConversions\x88\x01\x01\x12P\n" +
	"\"all_conversions_by_conversion_date\x18\xf1\x01 \x01(\x01H\rR\x1eallConversionsByConversionDate\x88\x01\x01\x12H\n" +
	"\x1eall_conversions_value_per_cost\x18\xc2\x01 \x01(\x01H\x0eR\x1aallConversionsValuePerCost\x88\x01\x01\x12O\n" +
	"\"all_conversions_from_click_to_call\x18\xc3\x01 \x01(\x01H\x0fR\x1dallConversionsFromClickToCall\x88\x01\x01\x12K\n" +
	"\x1fall_conversions_from_directions\x18\xc4\x01 \x01(\x01H\x10R\x1callConversionsFromDirections\x88\x01\x01\x12x\n" +
	"7all_conversions_from_interactions_value_per_interaction\x18\xc5\x01 \x01(\x01H\x11R1allConversionsFromInteractionsValuePerInteraction\x88\x01\x01\x12?\n" +
	"\x19all_conversions_from_menu\x18\xc6\x01 \x01(\x01H\x12R\x16allConversionsFromMenu\x88\x01\x01\x12A\n" +
	"\x1aall_conversions_from_order\x18\xc7\x01 \x01(\x01H\x13R\x17allConversionsFromOrder\x88\x01\x01\x12V\n" +
	"%all_conversions_from_other_engagement\x18\xc8\x01 \x01(\x01H\x14R!allConversionsFromOtherEngagement\x88\x01\x01\x12L\n" +
	" all_conversions_from_store_visit\x18\xc9\x01 \x01(\x01H\x15R\x1callConversionsFromStoreVisit\x88\x01\x01\x12P\n" +
	"\"all_conversions_from_store_website\x18\xca\x01 \x01(\x01H\x16R\x1eallConversionsFromStoreWebsite\x88\x01\x01\x12|\n" +
	"9auction_insight_search_absolute_top_impression_percentage\x18\x82\x02 \x01(\x01H\x17R3auctionInsightSearchAbsoluteTopImpressionPercentage\x88\x01\x01\x12Z\n" +
	"'auction_insight_search_impression_share\x18\x83\x02 \x01(\x01H\x18R#auctionInsightSearchImpressionShare\x88\x01\x01\x12Z\n" +
	"'auction_insight_search_outranking_share\x18\x84\x02 \x01(\x01H\x19R#auctionInsightSearchOutrankingShare\x88\x01\x01\x12R\n" +
	"#auction_insight_search_overlap_rate\x18\x85\x02 \x01(\x01H\x1aR\x1fauctionInsightSearchOverlapRate\x88\x01\x01\x12_\n" +
	"*auction_insight_search_position_above_rate\x18\x86\x02 \x01(\x01H\x1bR%auctionInsightSearchPositionAboveRate\x88\x01\x01\x12k\n" +
	"0auction_insight_search_top_impression_percentage\x18\x87\x02 \x01(\x01H\x1cR+auctionInsightSearchTopImpressionPercentage\x88\x01\x01\x12'\n" +
	"\faverage_cost\x18\xcb\x01 \x01(\x01H\x1dR\vaverageCost\x88\x01\x01\x12%\n" +
	"\vaverage_cpc\x18\xcc\x01 \x01(\x01H\x1eR\n" +
	"averageCpc\x88\x01\x01\x12%\n" +
	"\vaverage_cpe\x18\xcd\x01 \x01(\x01H\x1fR\n" +
	"averageCpe\x88\x01\x01\x12%\n" +
	"\vaverage_cpm\x18\xce\x01 \x01(\x01H R\n" +
	"averageCpm\x88\x01\x01\x12%\n" +
	"\vaverage_cpv\x18\xcf\x01 \x01(\x01H!R\n" +
	"averageCpv\x88\x01\x01\x122\n" +
	"\x12average_page_views\x18\xd0\x01 \x01(\x01H\"R\x10averagePageViews\x88\x01\x01\x125\n" +
	"\x14average_time_on_site\x18\xd1\x01 \x01(\x01H#R\x11averageTimeOnSite\x88\x01\x01\x12?\n" +
	"\x19benchmark_average_max_cpc\x18\xd2\x01 \x01(\x01H$R\x16benchmarkAverageMaxCpc\x88\x01\x01\x12M\n" +
	" biddable_app_install_conversions\x18\xfe\x01 \x01(\x01H%R\x1dbiddableAppInstallConversions\x88\x01\x01\x12V\n" +
	"%biddable_app_post_install_conversions\x18\xff\x01 \x01(\x01H&R!biddableAppPostInstallConversions\x88\x01\x01\x12c\n" +
	",biddable_cohort_app_post_install_conversions\x18\xfa\x02 \x01(\x01H'R'biddableCohortAppPostInstallConversions\x88\x01\x01\x12)\n" +
	"\rbenchmark_ctr\x18\xd3\x01 \x01(\x01H(R\fbenchmarkCtr\x88\x01\x01\x12%\n" +
	"\vbounce_rate\x18\xd4\x01 \x01(\x01H)R\n" +
	"bounceRate\x88\x01\x01\x12\x1c\n" +
	"\x06clicks\x18\x83\x01 \x01(\x03H*R\x06clicks\x88\x01\x01\x12-\n" +
	"\x0fcombined_clicks\x18\x9c\x01 \x01(\x03H+R\x0ecombinedClicks\x88\x01\x01\x12?\n" +
	"\x19combined_clicks_per_query\x18\x9d\x01 \x01(\x01H,R\x16combinedClicksPerQuery\x88\x01\x01\x12/\n" +
	"\x10combined_queries\x18\x9e\x01 \x01(\x03H-R\x0fcombinedQueries\x88\x01\x01\x12T\n" +
	"$content_budget_lost_impression_share\x18\x9f\x01 \x01(\x01H.R contentBudgetLostImpressionShare\x88\x01\x01\x12>\n" +
	"\x18content_impression_share\x18\xa0\x01 \x01(\x01H/R\x16contentImpressionShare\x88\x01\x01\x12_\n" +
	"*conversion_last_received_request_date_time\x18\xa1\x01 \x01(\tH0R%conversionLastReceivedRequestDateTime\x88\x01\x01\x12K\n" +
	"\x1fconversion_last_conversion_date\x18\xa2\x01 \x01(\tH1R\x1cconversionLastConversionDate\x88\x01\x01\x12P\n" +
	"\"content_rank_lost_impression_share\x18\xa3\x01 \x01(\x01H2R\x1econtentRankLostImpressionShare\x88\x01\x01\x12Q\n" +
	"\"conversions_from_interactions_rate\x18\xa4\x01 \x01(\x01H3R\x1fconversionsFromInteractionsRate\x88\x01\x01\x121\n" +
	"\x11conversions_value\x18\xa5\x01 \x01(\x01H4R\x10conversionsValue\x88\x01\x01\x12T\n" +
	"$conversions_value_by_conversion_date\x18\xf2\x01 \x01(\x01H5R conversionsValueByConversionDate\x88\x01\x01\x12C\n" +
	"\x1bnew_customer_lifetime_value\x18\xa5\x02 \x01(\x01H6R\x18newCustomerLifetimeValue\x88\x01\x01\x12A\n" +
	"\x1aconversions_value_per_cost\x18\xa6\x01 \x01(\x01H7R\x17conversionsValuePerCost\x88\x01\x01\x12q\n" +
	"3conversions_from_interactions_value_per_interaction\x18\xa7\x01 \x01(\x01H8R.conversionsFromInteractionsValuePerInteraction\x88\x01\x01\x12&\n" +
	"\vconversions\x18\xa8\x01 \x01(\x01H9R\vconversions\x88\x01\x01\x12I\n" +
	"\x1econversions_by_conversion_date\x18\xf3\x01 \x01(\x01H:R\x1bconversionsByConversionDate\x88\x01\x01\x12%\n" +
	"\vcost_micros\x18\xa9\x01 \x01(\x03H;R\n" +
	"costMicros\x88\x01\x01\x12=\n" +
	"\x18cost_per_all_conversions\x18\xaa\x01 \x01(\x01H<R\x15costPerAllConversions\x88\x01\x01\x124\n" +
	"\x13cost_per_conversion\x18\xab\x01 \x01(\x01H=R\x11costPerConversion\x88\x01\x01\x12c\n" +
	",cost_per_current_model_attributed_conversion\x18\xac\x01 \x01(\x01H>R'costPerCurrentModelAttributedConversion\x88\x01\x01\x12>\n" +
	"\x18cross_device_conversions\x18\xad\x01 \x01(\x01H?R\x16crossDeviceConversions\x88\x01\x01\x12V\n" +
	"%cross_device_conversions_value_micros\x18\xb8\x02 \x01(\x03H@R!crossDeviceConversionsValueMicros\x88\x01\x01\x12\x16\n" +
	"\x03ctr\x18\xae\x01 \x01(\x01HAR\x03ctr\x88\x01\x01\x12U\n" +
	"$current_model_attributed_conversions\x18\xaf\x01 \x01(\x01HBR!currentModelAttributedConversions\x88\x01\x01\x12\x80\x01\n" +
	";current_model_attributed_conversions_from_interactions_rate\x18\xb0\x01 \x01(\x01HCR5currentModelAttributedConversionsFromInteractionsRate\x88\x01\x01\x12\xa0\x01\n" +
	"Lcurrent_model_attributed_conversions_from_interactions_value_per_interaction\x18\xb1\x01 \x01(\x01HDRDcurrentModelAttributedConversionsFromInteractionsValuePerInteraction\x88\x01\x01\x12`\n" +
	"*current_model_attributed_conversions_value\x18\xb2\x01 \x01(\x01HER&currentModelAttributedConversionsValue\x88\x01\x01\x12p\n" +
	"3current_model_attributed_conversions_value_per_cost\x18\xb3\x01 \x01(\x01HFR-currentModelAttributedConversionsValuePerCost\x88\x01\x01\x12-\n" +
	"\x0fengagement_rate\x18\xb4\x01 \x01(\x01HGR\x0eengagementRate\x88\x01\x01\x12&\n" +
	"\vengagements\x18\xb5\x01 \x01(\x03HHR\vengagements\x88\x01\x01\x12J\n" +
	"\x1fhotel_average_lead_value_micros\x18\xd5\x01 \x01(\x01HIR\x1bhotelAverageLeadValueMicros\x88\x01\x01\x12E\n" +
	"\x1chotel_commission_rate_micros\x18\x80\x02 \x01(\x03HJR\x19hotelCommissionRateMicros\x88\x01\x01\x12I\n" +
	"\x1ehotel_expected_commission_cost\x18\x81\x02 \x01(\x01HKR\x1bhotelExpectedCommissionCost\x88\x01\x01\x12O\n" +
	"!hotel_price_difference_percentage\x18\xd6\x01 \x01(\x01HLR\x1ehotelPriceDifferencePercentage\x88\x01\x01\x12B\n" +
	"\x1ahotel_eligible_impressions\x18\xd7\x01 \x01(\x03HMR\x18hotelEligibleImpressions\x88\x01\x01\x12\x94\x01\n" +
	"!historical_creative_quality_score\x18P \x01(\x0e2I.google.ads.googleads.v20.enums.QualityScoreBucketEnum.QualityScoreBucketR\x1ehistoricalCreativeQualityScore\x12\x9b\x01\n" +
	"%historical_landing_page_quality_score\x18Q \x01(\x0e2I.google.ads.googleads.v20.enums.QualityScoreBucketEnum.QualityScoreBucketR!historicalLandingPageQualityScore\x12>\n" +
	"\x18historical_quality_score\x18\xd8\x01 \x01(\x03HNR\x16historicalQualityScore\x88\x01\x01\x12\x90\x01\n" +
	"\x1fhistorical_search_predicted_ctr\x18S \x01(\x0e2I.google.ads.googleads.v20.enums.QualityScoreBucketEnum.QualityScoreBucketR\x1chistoricalSearchPredictedCtr\x12+\n" +
	"\x0egmail_forwards\x18\xd9\x01 \x01(\x03HOR\rgmailForwards\x88\x01\x01\x12%\n" +
	"\vgmail_saves\x18\xda\x01 \x01(\x03HPR\n" +
	"gmailSaves\x88\x01\x01\x12:\n" +
	"\x16gmail_secondary_clicks\x18\xdb\x01 \x01(\x03HQR\x14gmailSecondaryClicks\x88\x01\x01\x12E\n" +
	"\x1cimpressions_from_store_reach\x18\xdc\x01 \x01(\x03HRR\x19impressionsFromStoreReach\x88\x01\x01\x12&\n" +
	"\vimpressions\x18\xdd\x01 \x01(\x03HSR\vimpressions\x88\x01\x01\x12/\n" +
	"\x10interaction_rate\x18\xde\x01 \x01(\x01HTR\x0finteractionRate\x88\x01\x01\x12(\n" +
	"\finteractions\x18\xdf\x01 \x01(\x03HUR\finteractions\x88\x01\x01\x12\x85\x01\n" +
	"\x17interaction_event_types\x18d \x03(\x0e2M.google.ads.googleads.v20.enums.InteractionEventTypeEnum.InteractionEventTypeR\x15interactionEventTypes\x122\n" +
	"\x12invalid_click_rate\x18\xe0\x01 \x01(\x01HVR\x10invalidClickRate\x88\x01\x01\x12+\n" +
	"\x0einvalid_clicks\x18\xe1\x01 \x01(\x03HWR\rinvalidClicks\x88\x01\x01\x12A\n" +
	"\x1ageneral_invalid_click_rate\x18\xf2\x02 \x01(\x01HXR\x17generalInvalidClickRate\x88\x01\x01\x12:\n" +
	"\x16general_invalid_clicks\x18\xf3\x02 \x01(\x03HYR\x14generalInvalidClicks\x88\x01\x01\x12)\n" +
	"\rmessage_chats\x18\xe2\x01 \x01(\x03HZR\fmessageChats\x88\x01\x01\x125\n" +
	"\x13message_impressions\x18\xe3\x01 \x01(\x03H[R\x12messageImpressions\x88\x01\x01\x120\n" +
	"\x11message_chat_rate\x18\xe4\x01 \x01(\x01H\\R\x0fmessageChatRate\x88\x01\x01\x12O\n" +
	"!mobile_friendly_clicks_percentage\x18\xe5\x01 \x01(\x01H]R\x1emobileFriendlyClicksPercentage\x88\x01\x01\x12@\n" +
	"\x19optimization_score_uplift\x18\xf7\x01 \x01(\x01H^R\x17optimizationScoreUplift\x88\x01\x01\x12:\n" +
	"\x16optimization_score_url\x18\xf8\x01 \x01(\tH_R\x14optimizationScoreUrl\x88\x01\x01\x12+\n" +
	"\x0eorganic_clicks\x18\xe6\x01 \x01(\x03H`R\rorganicClicks\x88\x01\x01\x12=\n" +
	"\x18organic_clicks_per_query\x18\xe7\x01 \x01(\x01HaR\x15organicClicksPerQuery\x88\x01\x01\x125\n" +
	"\x13organic_impressions\x18\xe8\x01 \x01(\x03HbR\x12organicImpressions\x88\x01\x01\x12G\n" +
	"\x1dorganic_impressions_per_query\x18\xe9\x01 \x01(\x01HcR\x1aorganicImpressionsPerQuery\x88\x01\x01\x12-\n" +
	"\x0forganic_queries\x18\xea\x01 \x01(\x03HdR\x0eorganicQueries\x88\x01\x01\x126\n" +
	"\x14percent_new_visitors\x18\xeb\x01 \x01(\x01HeR\x12percentNewVisitors\x88\x01\x01\x12%\n" +
	"\vphone_calls\x18\xec\x01 \x01(\x03HfR\n" +
	"phoneCalls\x88\x01\x01\x121\n" +
	"\x11phone_impressions\x18\xed\x01 \x01(\x03HgR\x10phoneImpressions\x88\x01\x01\x122\n" +
	"\x12phone_through_rate\x18\xee\x01 \x01(\x01HhR\x10phoneThroughRate\x88\x01\x01\x12'\n" +
	"\frelative_ctr\x18\xef\x01 \x01(\x01HiR\vrelativeCtr\x88\x01\x01\x12T\n" +
	"$search_absolute_top_impression_share\x18\x88\x01 \x01(\x01HjR searchAbsoluteTopImpressionShare\x88\x01\x01\x12j\n" +
	"0search_budget_lost_absolute_top_impression_share\x18\x89\x01 \x01(\x01HkR*searchBudgetLostAbsoluteTopImpressionShare\x88\x01\x01\x12R\n" +
	"#search_budget_lost_impression_share\x18\x8a\x01 \x01(\x01HlR\x1fsearchBudgetLostImpressionShare\x88\x01\x01\x12Y\n" +
	"'search_budget_lost_top_impression_share\x18\x8b\x01 \x01(\x01HmR\"searchBudgetLostTopImpressionShare\x88\x01\x01\x122\n" +
	"\x12search_click_share\x18\x8c\x01 \x01(\x01HnR\x10searchClickShare\x88\x01\x01\x12R\n" +
	"#search_exact_match_impression_share\x18\x8d\x01 \x01(\x01HoR\x1fsearchExactMatchImpressionShare\x88\x01\x01\x12<\n" +
	"\x17search_impression_share\x18\x8e\x01 \x01(\x01HpR\x15searchImpressionShare\x88\x01\x01\x12f\n" +
	".search_rank_lost_absolute_top_impression_share\x18\x8f\x01 \x01(\x01HqR(searchRankLostAbsoluteTopImpressionShare\x88\x01\x01\x12N\n" +
	"!search_rank_lost_impression_share\x18\x90\x01 \x01(\x01HrR\x1dsearchRankLostImpressionShare\x88\x01\x01\x12U\n" +
	"%search_rank_lost_top_impression_share\x18\x91\x01 \x01(\x01HsR searchRankLostTopImpressionShare\x88\x01\x01\x12C\n" +
	"\x1bsearch_top_impression_share\x18\x92\x01 \x01(\x01HtR\x18searchTopImpressionShare\x88\x01\x01\x12]\n" +
	"\rsearch_volume\x18\xa7\x02 \x01(\v22.google.ads.googleads.v20.common.SearchVolumeRangeHuR\fsearchVolume\x88\x01\x01\x12%\n" +
	"\vspeed_score\x18\x93\x01 \x01(\x03HvR\n" +
	"speedScore\x88\x01\x01\x12?\n" +
	"\x19average_target_cpa_micros\x18\xa2\x02 \x01(\x03HwR\x16averageTargetCpaMicros\x88\x01\x01\x124\n" +
	"\x13average_target_roas\x18\xfa\x01 \x01(\x01HxR\x11averageTargetRoas\x88\x01\x01\x12@\n" +
	"\x19top_impression_percentage\x18\x94\x01 \x01(\x01HyR\x17topImpressionPercentage\x88\x01\x01\x12k\n" +
	"0valid_accelerated_mobile_pages_clicks_percentage\x18\x95\x01 \x01(\x01HzR+validAcceleratedMobilePagesClicksPercentage\x88\x01\x01\x12?\n" +
	"\x19value_per_all_conversions\x18\x96\x01 \x01(\x01H{R\x16valuePerAllConversions\x88\x01\x01\x12b\n" +
	",value_per_all_conversions_by_conversion_date\x18\xf4\x01 \x01(\x01H|R&valuePerAllConversionsByConversionDate\x88\x01\x01\x126\n" +
	"\x14value_per_conversion\x18\x97\x01 \x01(\x01H}R\x12valuePerConversion\x88\x01\x01\x12[\n" +
	"(value_per_conversions_by_conversion_date\x18\xf5\x01 \x01(\x01H~R#valuePerConversionsByConversionDate\x88\x01\x01\x12e\n" +
	"-value_per_current_model_attributed_conversion\x18\x98\x01 \x01(\x01H\x7fR(valuePerCurrentModelAttributedConversion\x88\x01\x01\x12>\n" +
	"\x18video_quartile_p100_rate\x18\x84\x01 \x01(\x01H\x80\x01R\x15videoQuartileP100Rate\x88\x01\x01\x12<\n" +
	"\x17video_quartile_p25_rate\x18\x85\x01 \x01(\x01H\x81\x01R\x14videoQuartileP25Rate\x88\x01\x01\x12<\n" +
	"\x17video_quartile_p50_rate\x18\x86\x01 \x01(\x01H\x82\x01R\x14videoQuartileP50Rate\x88\x01\x01\x12<\n" +
	"\x17video_quartile_p75_rate\x18\x87\x01 \x01(\x01H\x83\x01R\x14videoQuartileP75Rate\x88\x01\x01\x12-\n" +
	"\x0fvideo_view_rate\x18\x99\x01 \x01(\x01H\x84\x01R\rvideoViewRate\x88\x01\x01\x12&\n" +
	"\vvideo_views\x18\x9a\x01 \x01(\x03H\x85\x01R\n" +
	"videoViews\x88\x01\x01\x12?\n" +
	"\x18view_through_conversions\x18\x9b\x01 \x01(\x03H\x86\x01R\x16viewThroughConversions\x88\x01\x01\x124\n" +
	"\x16sk_ad_network_installs\x18\xf6\x01 \x01(\x03R\x13skAdNetworkInstalls\x12E\n" +
	"\x1fsk_ad_network_total_conversions\x18\xa4\x02 \x01(\x03R\x1bskAdNetworkTotalConversions\x12=\n" +
	"\x1apublisher_purchased_clicks\x18\x88\x02 \x01(\x03R\x18publisherPurchasedClicks\x129\n" +
	"\x18publisher_organic_clicks\x18\x89\x02 \x01(\x03R\x16publisherOrganicClicks\x129\n" +
	"\x18publisher_unknown_clicks\x18\x8a\x02 \x01(\x03R\x16publisherUnknownClicks\x12l\n" +
	"1all_conversions_from_location_asset_click_to_call\x18\x8b\x02 \x01(\x01H\x87\x01R*allConversionsFromLocationAssetClickToCall\x88\x01\x01\x12h\n" +
	".all_conversions_from_location_asset_directions\x18\x8c\x02 \x01(\x01H\x88\x01R)allConversionsFromLocationAssetDirections\x88\x01\x01\x12\\\n" +
	"(all_conversions_from_location_asset_menu\x18\x8d\x02 \x01(\x01H\x89\x01R#allConversionsFromLocationAssetMenu\x88\x01\x01\x12^\n" +
	")all_conversions_from_location_asset_order\x18\x8e\x02 \x01(\x01H\x8a\x01R$allConversionsFromLocationAssetOrder\x88\x01\x01\x12s\n" +
	"4all_conversions_from_location_asset_other_engagement\x18\x8f\x02 \x01(\x01H\x8b\x01R.allConversionsFromLocationAssetOtherEngagement\x88\x01\x01\x12k\n" +
	"0all_conversions_from_location_asset_store_visits\x18\x90\x02 \x01(\x01H\x8c\x01R*allConversionsFromLocationAssetStoreVisits\x88\x01\x01\x12b\n" +
	"+all_conversions_from_location_asset_website\x18\x91\x02 \x01(\x01H\x8d\x01R&allConversionsFromLocationAssetWebsite\x88\x01\x01\x12s\n" +
	"4eligible_impressions_from_location_asset_store_reach\x18\x92\x02 \x01(\x03H\x8e\x01R.eligibleImpressionsFromLocationAssetStoreReach\x88\x01\x01\x12}\n" +
	":view_through_conversions_from_location_asset_click_to_call\x18\x93\x02 \x01(\x01H\x8f\x01R2viewThroughConversionsFromLocationAssetClickToCall\x88\x01\x01\x12y\n" +
	"7view_through_conversions_from_location_asset_directions\x18\x94\x02 \x01(\x01H\x90\x01R1viewThroughConversionsFromLocationAssetDirections\x88\x01\x01\x12m\n" +
	"1view_through_conversions_from_location_asset_menu\x18\x95\x02 \x01(\x01H\x91\x01R+viewThroughConversionsFromLocationAssetMenu\x88\x01\x01\x12o\n" +
	"2view_through_conversions_from_location_asset_order\x18\x96\x02 \x01(\x01H\x92\x01R,viewThroughConversionsFromLocationAssetOrder\x88\x01\x01\x12\x84\x01\n" +
	"=view_through_conversions_from_location_asset_other_engagement\x18\x97\x02 \x01(\x01H\x93\x01R6viewThroughConversionsFromLocationAssetOtherEngagement\x88\x01\x01\x12|\n" +
	"9view_through_conversions_from_location_asset_store_visits\x18\x98\x02 \x01(\x01H\x94\x01R2viewThroughConversionsFromLocationAssetStoreVisits\x88\x01\x01\x12s\n" +
	"4view_through_conversions_from_location_asset_website\x18\x99\x02 \x01(\x01H\x95\x01R.viewThroughConversionsFromLocationAssetWebsite\x88\x01\x01\x12\x1d\n" +
	"\x06orders\x18\xa8\x02 \x01(\x01H\x96\x01R\x06orders\x88\x01\x01\x12B\n" +
	"\x1aaverage_order_value_micros\x18\xa9\x02 \x01(\x03H\x97\x01R\x17averageOrderValueMicros\x88\x01\x01\x121\n" +
	"\x11average_cart_size\x18\xaa\x02 \x01(\x01H\x98\x01R\x0faverageCartSize\x88\x01\x01\x12?\n" +
	"\x19cost_of_goods_sold_micros\x18\xab\x02 \x01(\x03H\x99\x01R\x15costOfGoodsSoldMicros\x88\x01\x01\x125\n" +
	"\x13gross_profit_micros\x18\xac\x02 \x01(\x03H\x9a\x01R\x11grossProfitMicros\x88\x01\x01\x125\n" +
	"\x13gross_profit_margin\x18\xad\x02 \x01(\x01H\x9b\x01R\x11grossProfitMargin\x88\x01\x01\x12,\n" +
	"\x0erevenue_micros\x18\xae\x02 \x01(\x03H\x9c\x01R\rrevenueMicros\x88\x01\x01\x12$\n" +
	"\n" +
	"units_sold\x18\xaf\x02 \x01(\x01H\x9d\x01R\tunitsSold\x88\x01\x01\x12S\n" +
	"$cross_sell_cost_of_goods_sold_micros\x18\xb0\x02 \x01(\x03H\x9e\x01R\x1ecrossSellCostOfGoodsSoldMicros\x88\x01\x01\x12I\n" +
	"\x1ecross_sell_gross_profit_micros\x18\xb1\x02 \x01(\x03H\x9f\x01R\x1acrossSellGrossProfitMicros\x88\x01\x01\x12@\n" +
	"\x19cross_sell_revenue_micros\x18\xb2\x02 \x01(\x03H\xa0\x01R\x16crossSellRevenueMicros\x88\x01\x01\x128\n" +
	"\x15cross_sell_units_sold\x18\xb3\x02 \x01(\x01H\xa1\x01R\x12crossSellUnitsSold\x88\x01\x01\x12H\n" +
	"\x1elead_cost_of_goods_sold_micros\x18\xb4\x02 \x01(\x03H\xa2\x01R\x19leadCostOfGoodsSoldMicros\x88\x01\x01\x12>\n" +
	"\x18lead_gross_profit_micros\x18\xb5\x02 \x01(\x03H\xa3\x01R\x15leadGrossProfitMicros\x88\x01\x01\x125\n" +
	"\x13lead_revenue_micros\x18\xb6\x02 \x01(\x03H\xa4\x01R\x11leadRevenueMicros\x88\x01\x01\x12-\n" +
	"\x0flead_units_sold\x18\xb7\x02 \x01(\x01H\xa5\x01R\rleadUnitsSold\x88\x01\x01\x12(\n" +
	"\funique_users\x18\xbf\x02 \x01(\x03H\xa6\x01R\vuniqueUsers\x88\x01\x01\x12W\n" +
	"%average_impression_frequency_per_user\x18\xc0\x02 \x01(\x01H\xa7\x01R!averageImpressionFrequencyPerUser\x88\x01\x01\x129\n" +
	"\x15linked_entities_count\x18\xd5\x02 \x01(\x03H\xa8\x01R\x13linkedEntitiesCount\x88\x01\x01\x125\n" +
	"\x16linked_sample_entities\x18\xd6\x02 \x03(\tR\x14linkedSampleEntities\x12H\n" +
	" sample_best_performance_entities\x18\xd7\x02 \x03(\tR\x1dsampleBestPerformanceEntities\x12H\n" +
	" sample_good_performance_entities\x18\xd8\x02 \x03(\tR\x1dsampleGoodPerformanceEntities\x12F\n" +
	"\x1fsample_low_performance_entities\x18\xd9\x02 \x03(\tR\x1csampleLowPerformanceEntities\x12P\n" +
	"$sample_learning_performance_entities\x18\xda\x02 \x03(\tR!sampleLearningPerformanceEntities\x12N\n" +
	"#sample_unrated_performance_entities\x18\xdb\x02 \x03(\tR sampleUnratedPerformanceEntities\x12>\n" +
	"\x18asset_pinned_total_count\x18\xdc\x02 \x01(\x03H\xa9\x01R\x15assetPinnedTotalCount\x88\x01\x01\x12a\n" +
	"+asset_pinned_as_headline_position_one_count\x18\xdd\x02 \x01(\x03H\xaa\x01R%assetPinnedAsHeadlinePositionOneCount\x88\x01\x01\x12a\n" +
	"+asset_pinned_as_headline_position_two_count\x18\xde\x02 \x01(\x03H\xab\x01R%assetPinnedAsHeadlinePositionTwoCount\x88\x01\x01\x12e\n" +
	"-asset_pinned_as_headline_position_three_count\x18\xdf\x02 \x01(\x03H\xac\x01R'assetPinnedAsHeadlinePositionThreeCount\x88\x01\x01\x12g\n" +
	".asset_pinned_as_description_position_one_count\x18\xe0\x02 \x01(\x03H\xad\x01R(assetPinnedAsDescriptionPositionOneCount\x88\x01\x01\x12g\n" +
	".asset_pinned_as_description_position_two_count\x18\xe1\x02 \x01(\x03H\xae\x01R(assetPinnedAsDescriptionPositionTwoCount\x88\x01\x01\x12e\n" +
	",asset_best_performance_impression_percentage\x18\xe2\x02 \x01(\x01H\xaf\x01R(assetBestPerformanceImpressionPercentage\x88\x01\x01\x12e\n" +
	",asset_good_performance_impression_percentage\x18\xe3\x02 \x01(\x01H\xb0\x01R(assetGoodPerformanceImpressionPercentage\x88\x01\x01\x12c\n" +
	"+asset_low_performance_impression_percentage\x18\xe4\x02 \x01(\x01H\xb1\x01R'assetLowPerformanceImpressionPercentage\x88\x01\x01\x12m\n" +
	"0asset_learning_performance_impression_percentage\x18\xe5\x02 \x01(\x01H\xb2\x01R,assetLearningPerformanceImpressionPercentage\x88\x01\x01\x12k\n" +
	"/asset_unrated_performance_impression_percentage\x18\xe6\x02 \x01(\x01H\xb3\x01R+assetUnratedPerformanceImpressionPercentage\x88\x01\x01\x12Y\n" +
	"&asset_best_performance_cost_percentage\x18\xe7\x02 \x01(\x01H\xb4\x01R\"assetBestPerformanceCostPercentage\x88\x01\x01\x12Y\n" +
	"&asset_good_performance_cost_percentage\x18\xe8\x02 \x01(\x01H\xb5\x01R\"assetGoodPerformanceCostPercentage\x88\x01\x01\x12W\n" +
	"%asset_low_performance_cost_percentage\x18\xe9\x02 \x01(\x01H\xb6\x01R!assetLowPerformanceCostPercentage\x88\x01\x01\x12a\n" +
	"*asset_learning_performance_cost_percentage\x18\xea\x02 \x01(\x01H\xb7\x01R&assetLearningPerformanceCostPercentage\x88\x01\x01\x12_\n" +
	")asset_unrated_performance_cost_percentage\x18\xeb\x02 \x01(\x01H\xb8\x01R%assetUnratedPerformanceCostPercentage\x88\x01\x01\x12s\n" +
	"4store_visits_last_click_model_attributed_conversions\x18\xed\x02 \x01(\x01H\xb9\x01R.storeVisitsLastClickModelAttributedConversions\x88\x01\x01\x12G\n" +
	"\x1cresults_conversions_purchase\x18\xee\x02 \x01(\x01H\xba\x01R\x1aresultsConversionsPurchase\x88\x01\x01\x12;\n" +
	"\x17video_view_rate_in_feed\x18\xef\x02 \x01(\x01H\xbb\x01R\x13videoViewRateInFeed\x88\x01\x01\x12?\n" +
	"\x19video_view_rate_in_stream\x18\xf0\x02 \x01(\x01H\xbc\x01R\x15videoViewRateInStream\x88\x01\x01\x12:\n" +
	"\x16video_view_rate_shorts\x18\xf1\x02 \x01(\x01H\xbd\x01R\x13videoViewRateShorts\x88\x01\x01\x128\n" +
	"\x14coviewed_impressions\x18\xfc\x02 \x01(\x03H\xbe\x01R\x13coviewedImpressions\x88\x01\x01\x126\n" +
	"\x13primary_impressions\x18\xfd\x02 \x01(\x03H\xbf\x01R\x12primaryImpressions\x88\x01\x01\x12x\n" +
	"6platform_comparable_conversions_from_interactions_rate\x18\xfe\x02 \x01(\x01H\xc0\x01R1platformComparableConversionsFromInteractionsRate\x88\x01\x01\x12M\n" +
	"\x1fplatform_comparable_conversions\x18\xff\x02 \x01(\x01H\xc1\x01R\x1dplatformComparableConversions\x88\x01\x01\x12X\n" +
	"%platform_comparable_conversions_value\x18\x80\x03 \x01(\x01H\xc2\x01R\"platformComparableConversionsValue\x88\x01\x01\x12h\n" +
	".platform_comparable_conversions_value_per_cost\x18\x81\x03 \x01(\x01H\xc3\x01R)platformComparableConversionsValuePerCost\x88\x01\x01\x12p\n" +
	"2platform_comparable_conversions_by_conversion_date\x18\x82\x03 \x01(\x01H\xc4\x01R-platformComparableConversionsByConversionDate\x88\x01\x01\x12{\n" +
	"8platform_comparable_conversions_value_by_conversion_date\x18\x83\x03 \x01(\x01H\xc5\x01R2platformComparableConversionsValueByConversionDate\x88\x01\x01\x12\x98\x01\n" +
	"Gplatform_comparable_conversions_from_interactions_value_per_interaction\x18\x84\x03 \x01(\x01H\xc6\x01R@platformComparableConversionsFromInteractionsValuePerInteraction\x88\x01\x01\x12[\n" +
	"'cost_per_platform_comparable_conversion\x18\x85\x03 \x01(\x01H\xc7\x01R#costPerPlatformComparableConversion\x88\x01\x01\x12]\n" +
	"(value_per_platform_comparable_conversion\x18\x86\x03 \x01(\x01H\xc8\x01R$valuePerPlatformComparableConversion\x88\x01\x01\x12\x82\x01\n" +
	"<value_per_platform_comparable_conversions_by_conversion_date\x18\x87\x03 \x01(\x01H\xc9\x01R5valuePerPlatformComparableConversionsByConversionDate\x88\x01\x01\x12\x7f\n" +
	":cost_converted_currency_per_platform_comparable_conversion\x18\x88\x03 \x01(\x01H\xca\x01R4costConvertedCurrencyPerPlatformComparableConversion\x88\x01\x01B%\n" +
	"#_absolute_top_impression_percentageB\x12\n" +
	"\x10_active_view_cpmB\x12\n" +
	"\x10_active_view_ctrB\x1a\n" +
	"\x18_active_view_impressionsB\x1c\n" +
	"\x1a_active_view_measurabilityB%\n" +
	"#_active_view_measurable_cost_microsB%\n" +
	"#_active_view_measurable_impressionsB\x1a\n" +
	"\x18_active_view_viewabilityB)\n" +
	"'_all_conversions_from_interactions_rateB\x18\n" +
	"\x16_all_conversions_valueB+\n" +
	")_all_conversions_value_by_conversion_dateB\"\n" +
	" _all_new_customer_lifetime_valueB\x12\n" +
	"\x10_all_conversionsB%\n" +
	"#_all_conversions_by_conversion_dateB!\n" +
	"\x1f_all_conversions_value_per_costB%\n" +
	"#_all_conversions_from_click_to_callB\"\n" +
	" _all_conversions_from_directionsB:\n" +
	"8_all_conversions_from_interactions_value_per_interactionB\x1c\n" +
	"\x1a_all_conversions_from_menuB\x1d\n" +
	"\x1b_all_conversions_from_orderB(\n" +
	"&_all_conversions_from_other_engagementB#\n" +
	"!_all_conversions_from_store_visitB%\n" +
	"#_all_conversions_from_store_websiteB<\n" +
	":_auction_insight_search_absolute_top_impression_percentageB*\n" +
	"(_auction_insight_search_impression_shareB*\n" +
	"(_auction_insight_search_outranking_shareB&\n" +
	"$_auction_insight_search_overlap_rateB-\n" +
	"+_auction_insight_search_position_above_rateB3\n" +
	"1_auction_insight_search_top_impression_percentageB\x0f\n" +
	"\r_average_costB\x0e\n" +
	"\f_average_cpcB\x0e\n" +
	"\f_average_cpeB\x0e\n" +
	"\f_average_cpmB\x0e\n" +
	"\f_average_cpvB\x15\n" +
	"\x13_average_page_viewsB\x17\n" +
	"\x15_average_time_on_siteB\x1c\n" +
	"\x1a_benchmark_average_max_cpcB#\n" +
	"!_biddable_app_install_conversionsB(\n" +
	"&_biddable_app_post_install_conversionsB/\n" +
	"-_biddable_cohort_app_post_install_conversionsB\x10\n" +
	"\x0e_benchmark_ctrB\x0e\n" +
	"\f_bounce_rateB\t\n" +
	"\a_clicksB\x12\n" +
	"\x10_combined_clicksB\x1c\n" +
	"\x1a_combined_clicks_per_queryB\x13\n" +
	"\x11_combined_queriesB'\n" +
	"%_content_budget_lost_impression_shareB\x1b\n" +
	"\x19_content_impression_shareB-\n" +
	"+_conversion_last_received_request_date_timeB\"\n" +
	" _conversion_last_conversion_dateB%\n" +
	"#_content_rank_lost_impression_shareB%\n" +
	"#_conversions_from_interactions_rateB\x14\n" +
	"\x12_conversions_valueB'\n" +
	"%_conversions_value_by_conversion_dateB\x1e\n" +
	"\x1c_new_customer_lifetime_valueB\x1d\n" +
	"\x1b_conversions_value_per_costB6\n" +
	"4_conversions_from_interactions_value_per_interactionB\x0e\n" +
	"\f_conversionsB!\n" +
	"\x1f_conversions_by_conversion_dateB\x0e\n" +
	"\f_cost_microsB\x1b\n" +
	"\x19_cost_per_all_conversionsB\x16\n" +
	"\x14_cost_per_conversionB/\n" +
	"-_cost_per_current_model_attributed_conversionB\x1b\n" +
	"\x19_cross_device_conversionsB(\n" +
	"&_cross_device_conversions_value_microsB\x06\n" +
	"\x04_ctrB'\n" +
	"%_current_model_attributed_conversionsB>\n" +
	"<_current_model_attributed_conversions_from_interactions_rateBO\n" +
	"M_current_model_attributed_conversions_from_interactions_value_per_interactionB-\n" +
	"+_current_model_attributed_conversions_valueB6\n" +
	"4_current_model_attributed_conversions_value_per_costB\x12\n" +
	"\x10_engagement_rateB\x0e\n" +
	"\f_engagementsB\"\n" +
	" _hotel_average_lead_value_microsB\x1f\n" +
	"\x1d_hotel_commission_rate_microsB!\n" +
	"\x1f_hotel_expected_commission_costB$\n" +
	"\"_hotel_price_difference_percentageB\x1d\n" +
	"\x1b_hotel_eligible_impressionsB\x1b\n" +
	"\x19_historical_quality_scoreB\x11\n" +
	"\x0f_gmail_forwardsB\x0e\n" +
	"\f_gmail_savesB\x19\n" +
	"\x17_gmail_secondary_clicksB\x1f\n" +
	"\x1d_impressions_from_store_reachB\x0e\n" +
	"\f_impressionsB\x13\n" +
	"\x11_interaction_rateB\x0f\n" +
	"\r_interactionsB\x15\n" +
	"\x13_invalid_click_rateB\x11\n" +
	"\x0f_invalid_clicksB\x1d\n" +
	"\x1b_general_invalid_click_rateB\x19\n" +
	"\x17_general_invalid_clicksB\x10\n" +
	"\x0e_message_chatsB\x16\n" +
	"\x14_message_impressionsB\x14\n" +
	"\x12_message_chat_rateB$\n" +
	"\"_mobile_friendly_clicks_percentageB\x1c\n" +
	"\x1a_optimization_score_upliftB\x19\n" +
	"\x17_optimization_score_urlB\x11\n" +
	"\x0f_organic_clicksB\x1b\n" +
	"\x19_organic_clicks_per_queryB\x16\n" +
	"\x14_organic_impressionsB \n" +
	"\x1e_organic_impressions_per_queryB\x12\n" +
	"\x10_organic_queriesB\x17\n" +
	"\x15_percent_new_visitorsB\x0e\n" +
	"\f_phone_callsB\x14\n" +
	"\x12_phone_impressionsB\x15\n" +
	"\x13_phone_through_rateB\x0f\n" +
	"\r_relative_ctrB'\n" +
	"%_search_absolute_top_impression_shareB3\n" +
	"1_search_budget_lost_absolute_top_impression_shareB&\n" +
	"$_search_budget_lost_impression_shareB*\n" +
	"(_search_budget_lost_top_impression_shareB\x15\n" +
	"\x13_search_click_shareB&\n" +
	"$_search_exact_match_impression_shareB\x1a\n" +
	"\x18_search_impression_shareB1\n" +
	"/_search_rank_lost_absolute_top_impression_shareB$\n" +
	"\"_search_rank_lost_impression_shareB(\n" +
	"&_search_rank_lost_top_impression_shareB\x1e\n" +
	"\x1c_search_top_impression_shareB\x10\n" +
	"\x0e_search_volumeB\x0e\n" +
	"\f_speed_scoreB\x1c\n" +
	"\x1a_average_target_cpa_microsB\x16\n" +
	"\x14_average_target_roasB\x1c\n" +
	"\x1a_top_impression_percentageB3\n" +
	"1_valid_accelerated_mobile_pages_clicks_percentageB\x1c\n" +
	"\x1a_value_per_all_conversionsB/\n" +
	"-_value_per_all_conversions_by_conversion_dateB\x17\n" +
	"\x15_value_per_conversionB+\n" +
	")_value_per_conversions_by_conversion_dateB0\n" +
	"._value_per_current_model_attributed_conversionB\x1b\n" +
	"\x19_video_quartile_p100_rateB\x1a\n" +
	"\x18_video_quartile_p25_rateB\x1a\n" +
	"\x18_video_quartile_p50_rateB\x1a\n" +
	"\x18_video_quartile_p75_rateB\x12\n" +
	"\x10_video_view_rateB\x0e\n" +
	"\f_video_viewsB\x1b\n" +
	"\x19_view_through_conversionsB4\n" +
	"2_all_conversions_from_location_asset_click_to_callB1\n" +
	"/_all_conversions_from_location_asset_directionsB+\n" +
	")_all_conversions_from_location_asset_menuB,\n" +
	"*_all_conversions_from_location_asset_orderB7\n" +
	"5_all_conversions_from_location_asset_other_engagementB3\n" +
	"1_all_conversions_from_location_asset_store_visitsB.\n" +
	",_all_conversions_from_location_asset_websiteB7\n" +
	"5_eligible_impressions_from_location_asset_store_reachB=\n" +
	";_view_through_conversions_from_location_asset_click_to_callB:\n" +
	"8_view_through_conversions_from_location_asset_directionsB4\n" +
	"2_view_through_conversions_from_location_asset_menuB5\n" +
	"3_view_through_conversions_from_location_asset_orderB@\n" +
	">_view_through_conversions_from_location_asset_other_engagementB<\n" +
	":_view_through_conversions_from_location_asset_store_visitsB7\n" +
	"5_view_through_conversions_from_location_asset_websiteB\t\n" +
	"\a_ordersB\x1d\n" +
	"\x1b_average_order_value_microsB\x14\n" +
	"\x12_average_cart_sizeB\x1c\n" +
	"\x1a_cost_of_goods_sold_microsB\x16\n" +
	"\x14_gross_profit_microsB\x16\n" +
	"\x14_gross_profit_marginB\x11\n" +
	"\x0f_revenue_microsB\r\n" +
	"\v_units_soldB'\n" +
	"%_cross_sell_cost_of_goods_sold_microsB!\n" +
	"\x1f_cross_sell_gross_profit_microsB\x1c\n" +
	"\x1a_cross_sell_revenue_microsB\x18\n" +
	"\x16_cross_sell_units_soldB!\n" +
	"\x1f_lead_cost_of_goods_sold_microsB\x1b\n" +
	"\x19_lead_gross_profit_microsB\x16\n" +
	"\x14_lead_revenue_microsB\x12\n" +
	"\x10_lead_units_soldB\x0f\n" +
	"\r_unique_usersB(\n" +
	"&_average_impression_frequency_per_userB\x18\n" +
	"\x16_linked_entities_countB\x1b\n" +
	"\x19_asset_pinned_total_countB.\n" +
	",_asset_pinned_as_headline_position_one_countB.\n" +
	",_asset_pinned_as_headline_position_two_countB0\n" +
	"._asset_pinned_as_headline_position_three_countB1\n" +
	"/_asset_pinned_as_description_position_one_countB1\n" +
	"/_asset_pinned_as_description_position_two_countB/\n" +
	"-_asset_best_performance_impression_percentageB/\n" +
	"-_asset_good_performance_impression_percentageB.\n" +
	",_asset_low_performance_impression_percentageB3\n" +
	"1_asset_learning_performance_impression_percentageB2\n" +
	"0_asset_unrated_performance_impression_percentageB)\n" +
	"'_asset_best_performance_cost_percentageB)\n" +
	"'_asset_good_performance_cost_percentageB(\n" +
	"&_asset_low_performance_cost_percentageB-\n" +
	"+_asset_learning_performance_cost_percentageB,\n" +
	"*_asset_unrated_performance_cost_percentageB7\n" +
	"5_store_visits_last_click_model_attributed_conversionsB\x1f\n" +
	"\x1d_results_conversions_purchaseB\x1a\n" +
	"\x18_video_view_rate_in_feedB\x1c\n" +
	"\x1a_video_view_rate_in_streamB\x19\n" +
	"\x17_video_view_rate_shortsB\x17\n" +
	"\x15_coviewed_impressionsB\x16\n" +
	"\x14_primary_impressionsB9\n" +
	"7_platform_comparable_conversions_from_interactions_rateB\"\n" +
	" _platform_comparable_conversionsB(\n" +
	"&_platform_comparable_conversions_valueB1\n" +
	"/_platform_comparable_conversions_value_per_costB5\n" +
	"3_platform_comparable_conversions_by_conversion_dateB;\n" +
	"9_platform_comparable_conversions_value_by_conversion_dateBJ\n" +
	"H_platform_comparable_conversions_from_interactions_value_per_interactionB*\n" +
	"(_cost_per_platform_comparable_conversionB+\n" +
	")_value_per_platform_comparable_conversionB?\n" +
	"=_value_per_platform_comparable_conversions_by_conversion_dateB=\n" +
	";_cost_converted_currency_per_platform_comparable_conversion\"Q\n" +
	"\x11SearchVolumeRange\x12\x15\n" +
	"\x03min\x18\x01 \x01(\x03H\x00R\x03min\x88\x01\x01\x12\x15\n" +
	"\x03max\x18\x02 \x01(\x03H\x01R\x03max\x88\x01\x01B\x06\n" +
	"\x04_minB\x06\n" +
	"\x04_maxB\xec\x01\n" +
	"#com.google.ads.googleads.v20.commonB\fMetricsProtoP\x01ZEgoogle.golang.org/genproto/googleapis/ads/googleads/v20/common;common\xa2\x02\x03GAA\xaa\x02\x1fGoogle.Ads.GoogleAds.V20.Common\xca\x02\x1fGoogle\\Ads\\GoogleAds\\V20\\Common\xea\x02#Google::Ads::GoogleAds::V20::Commonb\x06proto3"

var (
	file_google_ads_googleads_v20_common_metrics_proto_rawDescOnce sync.Once
	file_google_ads_googleads_v20_common_metrics_proto_rawDescData []byte
)

func file_google_ads_googleads_v20_common_metrics_proto_rawDescGZIP() []byte {
	file_google_ads_googleads_v20_common_metrics_proto_rawDescOnce.Do(func() {
		file_google_ads_googleads_v20_common_metrics_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_google_ads_googleads_v20_common_metrics_proto_rawDesc), len(file_google_ads_googleads_v20_common_metrics_proto_rawDesc)))
	})
	return file_google_ads_googleads_v20_common_metrics_proto_rawDescData
}

var file_google_ads_googleads_v20_common_metrics_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_google_ads_googleads_v20_common_metrics_proto_goTypes = []any{
	(*Metrics)(nil),           // 0: google.ads.googleads.v20.common.Metrics
	(*SearchVolumeRange)(nil), // 1: google.ads.googleads.v20.common.SearchVolumeRange
	(enums.QualityScoreBucketEnum_QualityScoreBucket)(0),     // 2: google.ads.googleads.v20.enums.QualityScoreBucketEnum.QualityScoreBucket
	(enums.InteractionEventTypeEnum_InteractionEventType)(0), // 3: google.ads.googleads.v20.enums.InteractionEventTypeEnum.InteractionEventType
}
var file_google_ads_googleads_v20_common_metrics_proto_depIdxs = []int32{
	2, // 0: google.ads.googleads.v20.common.Metrics.historical_creative_quality_score:type_name -> google.ads.googleads.v20.enums.QualityScoreBucketEnum.QualityScoreBucket
	2, // 1: google.ads.googleads.v20.common.Metrics.historical_landing_page_quality_score:type_name -> google.ads.googleads.v20.enums.QualityScoreBucketEnum.QualityScoreBucket
	2, // 2: google.ads.googleads.v20.common.Metrics.historical_search_predicted_ctr:type_name -> google.ads.googleads.v20.enums.QualityScoreBucketEnum.QualityScoreBucket
	3, // 3: google.ads.googleads.v20.common.Metrics.interaction_event_types:type_name -> google.ads.googleads.v20.enums.InteractionEventTypeEnum.InteractionEventType
	1, // 4: google.ads.googleads.v20.common.Metrics.search_volume:type_name -> google.ads.googleads.v20.common.SearchVolumeRange
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_google_ads_googleads_v20_common_metrics_proto_init() }
func file_google_ads_googleads_v20_common_metrics_proto_init() {
	if File_google_ads_googleads_v20_common_metrics_proto != nil {
		return
	}
	file_google_ads_googleads_v20_common_metrics_proto_msgTypes[0].OneofWrappers = []any{}
	file_google_ads_googleads_v20_common_metrics_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_google_ads_googleads_v20_common_metrics_proto_rawDesc), len(file_google_ads_googleads_v20_common_metrics_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_ads_googleads_v20_common_metrics_proto_goTypes,
		DependencyIndexes: file_google_ads_googleads_v20_common_metrics_proto_depIdxs,
		MessageInfos:      file_google_ads_googleads_v20_common_metrics_proto_msgTypes,
	}.Build()
	File_google_ads_googleads_v20_common_metrics_proto = out.File
	file_google_ads_googleads_v20_common_metrics_proto_goTypes = nil
	file_google_ads_googleads_v20_common_metrics_proto_depIdxs = nil
}
