// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: google/ads/googleads/v20/errors/asset_group_error.proto

package errors

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum describing possible asset group errors.
type AssetGroupErrorEnum_AssetGroupError int32

const (
	// Enum unspecified.
	AssetGroupErrorEnum_UNSPECIFIED AssetGroupErrorEnum_AssetGroupError = 0
	// The received error code is not known in this version.
	AssetGroupErrorEnum_UNKNOWN AssetGroupErrorEnum_AssetGroupError = 1
	// Each asset group in a single campaign must have a unique name.
	AssetGroupErrorEnum_DUPLICATE_NAME AssetGroupErrorEnum_AssetGroupError = 2
	// Cannot add asset group for the campaign type.
	AssetGroupErrorEnum_CANNOT_ADD_ASSET_GROUP_FOR_CAMPAIGN_TYPE AssetGroupErrorEnum_AssetGroupError = 3
	// Not enough headline asset for a valid asset group.
	AssetGroupErrorEnum_NOT_ENOUGH_HEADLINE_ASSET AssetGroupErrorEnum_AssetGroupError = 4
	// Not enough long headline asset for a valid asset group.
	AssetGroupErrorEnum_NOT_ENOUGH_LONG_HEADLINE_ASSET AssetGroupErrorEnum_AssetGroupError = 5
	// Not enough description headline asset for a valid asset group.
	AssetGroupErrorEnum_NOT_ENOUGH_DESCRIPTION_ASSET AssetGroupErrorEnum_AssetGroupError = 6
	// Not enough business name asset for a valid asset group.
	AssetGroupErrorEnum_NOT_ENOUGH_BUSINESS_NAME_ASSET AssetGroupErrorEnum_AssetGroupError = 7
	// Not enough marketing image asset for a valid asset group.
	AssetGroupErrorEnum_NOT_ENOUGH_MARKETING_IMAGE_ASSET AssetGroupErrorEnum_AssetGroupError = 8
	// Not enough square marketing image asset for a valid asset group.
	AssetGroupErrorEnum_NOT_ENOUGH_SQUARE_MARKETING_IMAGE_ASSET AssetGroupErrorEnum_AssetGroupError = 9
	// Not enough logo asset for a valid asset group.
	AssetGroupErrorEnum_NOT_ENOUGH_LOGO_ASSET AssetGroupErrorEnum_AssetGroupError = 10
	// Final url and shopping merchant url does not have the same domain.
	AssetGroupErrorEnum_FINAL_URL_SHOPPING_MERCHANT_HOME_PAGE_URL_DOMAINS_DIFFER AssetGroupErrorEnum_AssetGroupError = 11
	// Path1 required when path2 is set.
	AssetGroupErrorEnum_PATH1_REQUIRED_WHEN_PATH2_IS_SET AssetGroupErrorEnum_AssetGroupError = 12
	// At least one short description asset is required for a valid asset group.
	AssetGroupErrorEnum_SHORT_DESCRIPTION_REQUIRED AssetGroupErrorEnum_AssetGroupError = 13
	// Final url field is required for asset group.
	AssetGroupErrorEnum_FINAL_URL_REQUIRED AssetGroupErrorEnum_AssetGroupError = 14
	// Final url contains invalid domain name.
	AssetGroupErrorEnum_FINAL_URL_CONTAINS_INVALID_DOMAIN_NAME AssetGroupErrorEnum_AssetGroupError = 15
	// Ad customizers are not supported in asset group's text field.
	AssetGroupErrorEnum_AD_CUSTOMIZER_NOT_SUPPORTED AssetGroupErrorEnum_AssetGroupError = 16
	// Cannot mutate asset group for campaign with removed status.
	AssetGroupErrorEnum_CANNOT_MUTATE_ASSET_GROUP_FOR_REMOVED_CAMPAIGN AssetGroupErrorEnum_AssetGroupError = 17
)

// Enum value maps for AssetGroupErrorEnum_AssetGroupError.
var (
	AssetGroupErrorEnum_AssetGroupError_name = map[int32]string{
		0:  "UNSPECIFIED",
		1:  "UNKNOWN",
		2:  "DUPLICATE_NAME",
		3:  "CANNOT_ADD_ASSET_GROUP_FOR_CAMPAIGN_TYPE",
		4:  "NOT_ENOUGH_HEADLINE_ASSET",
		5:  "NOT_ENOUGH_LONG_HEADLINE_ASSET",
		6:  "NOT_ENOUGH_DESCRIPTION_ASSET",
		7:  "NOT_ENOUGH_BUSINESS_NAME_ASSET",
		8:  "NOT_ENOUGH_MARKETING_IMAGE_ASSET",
		9:  "NOT_ENOUGH_SQUARE_MARKETING_IMAGE_ASSET",
		10: "NOT_ENOUGH_LOGO_ASSET",
		11: "FINAL_URL_SHOPPING_MERCHANT_HOME_PAGE_URL_DOMAINS_DIFFER",
		12: "PATH1_REQUIRED_WHEN_PATH2_IS_SET",
		13: "SHORT_DESCRIPTION_REQUIRED",
		14: "FINAL_URL_REQUIRED",
		15: "FINAL_URL_CONTAINS_INVALID_DOMAIN_NAME",
		16: "AD_CUSTOMIZER_NOT_SUPPORTED",
		17: "CANNOT_MUTATE_ASSET_GROUP_FOR_REMOVED_CAMPAIGN",
	}
	AssetGroupErrorEnum_AssetGroupError_value = map[string]int32{
		"UNSPECIFIED":    0,
		"UNKNOWN":        1,
		"DUPLICATE_NAME": 2,
		"CANNOT_ADD_ASSET_GROUP_FOR_CAMPAIGN_TYPE":                 3,
		"NOT_ENOUGH_HEADLINE_ASSET":                                4,
		"NOT_ENOUGH_LONG_HEADLINE_ASSET":                           5,
		"NOT_ENOUGH_DESCRIPTION_ASSET":                             6,
		"NOT_ENOUGH_BUSINESS_NAME_ASSET":                           7,
		"NOT_ENOUGH_MARKETING_IMAGE_ASSET":                         8,
		"NOT_ENOUGH_SQUARE_MARKETING_IMAGE_ASSET":                  9,
		"NOT_ENOUGH_LOGO_ASSET":                                    10,
		"FINAL_URL_SHOPPING_MERCHANT_HOME_PAGE_URL_DOMAINS_DIFFER": 11,
		"PATH1_REQUIRED_WHEN_PATH2_IS_SET":                         12,
		"SHORT_DESCRIPTION_REQUIRED":                               13,
		"FINAL_URL_REQUIRED":                                       14,
		"FINAL_URL_CONTAINS_INVALID_DOMAIN_NAME":                   15,
		"AD_CUSTOMIZER_NOT_SUPPORTED":                              16,
		"CANNOT_MUTATE_ASSET_GROUP_FOR_REMOVED_CAMPAIGN":           17,
	}
)

func (x AssetGroupErrorEnum_AssetGroupError) Enum() *AssetGroupErrorEnum_AssetGroupError {
	p := new(AssetGroupErrorEnum_AssetGroupError)
	*p = x
	return p
}

func (x AssetGroupErrorEnum_AssetGroupError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetGroupErrorEnum_AssetGroupError) Descriptor() protoreflect.EnumDescriptor {
	return file_google_ads_googleads_v20_errors_asset_group_error_proto_enumTypes[0].Descriptor()
}

func (AssetGroupErrorEnum_AssetGroupError) Type() protoreflect.EnumType {
	return &file_google_ads_googleads_v20_errors_asset_group_error_proto_enumTypes[0]
}

func (x AssetGroupErrorEnum_AssetGroupError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetGroupErrorEnum_AssetGroupError.Descriptor instead.
func (AssetGroupErrorEnum_AssetGroupError) EnumDescriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_errors_asset_group_error_proto_rawDescGZIP(), []int{0, 0}
}

// Container for enum describing possible asset group errors.
type AssetGroupErrorEnum struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetGroupErrorEnum) Reset() {
	*x = AssetGroupErrorEnum{}
	mi := &file_google_ads_googleads_v20_errors_asset_group_error_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetGroupErrorEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetGroupErrorEnum) ProtoMessage() {}

func (x *AssetGroupErrorEnum) ProtoReflect() protoreflect.Message {
	mi := &file_google_ads_googleads_v20_errors_asset_group_error_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetGroupErrorEnum.ProtoReflect.Descriptor instead.
func (*AssetGroupErrorEnum) Descriptor() ([]byte, []int) {
	return file_google_ads_googleads_v20_errors_asset_group_error_proto_rawDescGZIP(), []int{0}
}

var File_google_ads_googleads_v20_errors_asset_group_error_proto protoreflect.FileDescriptor

const file_google_ads_googleads_v20_errors_asset_group_error_proto_rawDesc = "" +
	"\n" +
	"7google/ads/googleads/v20/errors/asset_group_error.proto\x12\x1fgoogle.ads.googleads.v20.errors\"\x9d\x05\n" +
	"\x13AssetGroupErrorEnum\"\x85\x05\n" +
	"\x0fAssetGroupError\x12\x0f\n" +
	"\vUNSPECIFIED\x10\x00\x12\v\n" +
	"\aUNKNOWN\x10\x01\x12\x12\n" +
	"\x0eDUPLICATE_NAME\x10\x02\x12,\n" +
	"(CANNOT_ADD_ASSET_GROUP_FOR_CAMPAIGN_TYPE\x10\x03\x12\x1d\n" +
	"\x19NOT_ENOUGH_HEADLINE_ASSET\x10\x04\x12\"\n" +
	"\x1eNOT_ENOUGH_LONG_HEADLINE_ASSET\x10\x05\x12 \n" +
	"\x1cNOT_ENOUGH_DESCRIPTION_ASSET\x10\x06\x12\"\n" +
	"\x1eNOT_ENOUGH_BUSINESS_NAME_ASSET\x10\a\x12$\n" +
	" NOT_ENOUGH_MARKETING_IMAGE_ASSET\x10\b\x12+\n" +
	"'NOT_ENOUGH_SQUARE_MARKETING_IMAGE_ASSET\x10\t\x12\x19\n" +
	"\x15NOT_ENOUGH_LOGO_ASSET\x10\n" +
	"\x12<\n" +
	"8FINAL_URL_SHOPPING_MERCHANT_HOME_PAGE_URL_DOMAINS_DIFFER\x10\v\x12$\n" +
	" PATH1_REQUIRED_WHEN_PATH2_IS_SET\x10\f\x12\x1e\n" +
	"\x1aSHORT_DESCRIPTION_REQUIRED\x10\r\x12\x16\n" +
	"\x12FINAL_URL_REQUIRED\x10\x0e\x12*\n" +
	"&FINAL_URL_CONTAINS_INVALID_DOMAIN_NAME\x10\x0f\x12\x1f\n" +
	"\x1bAD_CUSTOMIZER_NOT_SUPPORTED\x10\x10\x122\n" +
	".CANNOT_MUTATE_ASSET_GROUP_FOR_REMOVED_CAMPAIGN\x10\x11B\xf4\x01\n" +
	"#com.google.ads.googleads.v20.errorsB\x14AssetGroupErrorProtoP\x01ZEgoogle.golang.org/genproto/googleapis/ads/googleads/v20/errors;errors\xa2\x02\x03GAA\xaa\x02\x1fGoogle.Ads.GoogleAds.V20.Errors\xca\x02\x1fGoogle\\Ads\\GoogleAds\\V20\\Errors\xea\x02#Google::Ads::GoogleAds::V20::Errorsb\x06proto3"

var (
	file_google_ads_googleads_v20_errors_asset_group_error_proto_rawDescOnce sync.Once
	file_google_ads_googleads_v20_errors_asset_group_error_proto_rawDescData []byte
)

func file_google_ads_googleads_v20_errors_asset_group_error_proto_rawDescGZIP() []byte {
	file_google_ads_googleads_v20_errors_asset_group_error_proto_rawDescOnce.Do(func() {
		file_google_ads_googleads_v20_errors_asset_group_error_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_google_ads_googleads_v20_errors_asset_group_error_proto_rawDesc), len(file_google_ads_googleads_v20_errors_asset_group_error_proto_rawDesc)))
	})
	return file_google_ads_googleads_v20_errors_asset_group_error_proto_rawDescData
}

var file_google_ads_googleads_v20_errors_asset_group_error_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_google_ads_googleads_v20_errors_asset_group_error_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_google_ads_googleads_v20_errors_asset_group_error_proto_goTypes = []any{
	(AssetGroupErrorEnum_AssetGroupError)(0), // 0: google.ads.googleads.v20.errors.AssetGroupErrorEnum.AssetGroupError
	(*AssetGroupErrorEnum)(nil),              // 1: google.ads.googleads.v20.errors.AssetGroupErrorEnum
}
var file_google_ads_googleads_v20_errors_asset_group_error_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_google_ads_googleads_v20_errors_asset_group_error_proto_init() }
func file_google_ads_googleads_v20_errors_asset_group_error_proto_init() {
	if File_google_ads_googleads_v20_errors_asset_group_error_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_google_ads_googleads_v20_errors_asset_group_error_proto_rawDesc), len(file_google_ads_googleads_v20_errors_asset_group_error_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_google_ads_googleads_v20_errors_asset_group_error_proto_goTypes,
		DependencyIndexes: file_google_ads_googleads_v20_errors_asset_group_error_proto_depIdxs,
		EnumInfos:         file_google_ads_googleads_v20_errors_asset_group_error_proto_enumTypes,
		MessageInfos:      file_google_ads_googleads_v20_errors_asset_group_error_proto_msgTypes,
	}.Build()
	File_google_ads_googleads_v20_errors_asset_group_error_proto = out.File
	file_google_ads_googleads_v20_errors_asset_group_error_proto_goTypes = nil
	file_google_ads_googleads_v20_errors_asset_group_error_proto_depIdxs = nil
}
